const twilio = require('twilio');
const { logger, medicalLogger } = require('../utils/logger');
const { generateDiagnosis, processVoiceMessage, generateSimulation, generateMotivationalMessage } = require('../services/ai');
const { saveConversation, saveCase, getUser, createUser, updateUser, logAnalytics } = require('../config/firebase');
const { encryptData, decryptData } = require('../utils/encryption');
const advancedFeatures = require('../services/advanced-features');
const simulationManager = require('../services/simulation-manager');
const medicalAgentSystem = require('../services/medical-agent-system');

let twilioClient;
let webhookSecret;

// Initialize WhatsApp bot
function initializeWhatsAppBot() {
  try {
    twilioClient = twilio(
      process.env.TWILIO_ACCOUNT_SID,
      process.env.TWILIO_AUTH_TOKEN
    );
    
    // Medical agent system is already initialized as a singleton
    
    webhookSecret = process.env.TWILIO_WEBHOOK_SECRET;
    
    logger.info('тЬЕ WhatsApp bot initialized successfully with AI Agent System');
  } catch (error) {
    logger.error('тЭМ Error initializing WhatsApp bot:', error);
    throw error;
  }
}

// Enhanced welcome messages with AI Agent capabilities
const WELCOME_MESSAGES = {
  en: `ЁЯПе *Welcome to StethoLink AI Agent!*

I'm Dr. StethoLink, your intelligent AI medical assistant for Sri Lankan medical students.

ЁЯдЦ *I'm Your Personal AI Agent - I Can:*
тАв ЁЯУЭ **Add Tasks** - Just say "add task: study cardiology" or "remind me to review ECG"
тАв тП░ **Set Alerts** - I'll automatically remind you at the right time
тАв ЁЯУК **Track Progress** - Monitor your study efficiency and completion
тАв ЁЯЪи **Emergency Response** - Handle critical medical situations
тАв ЁЯУЪ **Study Planning** - Create personalized study schedules
тАв ЁЯТК **Drug Database** - Access Sri Lankan drug information
тАв ЁЯзо **Medical Calculators** - BMI, GFR, CHADS2, and more
тАв ЁЯУЛ **Clinical Guidelines** - Evidence-based protocols
тАв ЁЯФН **Drug Interactions** - Check medication safety
тАв ЁЯОн **Patient Simulation** - Practice with virtual patients

*Quick Commands:*
тАв "agent" - Initialize your personal AI agent
тАв "tasks" - View and manage your tasks
тАв "addtask" - Add a new task with automatic alerts
тАв "alerts" - Check your pending alerts
тАв "progress" - View your study progress
тАв "calculator" - Medical calculators
тАв "drugs" - Drug database
тАв "simulate" - Patient simulation
тАв "help" - Show all features

*Natural Language:*
Just type naturally! Examples:
тАв "Add task: study dengue fever guidelines"
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*Languages:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

Start by saying "initialize my agent" or use any command!`,

  si: `ЁЯПе *StethoLink AI Agent р╖Ар╖Щр╢н р╖Гр╖Пр╢пр╢╗р╢║р╖Щр╢▒р╖К р╢┤р╖Тр╖Ер╖Тр╢Ьр╢▒р╖Тр╢╕р╖Ф!*

р╢╕р╢╕ Dr. StethoLink, р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Бр╖Тр╖Вр╖КтАНр╢║р╢║р╖Тр╢▒р╖К р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢╢р╖Фр╢пр╖Кр╢░р╖Тр╢╕р╢нр╖К AI р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Гр╖Др╖Пр╢║р╢Ър╢║р╖П.

ЁЯдЦ *р╢╕р╢╕ р╢Фр╢╢р╖Ъ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ AI Agent - р╢╕р╢з р╖Др╖Рр╢Ър╖Т р╢пр╖Ъ:*
тАв ЁЯУЭ **р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕** - "add task: study cardiology" р╖Др╖Э "remind me to review ECG" р╢Ър╖Тр╢║р╢▒р╖Кр╢▒
тАв тП░ **р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К** - р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢╕р╢╕ р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв ЁЯУК **р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║** - р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Пр╢╗р╖Кр╢║р╢Ър╖Кр╖Вр╢╕р╢нр╖Пр╖А р╖Гр╖Д р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖Пр╖А р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║
тАв ЁЯЪи **р╖Др╢пр╖Тр╖Гр╖Т р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗** - р╢нр╖Ур╢╗р╢лр╖Пр╢нр╖Кр╢╕р╢Ъ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢нр╢нр╖Кр╖Ар╢║р╢▒р╖К р╖Др╖Гр╖Фр╢╗р╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕
тАв ЁЯУЪ **р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╖Гр╖Рр╢╜р╖Гр╖Фр╢╕р╖К** - р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Ур╢Ър╢╗р╢лр╢║ р╢Ър╢╗р╢▒ р╢╜р╢п р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Пр╢╜р╖Гр╢зр╖Др╢▒р╖К р╖Гр╖Ср╢пр╖Ур╢╕
тАв ЁЯТК **р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А** - р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╢Цр╖Вр╢░ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф
тАв ЁЯзо **р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗** - BMI, GFR, CHADS2, р╖Гр╖Д р╢нр╖Ар╢нр╖К
тАв ЁЯУЛ **р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б** - р╖Гр╖Пр╢Ър╖Кр╖Вр╖Т р╢╕р╢н р╢┤р╢пр╢▒р╢╕р╖К р╖Ар╖Ц р╢┤р╖КтАНр╢╗р╖Ьр╢зр╖Ьр╢Ър╖Эр╢╜
тАв ЁЯФН **р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П** - р╢Цр╖Вр╢░ р╢Жр╢╗р╢Ър╖Кр╖Вр╖Пр╖А р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╖Тр╢╗р╖Ур╢╕
тАв ЁЯОн **р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║** - р╢Ер╢нр╢ор╖КтАНр╢║ р╢╗р╖Эр╢Ьр╖Ур╢▒р╖К р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╖Ур╢╕

*р╢Ър╖Кр╖Вр╢лр╖Тр╢Ъ р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв "agent" - р╢Фр╢╢р╖Ъ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ AI agent р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв "tasks" - р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢╢р╢╜р╢▒р╖Кр╢▒ р╖Гр╖Д р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв "addtask" - р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╖Гр╢╕р╢Я р╢▒р╖А р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒
тАв "alerts" - р╢Фр╢╢р╖Ъ р╢Ер╢┤р╖Ър╢Ър╖Кр╖Вр╖Тр╢н р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв "progress" - р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢╢р╢╜р╢▒р╖Кр╢▒
тАв "calculator" - р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗
тАв "drugs" - р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А
тАв "simulate" - р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║
тАв "help" - р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒

*р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ъ р╢╖р╖Пр╖Вр╖Пр╖А:*
р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ър╖А р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒! р╢Лр╢пр╖Пр╖Др╢╗р╢л:
тАв "Add task: study dengue fever guidelines"
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*р╢╖р╖Пр╖Вр╖П:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

"initialize my agent" р╢Ър╖Тр╢║р╖П р╖Др╖Э р╢Хр╢▒р╖Ср╢╕ р╖Ар╖Тр╢░р╖Пр╢▒р╢║р╢Ър╖К р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢╕р╖Тр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!`,

  ta: `ЁЯПе *StethoLink AI Agent роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!*

роиро╛ройрпН Dr. StethoLink, роЗро▓роЩрпНроХрпИ рооро░рпБродрпНродрпБро╡ рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХро╛рой роЙроЩрпНроХро│рпН рокрпБродрпНродро┐роЪро╛ро▓ро┐ AI рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ропро╛ро│ро░рпН.

ЁЯдЦ *роиро╛ройрпН роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ AI Agent - роОройрпНройро╛ро▓рпН роорпБроЯро┐ропрпБроорпН:*
тАв ЁЯУЭ **рокрогро┐роХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН** - "add task: study cardiology" роЕро▓рпНро▓родрпБ "remind me to review ECG" роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН
тАв тП░ **роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН** - роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН
тАв ЁЯУК **роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН** - роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпБ родро┐ро▒ройрпН рооро▒рпНро▒рпБроорпН роорпБроЯро┐ро╡рпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
тАв ЁЯЪи **роЕро╡роЪро░ рокродро┐ро▓рпН** - роорпБроХрпНроХро┐ропрооро╛рой рооро░рпБродрпНродрпБро╡ роЪрпВро┤рпНроиро┐ро▓рпИроХро│рпИ роХрпИропро╛ро│ро╡рпБроорпН
тАв ЁЯУЪ **рокроЯро┐рокрпНрокрпБ родро┐роЯрпНроЯрооро┐роЯро▓рпН** - родройро┐рокрпНрокроЯрпНроЯ рокроЯро┐рокрпНрокрпБ роЕроЯрпНроЯро╡рогрпИроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН
тАв ЁЯТК **рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН** - роЗро▓роЩрпНроХрпИ рооро░рпБроирпНродрпБ родроХро╡ро▓рпН
тАв ЁЯзо **рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН** - BMI, GFR, CHADS2, роорпЗро▓рпБроорпН
тАв ЁЯУЛ **рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН** - роЪро╛ройрпНро▒рпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роирпЖро▒ро┐роорпБро▒рпИроХро│рпН
тАв ЁЯФН **рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпН** - рооро░рпБроирпНродрпБ рокро╛родрпБроХро╛рокрпНрокрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
тАв ЁЯОн **роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН** - роорпЖропрпНроиро┐роХро░рпН роирпЛропро╛ро│ро┐роХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡рпБроорпН

*ро╡ро┐ро░рпИро╡рпБ роХроЯрпНроЯро│рпИроХро│рпН:*
тАв "agent" - роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ AI agent роРродрпН родрпКроЯроЩрпНроХро╡рпБроорпН
тАв "tasks" - роЙроЩрпНроХро│рпН рокрогро┐роХро│рпИроХрпН роХро╛рогрпНроХ рооро▒рпНро▒рпБроорпН роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН
тАв "addtask" - родро╛ройро┐ропроЩрпНроХро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпБроЯройрпН рокрпБродро┐роп рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
тАв "alerts" - роЙроЩрпНроХро│рпН роиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
тАв "progress" - роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИроХрпН роХро╛рогрпНроХ
тАв "calculator" - рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН
тАв "drugs" - рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН
тАв "simulate" - роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН
тАв "help" - роЕройрпИродрпНродрпБ роЕроорпНроЪроЩрпНроХро│рпИропрпБроорпН роХро╛роЯрпНроЯрпБ

*роЗропро▒рпНроХрпИ роорпКро┤ро┐:*
роЗропро▒рпНроХрпИропро╛роХ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН! роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпН:
тАв "Add task: study dengue fever guidelines"
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*роорпКро┤ро┐роХро│рпН:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

"initialize my agent" роОройрпНро▒рпБ роЪрпКро▓рпНро▓ро┐ роЕро▓рпНро▓родрпБ роОроирпНрод роХроЯрпНроЯро│рпИропрпИропрпБроорпН рокропройрпНрокроЯрпБродрпНродро┐ родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН!`
};

// Help messages
const HELP_MESSAGES = {
  en: `ЁЯПе *StethoLink AI Help*

*Basic Commands:*
тАв Just type your symptoms for diagnosis
тАв Send voice message for voice-to-text
тАв /start - Restart the bot
тАв /help - Show this help

*Advanced Features:*
тАв /simulate - Practice with virtual patients
тАв /history - View your saved cases
тАв /mentor - Get study tips and motivation
тАв /vault - Download your clinical portfolio
тАв /remindme - Set daily practice reminders

*Voice Commands:*
тАв Send voice message in Sinhala, Tamil, or English
тАв Bot will transcribe and analyze symptoms

Need more help? Contact support.`,

  si: `ЁЯПе *StethoLink AI р╢Лр╢пр╖Ар╖К*

*р╢╕р╖Цр╢╜р╖Тр╢Ъ р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв р╢╗р╖Эр╢Ь р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╖Др╢м-р╢зр╖Ф-р╢зр╖Щр╢Ър╖Кр╖Гр╖Кр╢зр╖К р╖Гр╢│р╖Др╖П р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║р╢Ър╖К р╢║р╖Ар╢▒р╖Кр╢▒
тАв /start - р╢╢р╖Ьр╢зр╖К р╢▒р╖Рр╖Ар╢н р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /help - р╢╕р╖Щр╢╕ р╢Лр╢пр╖Ар╖К р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒

*р╢Лр╖Гр╖Гр╖К р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв /simulate - р╢Ер╢нр╢ор╖КтАНр╢║ р╢╗р╖Эр╢Ьр╖Ур╢▒р╖К р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╢▒р╖Кр╢▒
тАв /history - р╢Фр╢╢р╖Ъ р╖Гр╖Фр╢╗р╖Рр╢Ър╖Т р╢╗р╖Эр╢Ь р╢╢р╢╜р╢▒р╖Кр╢▒
тАв /mentor - р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Лр╢┤р╢пр╖Щр╖Гр╖К р╖Гр╖Д р╢░р╖Ыр╢╗р╖КтАНр╢║ р╢╜р╢╢р╖П р╢Ьр╢▒р╖Кр╢▒
тАв /vault - р╢Фр╢╢р╖Ъ р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢┤р╖Эр╢зр╖Кр╖Жр╖Эр╢╜р╖Тр╢║р╖Э р╢╢р╖Пр╢Ьр╢▒р╖Кр╢▒
тАв /remindme - р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒р╖Кр╢▒

*р╖Др╢м р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв р╖Гр╖Тр╢Вр╖Др╢╜, р╢пр╖Щр╢╕р╖Е, р╖Др╖Э р╢Йр╢Вр╢Ьр╖КтАНр╢╗р╖Ур╖Гр╖Тр╢║р╖Щр╢▒р╖К р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║р╢Ър╖К р╢║р╖Ар╢▒р╖Кр╢▒
тАв р╢╢р╖Ьр╢зр╖К р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢┤р╢╗р╖Тр╖Ар╢╗р╖Кр╢нр╢▒р╢║ р╢Ър╢╗ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║ р╢Ър╢╗р╢║р╖Т

р╢нр╖Ар╢нр╖К р╢Лр╢пр╖Ар╖К р╢Ер╖Ар╖Бр╖КтАНр╢║р╢п? р╖Гр╖Др╖Пр╢║ р╢Ер╢╕р╢нр╢▒р╖Кр╢▒.`,

  ta: `ЁЯПе *StethoLink AI роЙродро╡ро┐*

*роЕроЯро┐рокрпНрокроЯрпИ роХроЯрпНроЯро│рпИроХро│рпН:*
тАв роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН
тАв роХрпБро░ро▓рпН-роХрпНроХрпБ-роЙро░рпИроХрпНроХрпБ роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН
тАв /start - рокро╛роЯрпН роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН
тАв /help - роЗроирпНрод роЙродро╡ро┐ропрпИроХрпН роХро╛роЯрпНроЯрпБ

*роорпЗроорпНрокроЯрпНроЯ роЕроорпНроЪроЩрпНроХро│рпН:*
тАв /simulate - роорпЖропрпНроиро┐роХро░рпН роирпЛропро╛ро│ро┐роХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒рпБроЩрпНроХро│рпН
тАв /history - роЙроЩрпНроХро│рпН роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┤роХрпНроХрпБроХро│рпИроХрпН роХро╛рогрпНроХ
тАв /mentor - рокроЯро┐рокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роКроХрпНроХродрпНродрпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН
тАв /vault - роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛро╡рпИрокрпН рокродро┐ро╡ро┐ро▒роХрпНроХрпБроЩрпНроХро│рпН
тАв /remindme - родро┐ройроЪро░ро┐ рокропро┐ро▒рпНроЪро┐ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН

*роХрпБро░ро▓рпН роХроЯрпНроЯро│рпИроХро│рпН:*
тАв роЪро┐роЩрпНроХро│роорпН, родрооро┐ро┤рпН роЕро▓рпНро▓родрпБ роЖроЩрпНроХро┐ро▓родрпНродро┐ро▓рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН
тАв рокро╛роЯрпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роорпКро┤ро┐рокрпЖропро░рпНродрпНродрпБ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрпБроорпН

роорпЗро▓рпБроорпН роЙродро╡ро┐ родрпЗро╡рпИропро╛? роЖродро░ро╡рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН.`
};

// Process incoming WhatsApp message
async function processWhatsAppMessage(req, res) {
  try {
    // Verify webhook signature
    const signature = req.headers['x-twilio-signature'];
    const url = req.protocol + '://' + req.get('host') + req.originalUrl;
    
    if (!twilio.validateRequest(webhookSecret, signature, url, req.body)) {
      logger.warn('тЭМ Invalid WhatsApp webhook signature');
      return res.status(403).send('Forbidden');
    }

    const { Body, From, MediaUrl0, MessageSid, NumMedia } = req.body;
    const phoneNumber = From.replace('whatsapp:', '');
    
    logger.info('ЁЯУ▒ Processing WhatsApp message', {
      phoneNumber,
      messageType: NumMedia > 0 ? 'media' : 'text',
      messageId: MessageSid
    });

    // Get or create user
    let user = await getUserByPhone(phoneNumber);
    if (!user) {
      user = await createWhatsAppUser(phoneNumber);
    }

    // Update user activity
    await updateUser(user.uid, {
      'stats.lastActive': new Date(),
      platform: 'whatsapp'
    });

    let response;

    // Handle media messages (voice/audio)
    if (NumMedia > 0 && MediaUrl0) {
      response = await handleVoiceMessage(MediaUrl0, user, MessageSid);
    } else {
      // Handle text messages
      response = await handleTextMessage(Body, user, MessageSid);
    }

    // Send response
    await sendWhatsAppMessage(phoneNumber, response);

    // Log analytics
    await logAnalytics({
      event: 'whatsapp_message_processed',
      userId: user.uid,
      platform: 'whatsapp',
      messageType: NumMedia > 0 ? 'voice' : 'text',
      language: user.language || 'en'
    });

    res.status(200).send('OK');

  } catch (error) {
    logger.error('тЭМ Error processing WhatsApp message:', error);
    medicalLogger.medicalError(error, {
      platform: 'whatsapp',
      operation: 'message_processing'
    });
    
    // Send error message to user
    try {
      const errorMessage = {
        en: 'Sorry, I encountered an error. Please try again.',
        si: 'р╖Гр╢╕р╖Пр╖Ар╢▒р╖Кр╢▒, р╢╕р╢з р╢пр╖Эр╖Вр╢║р╢Ър╖К р╢Зр╢нр╖Т р╖Ар╖Тр╢║. р╢▒р╖Рр╖Ар╢н р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒.',
        ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН рокро┐ро┤рпИропрпИ роОродро┐ро░рпНроХрпКрогрпНроЯрпЗройрпН. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
      };
      
      await sendWhatsAppMessage(req.body.From.replace('whatsapp:', ''), 
        errorMessage[req.body.language] || errorMessage.en);
    } catch (sendError) {
      logger.error('тЭМ Error sending error message:', sendError);
    }
    
    res.status(500).send('Internal Server Error');
  }
}

// Handle text messages
async function handleTextMessage(message, user, messageId) {
  const command = message.trim().toLowerCase();
  const language = user.language || 'en';

  // Save conversation
  await saveConversation({
    userId: user.uid,
    platform: 'whatsapp',
    messageId: messageId,
    userMessage: message,
    timestamp: new Date()
  });

  // Enhanced intelligent command detection with AI Agent capabilities
  const lowerMessage = message.toLowerCase().trim();
  
  // AI Agent Natural Language Commands
  if (lowerMessage.includes('add task') || lowerMessage.includes('set task') || lowerMessage.includes('create task')) {
    return await handleNaturalLanguageTaskCreation(message, user, language);
  }
  
  if (lowerMessage.includes('remind me') || lowerMessage.includes('set reminder') || lowerMessage.includes('alert me')) {
    return await handleNaturalLanguageReminder(message, user, language);
  }
  
  if (lowerMessage.includes('initialize') && lowerMessage.includes('agent')) {
    return await handleAgentCommand(user, language);
  }
  
  if (lowerMessage.includes('my tasks') || lowerMessage.includes('show tasks') || lowerMessage.includes('list tasks')) {
    return await handleTasksCommand(user, language);
  }
  
  if (lowerMessage.includes('my alerts') || lowerMessage.includes('show alerts') || lowerMessage.includes('check alerts')) {
    return await handleAlertsCommand(user, language);
  }
  
  if (lowerMessage.includes('my progress') || lowerMessage.includes('show progress') || lowerMessage.includes('study progress')) {
    return await handleProgressCommand(user, language);
  }
  
  // Drug interaction queries
  if (lowerMessage.includes('drug interaction') || lowerMessage.includes('check interaction') || lowerMessage.includes('medication interaction')) {
    return await handleNaturalLanguageDrugInteraction(message, user, language);
  }
  
  // Calculator queries
  if (lowerMessage.includes('calculate') || lowerMessage.includes('bmi') || lowerMessage.includes('gfr') || lowerMessage.includes('chads2')) {
    return await handleNaturalLanguageCalculator(message, user, language);
  }

  // Handle commands
  if (command === '/start' || command === 'start') {
    return WELCOME_MESSAGES[language] || WELCOME_MESSAGES.en;
  }

  if (command === '/help' || command === 'help') {
    return HELP_MESSAGES[language] || HELP_MESSAGES.en;
  }

  if (command === '/simulate' || command === 'simulate') {
    return await handleSimulationCommand(user, language);
  }

  if (command === '/history' || command === 'history') {
    return await handleHistoryCommand(user, language);
  }

  if (command === '/mentor' || command === 'mentor') {
    return await handleMentorCommand(user, language);
  }

  if (command === '/vault' || command === 'vault') {
    return await handleVaultCommand(user, language);
  }

  if (command === '/remindme' || command === 'remindme') {
    return await handleReminderCommand(user, language);
  }

  // AI Agent Commands
  if (command === 'agent') {
    return await handleAgentCommand(user, language);
  }

  if (command === 'tasks') {
    return await handleTasksCommand(user, language);
  }

  if (command === 'addtask') {
    return await handleAddTaskCommand(user, language);
  }

  if (command === 'alerts') {
    return await handleAlertsCommand(user, language);
  }

  if (command === 'progress') {
    return await handleProgressCommand(user, language);
  }

  // Handle symptoms for diagnosis
  if (message.length > 10) {
    return await handleDiagnosisRequest(message, user, language);
  }

  // Default response
  const defaultResponses = {
    en: 'ЁЯдЦ *AI Agent Ready!*\n\nI can help you with:\nтАв Add tasks: "add task: study cardiology"\nтАв Set reminders: "remind me to review ECG"\nтАв Check drug interactions: "check warfarin and aspirin"\nтАв Calculate: "calculate BMI 70kg 1.75m"\n\nOr use "help" for all commands!',
    si: 'ЁЯдЦ *AI Agent р╖Гр╖Цр╢пр╖Пр╢▒р╢╕р╖К!*\n\nр╢╕р╢з р╢Фр╢╢р╢з р╢Лр╢пр╖Ар╖К р╢Ър╖Е р╖Др╖Рр╢Ър╖Кр╢Ър╖Ъ:\nтАв р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕: "add task: study cardiology"\nтАв р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К: "remind me to review ECG"\nтАв р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П: "check warfarin and aspirin"\nтАв р╢Ьр╢лр╢▒р╢║ р╢Ър╖Тр╢╗р╖Ур╢╕: "calculate BMI 70kg 1.75m"\n\nр╢▒р╖Рр╢нр╖Др╖Ьр╢нр╖К р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╖Ар╖Тр╢░р╖Пр╢▒ р╖Гр╢│р╖Др╖П "help" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒!',
    ta: 'ЁЯдЦ *AI Agent родропро╛ро░рпН!*\n\nроиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:\nтАв рокрогро┐роХро│рпИ роЪрпЗро░рпНроХрпНроХ: "add task: study cardiology"\nтАв роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН: "remind me to review ECG"\nтАв рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпН: "check warfarin and aspirin"\nтАв роХрогроХрпНроХро┐роЯ: "calculate BMI 70kg 1.75m"\n\nроЕро▓рпНро▓родрпБ роЕройрпИродрпНродрпБ роХроЯрпНроЯро│рпИроХро│рпБроХрпНроХрпБроорпН "help" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН!'
  };

  return defaultResponses[language] || defaultResponses.en;
}

// Handle voice messages
async function handleVoiceMessage(mediaUrl, user, messageId) {
  try {
    logger.info('ЁЯОд Processing voice message from WhatsApp', { userId: user.uid });
    
    // Download audio file
    const audioBuffer = await downloadAudioFile(mediaUrl);
    
    // Process with Whisper
    const transcription = await processVoiceMessage(audioBuffer, user.language || 'en');
    
    // Save voice message
    await saveVoiceMessage({
      userId: user.uid,
      platform: 'whatsapp',
      messageId: messageId,
      mediaUrl: mediaUrl,
      transcription: transcription.text,
      language: transcription.language,
      processingTime: transcription.processingTime
    });

    // Generate diagnosis from transcribed text
    const diagnosis = await generateDiagnosis(
      transcription.text, 
      transcription.language, 
      user.uid
    );

    // Save case
    await saveCase({
      userId: user.uid,
      platform: 'whatsapp',
      symptoms: transcription.text,
      diagnosis: diagnosis.diagnosis,
      language: transcription.language,
      source: 'voice',
      processingTime: diagnosis.processingTime
    });

    const language = user.language || 'en';
    const responses = {
      en: `ЁЯОд *Voice Message Transcribed:*
"${transcription.text}"

ЁЯПе *Medical Analysis:*
${diagnosis.diagnosis}`,
      
      si: `ЁЯОд *р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║ р╢┤р╢╗р╖Тр╖Ар╢╗р╖Кр╢нр╢▒р╢║ р╢Ър╢╗р╢▒ р╢╜р╢пр╖У:*
"${transcription.text}"

ЁЯПе *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║:*
${diagnosis.diagnosis}`,
      
      ta: `ЁЯОд *роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ:*
"${transcription.text}"

ЁЯПе *рооро░рпБродрпНродрпБро╡ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ:*
${diagnosis.diagnosis}`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling voice message:', error);
    
    const errorResponses = {
      en: 'Sorry, I could not process your voice message. Please try typing your symptoms instead.',
      si: 'р╖Гр╢╕р╖Пр╖Ар╢▒р╖Кр╢▒, р╢╕р╢з р╢Фр╢╢р╖Ъ р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║ р╖Гр╖Рр╢Ър╖Гр╖Ур╢╕р╢з р╢▒р╖Ьр╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢║. р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢зр╢║р╖Тр╢┤р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒.',
      ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН роЙроЩрпНроХро│рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЪрпЖропро▓ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНроп роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
    };

    return errorResponses[user.language] || errorResponses.en;
  }
}

// Handle diagnosis request
async function handleDiagnosisRequest(symptoms, user, language) {
  try {
    logger.info('ЁЯПе Processing diagnosis request', { userId: user.uid, language });
    
    const diagnosis = await generateDiagnosis(symptoms, language, user.uid);
    
    // Save case
    await saveCase({
      userId: user.uid,
      platform: 'whatsapp',
      symptoms: symptoms,
      diagnosis: diagnosis.diagnosis,
      language: language,
      source: 'text',
      processingTime: diagnosis.processingTime
    });

    const responses = {
      en: `ЁЯПе *Medical Analysis:*
${diagnosis.diagnosis}`,
      
      si: `ЁЯПе *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║:*
${diagnosis.diagnosis}`,
      
      ta: `ЁЯПе *рооро░рпБродрпНродрпБро╡ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ:*
${diagnosis.diagnosis}`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling diagnosis request:', error);
    
    const errorResponses = {
      en: 'Sorry, I could not analyze your symptoms. Please try again.',
      si: 'р╖Гр╢╕р╖Пр╖Ар╢▒р╖Кр╢▒, р╢╕р╢з р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║ р╢Ър╖Е р╢▒р╖Ьр╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢║. р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢▒р╖Рр╖Ар╢н р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒.',
      ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
    };

    return errorResponses[language] || errorResponses.en;
  }
}

// Handle simulation command
async function handleSimulationCommand(user, language) {
  try {
    const conditions = [
      'Dengue fever',
      'Leptospirosis',
      'Typhoid fever',
      'Malaria',
      'Acute gastroenteritis',
      'Upper respiratory tract infection',
      'Hypertension',
      'Diabetes mellitus'
    ];

    const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];
    
    const simulation = await generateSimulation(randomCondition, language, {
      age: Math.floor(Math.random() * 50) + 20,
      gender: Math.random() > 0.5 ? 'Male' : 'Female',
      occupation: 'Farmer',
      location: 'Rural Sri Lanka'
    });

    const responses = {
      en: `ЁЯОн *Patient Simulation Started*

*Patient Profile:*
- Age: ${simulation.patientProfile.age}
- Gender: ${simulation.patientProfile.gender}
- Occupation: ${simulation.patientProfile.occupation}
- Location: ${simulation.patientProfile.location}

*Patient's Initial Presentation:*
${simulation.simulation}

Ask questions to diagnose the patient!`,
      
      si: `ЁЯОн *р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Жр╢╗р╢╕р╖Кр╢╖ р╖Ар╖Тр╢║*

*р╢╗р╖Эр╢Ьр╖У р╢┤р╖Рр╢нр╖Тр╢Ър╢й:*
- р╖Ар╢║р╖Г: ${simulation.patientProfile.age}
- р╖Гр╖Кр╢нр╖КтАНр╢╗р╖У р╢┤р╖Фр╢╗р╖Фр╖В р╢╖р╖Пр╖Ар╢║: ${simulation.patientProfile.gender}
- р╢╗р╖Рр╢Ър╖Тр╢║р╖Пр╖А: ${simulation.patientProfile.occupation}
- р╖Гр╖Кр╢ор╖Пр╢▒р╢║: ${simulation.patientProfile.location}

*р╢╗р╖Эр╢Ьр╖Тр╢║р╖Пр╢Ьр╖Ъ р╢╕р╖Цр╢╜р╖Тр╢Ъ р╢Йр╢пр╖Тр╢╗р╖Тр╢┤р╢нр╖К р╢Ър╖Тр╢╗р╖Ур╢╕:*
${simulation.simulation}

р╢╗р╖Эр╢Ьр╖Тр╢║р╖П р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒ р╢Зр╖Гр╖Ур╢╕р╢з!`,
      
      ta: `ЁЯОн *роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН родрпКроЯроЩрпНроХрокрпНрокроЯрпНроЯродрпБ*

*роирпЛропро╛ро│ро┐ роЪрпБропро╡ро┐ро╡ро░роорпН:*
- ро╡ропродрпБ: ${simulation.patientProfile.age}
- рокро╛ро▓ро┐ройроорпН: ${simulation.patientProfile.gender}
- родрпКро┤ро┐ро▓рпН: ${simulation.patientProfile.occupation}
- роЗроЯроорпН: ${simulation.patientProfile.location}

*роирпЛропро╛ро│ро┐ропро┐ройрпН роЖро░роорпНрок ро╡ро┐ро│роХрпНроХроХрпНроХро╛роЯрпНроЪро┐:*
${simulation.simulation}

роирпЛропро╛ро│ро┐ропрпИ роХрогрпНроЯро▒ро┐роп роХрпЗро│рпНро╡ро┐роХро│рпН роХрпЗро│рпНро╡ро┐!`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling simulation command:', error);
    return 'Sorry, simulation is currently unavailable.';
  }
}

// Handle history command
async function handleHistoryCommand(user, language) {
  try {
    const cases = await getCases(user.uid, 5);
    
    if (cases.length === 0) {
      const responses = {
        en: 'ЁЯУЛ *Case History*\n\nNo cases found. Start by describing symptoms!',
        si: 'ЁЯУЛ *р╢╗р╖Эр╢Ь р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║*\n\nр╢╗р╖Эр╢Ь р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║. р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╖Ар╖Тр╖Гр╖Кр╢нр╢╗ р╢Ър╖Тр╢╗р╖Ур╢╕р╖Щр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!',
        ta: 'ЁЯУЛ *ро╡ро┤роХрпНроХрпБ ро╡ро░ро▓ро╛ро▒рпБ*\n\nро╡ро┤роХрпНроХрпБроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ ро╡ро┐ро╡ро░ро┐рокрпНрокродройрпН роорпВро▓роорпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН!'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'ЁЯУЛ *р╢╗р╖Эр╢Ь р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║*\n\n' :
                   language === 'ta' ? 'ЁЯУЛ *ро╡ро┤роХрпНроХрпБ ро╡ро░ро▓ро╛ро▒рпБ*\n\n' :
                   'ЁЯУЛ *Case History*\n\n';

    cases.forEach((case_, index) => {
      const date = new Date(case_.createdAt.toDate()).toLocaleDateString();
      const symptoms = case_.symptoms.substring(0, 50) + '...';
      
      response += `${index + 1}. *${date}*\n`;
      response += `Symptoms: ${symptoms}\n\n`;
    });

    return response;

  } catch (error) {
    logger.error('тЭМ Error handling history command:', error);
    return 'Sorry, could not retrieve case history.';
  }
}

// Handle mentor command
async function handleMentorCommand(user, language) {
  try {
    const motivationalMessage = await generateMotivationalMessage(language, 'daily');
    
    const responses = {
      en: `ЁЯОУ *Mentor Message*\n\n${motivationalMessage.message}\n\nKeep learning, future doctor! ЁЯТк`,
      si: `ЁЯОУ *р╢Лр╢┤р╢пр╖Ър╖Бр╢Ъ р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║*\n\n${motivationalMessage.message}\n\nр╢Йр╢Ьр╖Щр╢▒ р╢Ьр╖Рр╢▒р╖Ур╢╕ р╢пр╖Тр╢Ьр╢зр╢╕ р╢Ър╢╗р╢Ьр╖Щр╢▒ р╢║р╢▒р╖Кр╢▒, р╢Ер╢▒р╖Пр╢Ьр╢н р╖Ар╖Ыр╢пр╖КтАНр╢║р╖Ар╢╗р╢║р╖П! ЁЯТк`,
      ta: `ЁЯОУ *ро╡ро┤ро┐роХро╛роЯрпНроЯро┐ роЪрпЖропрпНродро┐*\n\n${motivationalMessage.message}\n\nроХро▒рпНро▒рпБроХрпНроХрпКрогрпНроЯрпЗ роЗро░рпБроЩрпНроХро│рпН, роОродро┐ро░рпНроХро╛ро▓ рооро░рпБродрпНродрпБро╡ро░рпЗ! ЁЯТк`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling mentor command:', error);
    return 'Keep studying hard, future doctor! ЁЯТк';
  }
}

// Handle vault command
async function handleVaultCommand(user, language) {
  const responses = {
    en: 'ЁЯУБ *Clinical Vault*\n\nYour encrypted clinical portfolio is being prepared. You will receive a download link shortly.',
    si: 'ЁЯУБ *р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢Ьр╢╢р╢йр╖Пр╖А*\n\nр╢Фр╢╢р╖Ъ р╢Ср╢▒р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢┤р╖Кр╢зр╖К р╢Ър╢╗р╢▒ р╢╜р╢п р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢┤р╖Эр╢зр╖Кр╖Жр╖Эр╢╜р╖Тр╢║р╖Э р╖Гр╖Цр╢пр╖Пр╢▒р╢╕р╖К р╢Ър╢╗р╢╕р╖Тр╢▒р╖К р╢┤р╖Ар╢нр╖У. р╢Фр╢╢р╢з р╢Йр╢Ър╖Кр╢╕р╢▒р╖Тр╢▒р╖К р╢╢р╖Пр╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╖Гр╢╢р╖Рр╢│р╖Тр╢║р╢Ър╖К р╢╜р╖Рр╢╢р╖Щр╢▒р╖Ф р╢Зр╢н.',
    ta: 'ЁЯУБ *рооро░рпБродрпНродрпБро╡ роХро╛рокрпНрокроХроорпН*\n\nроЙроЩрпНроХро│рпН роХрпБро▒ро┐ропро╛роХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБродрпНродрпБро╡ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛ родропро╛ро░ро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ. ро╡ро┐ро░рпИро╡ро┐ро▓рпН рокродро┐ро╡ро┐ро▒роХрпНроХ роЗрогрпИрокрпНрокрпИрокрпН рокрпЖро▒рпБро╡рпАро░рпНроХро│рпН.'
  };

  return responses[language] || responses.en;
}

// Handle reminder command
async function handleReminderCommand(user, language) {
  const responses = {
    en: 'тП░ *Daily Reminders*\n\nReminders set! You will receive daily practice prompts to keep your skills sharp.',
    si: 'тП░ *р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К*\n\nр╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У! р╢Фр╢╢р╖Ъ р╢Ър╖Фр╖Гр╢╜р╢нр╖П р╢нр╖Тр╢║р╖Фр╢лр╖Фр╖А р╢нр╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╢Йр╢Яр╖Т р╢Фр╢╢р╢з р╢╜р╖Рр╢╢р╖Щр╢▒р╖Ф р╢Зр╢н.',
    ta: 'тП░ *родро┐ройроЪро░ро┐ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН*\n\nроиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯрой! роЙроЩрпНроХро│рпН родро┐ро▒ройрпНроХро│рпИ роХрпВро░рпНроорпИропро╛роХ ро╡рпИродрпНродро┐ро░рпБроХрпНроХ родро┐ройроЪро░ро┐ рокропро┐ро▒рпНроЪро┐ роХрпБро▒ро┐рокрпНрокрпБроХро│рпИрокрпН рокрпЖро▒рпБро╡рпАро░рпНроХро│рпН.'
  };

  return responses[language] || responses.en;
}

// Send WhatsApp message
async function sendWhatsAppMessage(phoneNumber, message) {
  try {
    const response = await twilioClient.messages.create({
      body: message,
      from: process.env.TWILIO_PHONE_NUMBER,
      to: `whatsapp:${phoneNumber}`
    });

    logger.info('тЬЕ WhatsApp message sent successfully', {
      messageId: response.sid,
      to: phoneNumber
    });

    return response;
  } catch (error) {
    logger.error('тЭМ Error sending WhatsApp message:', error);
    throw error;
  }
}

// Get user by phone number
async function getUserByPhone(phoneNumber) {
  try {
    // This would typically query your database
    // For now, return null to create new user
    return null;
  } catch (error) {
    logger.error('тЭМ Error getting user by phone:', error);
    return null;
  }
}

// Create WhatsApp user
async function createWhatsAppUser(phoneNumber) {
  try {
    const userData = {
      phoneNumber: phoneNumber,
      displayName: `WhatsApp User ${phoneNumber.slice(-4)}`,
      language: 'en', // Default language
      platform: 'whatsapp'
    };

    const user = await createUser(userData);
    logger.info('тЬЕ WhatsApp user created', { uid: user.uid, phoneNumber });
    
    return user;
  } catch (error) {
    logger.error('тЭМ Error creating WhatsApp user:', error);
    throw error;
  }
}

// Download audio file (placeholder)
async function downloadAudioFile(url) {
  // This would download the audio file from the URL
  // For now, return a placeholder
  return Buffer.from('placeholder audio data');
}

// Save voice message (placeholder)
async function saveVoiceMessage(data) {
  // This would save voice message data
  logger.info('Voice message saved', data);
}

// Get cases (placeholder)
async function getCases(userId, limit) {
  // This would retrieve cases from database
  return [];
}

// AI Agent Command Handlers

async function handleAgentCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.initializeAgent(user.uid, {
      name: user.displayName || user.firstName || 'Medical Student',
      email: user.email || '',
      phone: user.phone || user.phoneNumber,
      whatsappId: user.phoneNumber,
      studyLevel: 'intermediate',
      specialization: 'general'
    });

    const responses = {
      en: `ЁЯдЦ *AI Agent Initialized Successfully!*

*Agent ID:* ${agent.id}
*Student:* ${agent.userData.name}
*Status:* ${agent.status}

*Your AI Agent Can:*
тАв ЁЯУЭ Add and manage tasks with automatic alerts
тАв тП░ Set intelligent reminders
тАв ЁЯУК Track your study progress
тАв ЁЯЪи Handle emergency situations
тАв ЁЯТК Access drug database and interactions
тАв ЁЯзо Use medical calculators
тАв ЁЯУЛ Get clinical guidelines
тАв ЁЯОн Practice with patient simulations

*Try these commands:*
тАв "add task: study cardiology for 2 hours"
тАв "remind me to review ECG tomorrow at 9 AM"
тАв "check drug interaction between warfarin and aspirin"
тАв "calculate BMI for weight 70kg height 1.75m"

Your agent is now active and ready to help! ЁЯЪА`,

      si: `ЁЯдЦ *AI Agent р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╖А р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒ р╢╜р╢пр╖У!*

*Agent ID:* ${agent.id}
*р╖Бр╖Тр╖Вр╖КтАНр╢║р╢║р╖П:* ${agent.userData.name}
*р╢нр╢нр╖Кр╖Ар╢║:* ${agent.status}

*р╢Фр╢╢р╖Ъ AI Agent р╢з р╖Др╖Рр╢Ър╖Т р╢пр╖Ъ:*
тАв ЁЯУЭ р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╖Гр╢╕р╢Я р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕ р╖Гр╖Д р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║
тАв тП░ р╢╢р╖Фр╢пр╖Кр╢░р╖Тр╢╕р╢нр╖К р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К
тАв ЁЯУК р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║
тАв ЁЯЪи р╖Др╢пр╖Тр╖Гр╖Т р╢нр╢нр╖Кр╖Ар╢║р╢▒р╖К р╖Др╖Гр╖Фр╢╗р╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕
тАв ЁЯТК р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А р╖Гр╖Д р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╖КтАНр╢╗р╖Ар╖Ър╖Бр╢║
тАв ЁЯзо р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗ р╢╖р╖Пр╖Ар╖Тр╢нр╢║
тАв ЁЯУЛ р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б р╢╜р╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕
тАв ЁЯОн р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒ р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╖Ур╢╕

*р╢╕р╖Щр╢╕ р╖Ар╖Тр╢░р╖Пр╢▒ р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒:*
тАв "add task: study cardiology for 2 hours"
тАв "remind me to review ECG tomorrow at 9 AM"
тАв "check drug interaction between warfarin and aspirin"
тАв "calculate BMI for weight 70kg height 1.75m"

р╢Фр╢╢р╖Ъ agent р╢пр╖Рр╢▒р╖К р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У р╖Ар╢▒ р╢Ер╢нр╢╗ р╢Лр╢пр╖Ар╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╖Гр╖Цр╢пр╖Пр╢▒р╢╕р╖К! ЁЯЪА`,

      ta: `ЁЯдЦ *AI Agent ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ родрпКроЯроЩрпНроХрокрпНрокроЯрпНроЯродрпБ!*

*Agent ID:* ${agent.id}
*рооро╛рогро╡ро░рпН:* ${agent.userData.name}
*роиро┐ро▓рпИ:* ${agent.status}

*роЙроЩрпНроХро│рпН AI Agent роЪрпЖропрпНроп роорпБроЯро┐ропрпБроорпН:*
тАв ЁЯУЭ родро╛ройро┐ропроЩрпНроХро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпБроЯройрпН рокрогро┐роХро│рпИ роЪрпЗро░рпНродрпНродрпБ роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН
тАв тП░ рокрпБродрпНродро┐роЪро╛ро▓ро┐ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН
тАв ЁЯУК роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
тАв ЁЯЪи роЕро╡роЪро░ роЪрпВро┤рпНроиро┐ро▓рпИроХро│рпИ роХрпИропро╛ро│ро╡рпБроорпН
тАв ЁЯТК рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН рооро▒рпНро▒рпБроорпН родрпКроЯро░рпНрокрпБроХро│рпИ роЕрогрпБроХро╡рпБроорпН
тАв ЁЯзо рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
тАв ЁЯУЛ рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпИрокрпН рокрпЖро▒ро╡рпБроорпН
тАв ЁЯОн роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпНроХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡рпБроорпН

*роЗроирпНрод роХроЯрпНроЯро│рпИроХро│рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН:*
тАв "add task: study cardiology for 2 hours"
тАв "remind me to review ECG tomorrow at 9 AM"
тАв "check drug interaction between warfarin and aspirin"
тАв "calculate BMI for weight 70kg height 1.75m"

роЙроЩрпНроХро│рпН agent роЗрокрпНрокрпЛродрпБ роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│родрпБ рооро▒рпНро▒рпБроорпН роЙродро╡ родропро╛ро░ро╛роХ роЙро│рпНро│родрпБ! ЁЯЪА`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in agent command:', error);
    return 'Sorry, could not initialize AI agent. Please try again.';
  }
}

async function handleTasksCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid);
    const tasks = agent.currentTasks || [];

    if (tasks.length === 0) {
      const responses = {
        en: 'ЁЯУЭ *Your Tasks*\n\nNo tasks found. Add your first task!\n\nTry: "add task: study cardiology"',
        si: 'ЁЯУЭ *р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К*\n\nр╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║. р╢Фр╢╢р╖Ъ р╢┤р╖Ер╢╕р╖Ф р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒!\n\nр╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒: "add task: study cardiology"',
        ta: 'ЁЯУЭ *роЙроЩрпНроХро│рпН рокрогро┐роХро│рпН*\n\nрокрогро┐роХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН роорпБродро▓рпН рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН!\n\nроорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН: "add task: study cardiology"'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'ЁЯУЭ *р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К*\n\n' :
                   language === 'ta' ? 'ЁЯУЭ *роЙроЩрпНроХро│рпН рокрогро┐роХро│рпН*\n\n' :
                   'ЁЯУЭ *Your Tasks*\n\n';

    tasks.forEach((task, index) => {
      const status = task.status === 'completed' ? 'тЬЕ' : 'тП│';
      const priority = task.priority === 'high' ? 'ЁЯФ┤' : task.priority === 'medium' ? 'ЁЯЯб' : 'ЁЯЯв';
      
      response += `${index + 1}. ${status} ${priority} *${task.title}*\n`;
      response += `   ЁЯУЕ ${new Date(task.createdAt).toLocaleDateString()}\n`;
      if (task.deadline) {
        response += `   тП░ Due: ${new Date(task.deadline).toLocaleDateString()}\n`;
      }
      response += `   ЁЯУВ ${task.category}\n\n`;
    });

    response += language === 'si' ? 
      '*р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕р╢з: "add task: [title]"*' :
      language === 'ta' ? 
      '*рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХ: "add task: [title]"*' :
      '*To add a task: "add task: [title]"*';

    return response;
  } catch (error) {
    logger.error('тЭМ Error in tasks command:', error);
    return 'Sorry, could not retrieve tasks.';
  }
}

async function handleAddTaskCommand(user, language) {
  try {
    const responses = {
      en: `ЁЯУЭ *Add New Task*

*Format:* "add task: [title] [optional: deadline]"

*Examples:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*I'll automatically:*
тАв Set appropriate reminders
тАв Track your progress
тАв Send alerts at the right time

Just type your task naturally!`,

      si: `ЁЯУЭ *р╢▒р╖А р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒*

*р╢Жр╢Ър╖Шр╢нр╖Тр╢║:* "add task: [title] [р╖Ар╖Тр╢Ър╢╜р╖Кр╢┤: deadline]"

*р╢Лр╢пр╖Пр╖Др╢╗р╢л:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*р╢╕р╢╕ р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║р╖А:*
тАв р╖Гр╖Фр╢пр╖Фр╖Гр╖Ф р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв р╢Фр╢╢р╖Ъ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢║р╖Ар╢▒р╖Кр╢▒р╢╕р╖К

р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ър╖А р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒!`,

      ta: `ЁЯУЭ *рокрпБродро┐роп рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН*

*ро╡роЯро┐ро╡роорпН:* "add task: [title] [ро╡ро┐ро░рпБрокрпНрок: deadline]"

*роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпН:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*роиро╛ройрпН родро╛ройро╛роХ:*
тАв рокрпКро░рпБродрпНродрооро╛рой роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЕроорпИрокрпНрокрпЗройрпН
тАв роЙроЩрпНроХро│рпН роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐рокрпНрокрпЗройрпН
тАв роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЕройрпБрокрпНрокрпБро╡рпЗройрпН

роЙроЩрпНроХро│рпН рокрогро┐ропрпИ роЗропро▒рпНроХрпИропро╛роХ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН!`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in add task command:', error);
    return 'Sorry, could not process task addition.';
  }
}

async function handleAlertsCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid);
    const alerts = await medicalAgentSystem.getPendingAlerts(user.uid);

    if (alerts.length === 0) {
      const responses = {
        en: 'тП░ *Your Alerts*\n\nNo pending alerts. All caught up! ЁЯОЙ',
        si: 'тП░ *р╢Фр╢╢р╖Ъ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К*\n\nр╢Ер╢┤р╖Ър╢Ър╖Кр╖Вр╖Тр╢н р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢▒р╖Рр╢н. р╖Гр╖Тр╢║р╢╜р╖Кр╢╜ р╢Ер╢╜р╖Фр╢нр╖К! ЁЯОЙ',
        ta: 'тП░ *роЙроЩрпНроХро│рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН*\n\nроиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ. роОро▓рпНро▓ро╛роорпН рокрпБродро┐ропродрпБ! ЁЯОЙ'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'тП░ *р╢Фр╢╢р╖Ъ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К*\n\n' :
                   language === 'ta' ? 'тП░ *роЙроЩрпНроХро│рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН*\n\n' :
                   'тП░ *Your Alerts*\n\n';

    alerts.forEach((alert, index) => {
      const priority = alert.priority === 'high' ? 'ЁЯФ┤' : alert.priority === 'medium' ? 'ЁЯЯб' : 'ЁЯЯв';
      
      response += `${index + 1}. ${priority} *${alert.title}*\n`;
      response += `   ЁЯУЭ ${alert.message}\n`;
      response += `   тП░ ${new Date(alert.scheduledTime).toLocaleString()}\n\n`;
    });

    return response;
  } catch (error) {
    logger.error('тЭМ Error in alerts command:', error);
    return 'Sorry, could not retrieve alerts.';
  }
}

async function handleProgressCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid);
    const progress = agent.studyProgress;
    const performance = agent.performance;

    const responses = {
      en: `ЁЯУК *Study Progress Report*

*Completion Rate:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*Efficiency:* ${Math.round(progress.efficiency * 100)}%
*Task Completion:* ${Math.round(performance.taskCompletionRate * 100)}%
*Study Consistency:* ${Math.round(performance.studyConsistency * 100)}%

*Last Study Session:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'Not recorded'}

*Recommendations:*
тАв Keep up the good work! ЁЯУЪ
тАв Try to maintain consistent study hours
тАв Review difficult topics regularly
тАв Practice with patient simulations

Use "add task" to set new study goals!`,

      si: `ЁЯУК *р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Т р╖Ар╖Пр╢╗р╖Кр╢нр╖Пр╖А*

*р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖П р╢Ер╢▒р╖Фр╢┤р╖Пр╢нр╢║:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*р╢Ър╖Пр╢╗р╖Кр╢║р╢Ър╖Кр╖Вр╢╕р╢нр╖Пр╖А:* ${Math.round(progress.efficiency * 100)}%
*р╢Ър╖Пр╢╗р╖Кр╢║ р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖Пр╖А:* ${Math.round(performance.taskCompletionRate * 100)}%
*р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ер╢▒р╖Фр╢Ър╖Цр╢╜р╢нр╖Пр╖А:* ${Math.round(performance.studyConsistency * 100)}%

*р╢Ер╖Ар╖Гр╢▒р╖К р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╖Гр╖Рр╖Гр╖Тр╢║:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'Record р╢Ър╢╗ р╢▒р╖Рр╢н'}

*р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б:*
тАв р╖Др╖Ьр╢│ р╖Ар╖Рр╢й р╢пр╖Тр╢Ьр╢зр╢╕ р╢Ър╢╗р╢Ьр╖Щр╢▒ р╢║р╢▒р╖Кр╢▒! ЁЯУЪ
тАв р╢Ер╢▒р╖Фр╢Ър╖Цр╢╜ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖Рр╢║ р╢┤р╖Ар╢нр╖Кр╖Ар╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢пр╖Фр╖Вр╖Кр╢Ър╢╗ р╢╕р╖Пр╢нр╖Шр╢Ър╖П р╢▒р╖Тр╢нр╖Тр╢┤р╢нр╖П р╖Гр╢╕р╖Пр╢╜р╖Эр╢ар╢▒р╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒ р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╢▒р╖Кр╢▒

р╢▒р╖А р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Йр╢╜р╢Ър╖Кр╢Ъ р╖Гр╢Ър╖Гр╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з "add task" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒!`,

      ta: `ЁЯУК *рокроЯро┐рокрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒ роЕро▒ро┐роХрпНроХрпИ*

*роорпБроЯро┐ро╡рпБ ро╡ро┐роХро┐родроорпН:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*родро┐ро▒ройрпН:* ${Math.round(progress.efficiency * 100)}%
*рокрогро┐ роорпБроЯро┐ро╡рпБ:* ${Math.round(performance.taskCompletionRate * 100)}%
*рокроЯро┐рокрпНрокрпБ роиро┐ро▓рпИрокрпНрокро╛роЯрпБ:* ${Math.round(performance.studyConsistency * 100)}%

*роХроЯрпИроЪро┐ рокроЯро┐рокрпНрокрпБ роЕрооро░рпНро╡рпБ:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ'}

*рокро░ро┐роирпНродрпБро░рпИроХро│рпН:*
тАв роиро▓рпНро▓ ро╡рпЗро▓рпИропрпИродрпН родрпКроЯро░рпНроирпНродрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН! ЁЯУЪ
тАв роиро┐ро▓рпИропро╛рой рокроЯро┐рокрпНрокрпБ роорогро┐роирпЗро░роЩрпНроХро│рпИ рокро░ро╛рооро░ро┐роХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН
тАв роХроЯро┐ройрооро╛рой родро▓рпИрокрпНрокрпБроХро│рпИ родро╡ро▒ро╛рооро▓рпН роородро┐рокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН
тАв роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпНроХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡рпБроорпН

рокрпБродро┐роп рокроЯро┐рокрпНрокрпБ роЗро▓роХрпНроХрпБроХро│рпИ роЕроорпИроХрпНроХ "add task" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН!`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in progress command:', error);
    return 'Sorry, could not retrieve progress.';
  }
}

// Natural Language Handlers

async function handleNaturalLanguageTaskCreation(message, user, language) {
  try {
    // Extract task details from natural language
    const taskMatch = message.match(/add task:\s*(.+)/i) || 
                     message.match(/set task:\s*(.+)/i) || 
                     message.match(/create task:\s*(.+)/i);
    
    if (!taskMatch) {
      const responses = {
        en: 'ЁЯУЭ *Task Creation*\n\nPlease specify your task:\n"add task: [what you want to do]"',
        si: 'ЁЯУЭ *р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╖Ср╢пр╖Ур╢╕*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"add task: [р╢Фр╢╢р╢з р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢пр╖Ъ]"',
        ta: 'ЁЯУЭ *рокрогро┐ роЙро░рпБро╡ро╛роХрпНроХроорпН*\n\nроЙроЩрпНроХро│рпН рокрогро┐ропрпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"add task: [роирпАроЩрпНроХро│рпН роЪрпЖропрпНроп ро╡ро┐ро░рпБроорпНрокрпБро╡родрпБ]"'
      };
      return responses[language] || responses.en;
    }

    const taskTitle = taskMatch[1].trim();
    
    // Add task with automatic alerts
    await medicalAgentSystem.addTaskWithAlerts(user.uid, {
      title: taskTitle,
      description: `Task created via WhatsApp: ${taskTitle}`,
      category: 'study',
      priority: 'medium',
      scheduledTime: new Date(),
      deadline: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now
    });

    const responses = {
      en: `тЬЕ *Task Added Successfully!*

*Task:* ${taskTitle}
*Status:* Active
*Alerts:* Scheduled automatically

I'll remind you at the right time! тП░

*Next steps:*
тАв Use "tasks" to view all tasks
тАв Use "alerts" to check reminders
тАв Use "progress" to track your study`,

      si: `тЬЕ *р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╖А р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒ р╢╜р╢пр╖У!*

*р╢Ър╖Пр╢╗р╖Кр╢║р╢║:* ${taskTitle}
*р╢нр╢нр╖Кр╖Ар╢║:* р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У
*р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К:* р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║р╖А р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У

р╢╕р╢╕ р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! тП░

*р╢Кр╖Ер╢Я р╢┤р╖Тр╢║р╖Ар╢╗:*
тАв р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢╢р╖Рр╢╜р╖Ур╢╕р╢з "tasks" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╖Тр╢╗р╖Ур╢╕р╢з "alerts" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒р╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з "progress" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒`,

      ta: `тЬЕ *рокрогро┐ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!*

*рокрогро┐:* ${taskTitle}
*роиро┐ро▓рпИ:* роЪрпЖропро▓ро┐ро▓рпН
*роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:* родро╛ройро╛роХ родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯродрпБ

роиро╛ройрпН роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН! тП░

*роЕроЯрпБродрпНрод рокроЯро┐роХро│рпН:*
тАв роЕройрпИродрпНродрпБ рокрогро┐роХро│рпИропрпБроорпН роХро╛рог "tasks" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
тАв роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХ "alerts" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
тАв роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпИ роХрогрпНроХро╛рогро┐роХрпНроХ "progress" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in natural language task creation:', error);
    return 'Sorry, could not create task. Please try again.';
  }
}

async function handleNaturalLanguageReminder(message, user, language) {
  try {
    // Extract reminder details from natural language
    const reminderMatch = message.match(/remind me\s+(.+)/i) || 
                         message.match(/set reminder\s+(.+)/i) || 
                         message.match(/alert me\s+(.+)/i);
    
    if (!reminderMatch) {
      const responses = {
        en: 'тП░ *Reminder Setup*\n\nPlease specify your reminder:\n"remind me to [what you want to be reminded about]"',
        si: 'тП░ *р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╖Рр╢Ър╖Гр╖Фр╢╕*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"remind me to [р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢пр╖Ъ]"',
        ta: 'тП░ *роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЕроорпИрокрпНрокрпБ*\n\nроЙроЩрпНроХро│рпН роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"remind me to [роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯ ро╡ро┐ро░рпБроорпНрокрпБро╡родрпБ]"'
      };
      return responses[language] || responses.en;
    }

    const reminderText = reminderMatch[1].trim();
    
    // Add reminder as a task
    await medicalAgentSystem.addTaskWithAlerts(user.uid, {
      title: `Reminder: ${reminderText}`,
      description: `Reminder set via WhatsApp: ${reminderText}`,
      category: 'reminder',
      priority: 'high',
      scheduledTime: new Date(),
      deadline: new Date(Date.now() + 2 * 60 * 60 * 1000) // 2 hours from now
    });

    const responses = {
      en: `тП░ *Reminder Set Successfully!*

*Reminder:* ${reminderText}
*Status:* Active
*Alerts:* Scheduled

I'll remind you at the right time! ЁЯФФ`,

      si: `тП░ *р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╖А р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У!*

*р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К:* ${reminderText}
*р╢нр╢нр╖Кр╖Ар╢║:* р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У
*р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К:* р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У

р╢╕р╢╕ р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! ЁЯФФ`,

      ta: `тП░ *роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ!*

*роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН:* ${reminderText}
*роиро┐ро▓рпИ:* роЪрпЖропро▓ро┐ро▓рпН
*роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:* родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯродрпБ

роиро╛ройрпН роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН! ЁЯФФ`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in natural language reminder:', error);
    return 'Sorry, could not set reminder. Please try again.';
  }
}

async function handleNaturalLanguageDrugInteraction(message, user, language) {
  try {
    // Extract drug names from natural language
    const interactionMatch = message.match(/check.*interaction.*between\s+(.+)/i) || 
                            message.match(/drug.*interaction.*between\s+(.+)/i) || 
                            message.match(/medication.*interaction.*between\s+(.+)/i);
    
    if (!interactionMatch) {
      const responses = {
        en: 'ЁЯТК *Drug Interaction Check*\n\nPlease specify drugs:\n"check interaction between [drug1] and [drug2]"',
        si: 'ЁЯТК *р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖Пр╖А*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Цр╖Вр╢░ р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"check interaction between [drug1] and [drug2]"',
        ta: 'ЁЯТК *рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБ роЪрпЛродройрпИ*\n\nрооро░рпБроирпНродрпБроХро│рпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"check interaction between [drug1] and [drug2]"'
      };
      return responses[language] || responses.en;
    }

    const drugsText = interactionMatch[1];
    const drugs = drugsText.split(/\s+and\s+|\s*,\s*/i).map(d => d.trim());
    
    if (drugs.length < 2) {
      return 'Please specify at least two drugs to check interactions.';
    }

    // Use advanced features to check interactions
    const interaction = advancedFeatures.checkDrugInteractions(drugs);
    
    let response = language === 'si' ? 'ЁЯТК *р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖Пр╖А*\n\n' :
                   language === 'ta' ? 'ЁЯТК *рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБ роЪрпЛродройрпИ*\n\n' :
                   'ЁЯТК *Drug Interaction Check*\n\n';

    response += `*Drugs:* ${drugs.join(' + ')}\n`;
    response += `*Severity:* ${interaction.severity}\n`;
    response += `*Mechanism:* ${interaction.mechanism}\n`;
    response += `*Recommendation:* ${interaction.recommendation}\n`;

    return response;
  } catch (error) {
    logger.error('тЭМ Error in natural language drug interaction:', error);
    return 'Sorry, could not check drug interactions. Please try again.';
  }
}

async function handleNaturalLanguageCalculator(message, user, language) {
  try {
    // Extract calculator parameters from natural language
    const calcMatch = message.match(/calculate\s+(bmi|gfr|chads2)\s+(.+)/i);
    
    if (!calcMatch) {
      const responses = {
        en: 'ЁЯзо *Medical Calculator*\n\nPlease specify calculation:\n"calculate BMI weight 70kg height 1.75m"',
        si: 'ЁЯзо *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Ьр╢лр╢▒р╢║ р╢Ър╖Тр╢╗р╖Ур╢╕ р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"calculate BMI weight 70kg height 1.75m"',
        ta: 'ЁЯзо *рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпН*\n\nроХрогроХрпНроХрпАроЯрпНроЯрпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"calculate BMI weight 70kg height 1.75m"'
      };
      return responses[language] || responses.en;
    }

    const calculatorType = calcMatch[1].toLowerCase();
    const params = calcMatch[2].trim();
    
    let result;
    
    if (calculatorType === 'bmi') {
      const bmiMatch = params.match(/weight\s+(\d+(?:\.\d+)?)\s*kg.*height\s+(\d+(?:\.\d+)?)\s*m/i);
      if (bmiMatch) {
        const weight = parseFloat(bmiMatch[1]);
        const height = parseFloat(bmiMatch[2]);
        result = advancedFeatures.medicalCalculators.bmi(weight, height);
      }
    }
    
    if (!result) {
      return 'Please provide valid parameters for the calculation.';
    }

    let response = language === 'si' ? 'ЁЯзо *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢▒р╢║ р╢Ър╖Тр╢╗р╖Ур╢╕*\n\n' :
                   language === 'ta' ? 'ЁЯзо *рооро░рпБродрпНродрпБро╡ роХрогроХрпНроХрпАроЯрпБ*\n\n' :
                   'ЁЯзо *Medical Calculation*\n\n';

    response += `*Type:* ${calculatorType.toUpperCase()}\n`;
    response += `*Result:* ${result.result}\n`;
    if (result.interpretation) {
      response += `*Interpretation:* ${result.interpretation}\n`;
    }

    return response;
  } catch (error) {
    logger.error('тЭМ Error in natural language calculator:', error);
    return 'Sorry, could not perform calculation. Please try again.';
  }
}

module.exports = {
  initializeWhatsAppBot,
  processWhatsAppMessage
}; 