const TelegramBot = require('node-telegram-bot-api');
const { logger, medicalLogger } = require('../utils/logger');
const ai = require('../services/ai');
const { saveConversation, saveCase, getUser, createUser, updateUser, logAnalytics, getDb } = require('../config/firebase');
const { encryptData, decryptData } = require('../utils/encryption');
const advancedFeatures = require('../services/advanced-features');
const simulationManager = require('../services/simulation-manager');
const medicalAgentSystem = require('../services/medical-agent-system');
const notebookService = require('../services/notebook-service');

let bot;
let webhookSecret;

// Initialize Telegram bot
function initializeTelegramBot() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN not found in environment variables');
    }

    // Medical agent system is already initialized as a singleton

    // For webhook mode (production)
    if (process.env.NODE_ENV === 'production') {
      bot = new TelegramBot(token, { webHook: { port: 8443 } });
      bot.setWebHook(`${process.env.BASE_URL}/webhook/telegram/${token}`);
    } else {
      // For polling mode (development) with better error handling
      bot = new TelegramBot(token, { 
        polling: true,
        request: {
          timeout: 30000, // 30 second timeout
          connect_timeout: 30000,
          retry: 3 // Retry failed requests
        }
      });
      
      // Add error handling for polling
      bot.on('polling_error', (error) => {
        logger.error('тЭМ Telegram polling error:', error);
        
        // Don't crash the server, just log the error
        if (error.code === 'EFATAL') {
          logger.warn('тЪая╕П Network connectivity issue with Telegram API. Bot will retry automatically.');
        }
      });
      
      // Add connection success handler
      bot.on('polling_start', () => {
        logger.info('тЬЕ Telegram bot polling started successfully');
      });
    }

    webhookSecret = process.env.TELEGRAM_WEBHOOK_SECRET;
    
    // Set up message handlers
    setupMessageHandlers();
    
    // Make bot globally available for alert processor
    global.bot = bot;
    
    logger.info('тЬЕ Telegram bot initialized successfully with AI Agent System');
  } catch (error) {
    logger.error('тЭМ Error initializing Telegram bot:', error);
    // Don't throw error, let the server continue without Telegram
    logger.warn('тЪая╕П Telegram bot initialization failed, but server will continue running');
  }
}

// Enhanced welcome messages with AI Agent capabilities
const WELCOME_MESSAGES = {
  en: `ЁЯПе *Welcome to StethoLink AI - Professional Medical Assistant*

I'm Dr. StethoLink, your intelligent AI medical assistant for Sri Lankan medical students.

**Before we begin, I need to know your name for personalized assistance.**

*Please provide your full name (e.g., "My name is John Smith" or "I'm Dr. Sarah Perera")*

*I'll address you as Dr. [Your Name] throughout our interactions for a professional experience.*

---

**ЁЯФм What I can do for you:**

**ЁЯУЪ Study Management:**
тАв "Study cardiology at 5:30 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "Remind me to practice drug calculations"

**ЁЯзо Medical Tools:**
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Find information about paracetamol"

**ЁЯОн Clinical Practice:**
тАв "Start patient simulation"
тАв "Show me emergency protocols"
тАв "Practice cardiology cases"

**ЁЯУК Progress Tracking:**
тАв "Show my study progress"
тАв "What tasks do I have today?"
тАв "Check my alerts"

**ЁЯУЦ Quick Access:**
тАв /guide - View comprehensive user guide
тАв /help - See all available commands
тАв /agent - Initialize your personal AI agent

*Type naturally - I understand medical terminology and provide professional assistance.*
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*Languages:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

Start by saying "initialize my agent" or use any command!`,

  si: `ЁЯПе *StethoLink AI Agent р╖Ар╖Щр╢н р╖Гр╖Пр╢пр╢╗р╢║р╖Щр╢▒р╖К р╢┤р╖Тр╖Ер╖Тр╢Ьр╢▒р╖Тр╢╕р╖Ф!*

р╢╕р╢╕ Dr. StethoLink, р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Бр╖Тр╖Вр╖КтАНр╢║р╢║р╖Тр╢▒р╖К р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢╢р╖Фр╢пр╖Кр╢░р╖Тр╢╕р╢нр╖К AI р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Гр╖Др╖Пр╢║р╢Ър╢║р╖П.

ЁЯдЦ *р╢╕р╢╕ р╢Фр╢╢р╖Ъ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ AI Agent - р╢╕р╢з р╖Др╖Рр╢Ър╖Т р╢пр╖Ъ:*
тАв ЁЯУЭ **р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕** - "add task: study cardiology" р╖Др╖Э "remind me to review ECG" р╢Ър╖Тр╢║р╢▒р╖Кр╢▒
тАв тП░ **р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К** - р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢╕р╢╕ р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв ЁЯУК **р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║** - р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Пр╢╗р╖Кр╢║р╢Ър╖Кр╖Вр╢╕р╢нр╖Пр╖А р╖Гр╖Д р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖Пр╖А р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║
тАв ЁЯЪи **р╖Др╢пр╖Тр╖Гр╖Т р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗** - р╢нр╖Ур╢╗р╢лр╖Пр╢нр╖Кр╢╕р╢Ъ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢нр╢нр╖Кр╖Ар╢║р╢▒р╖К р╖Др╖Гр╖Фр╢╗р╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕
тАв ЁЯУЪ **р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╖Гр╖Рр╢╜р╖Гр╖Фр╢╕р╖К** - р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Ур╢Ър╢╗р╢лр╢║ р╢Ър╢╗р╢▒ р╢╜р╢п р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Пр╢╜р╖Гр╢зр╖Др╢▒р╖К р╖Гр╖Ср╢пр╖Ур╢╕
тАв ЁЯТК **р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А** - р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╢Цр╖Вр╢░ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф
тАв ЁЯзо **р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗** - BMI, GFR, CHADS2, р╖Гр╖Д р╢нр╖Ар╢нр╖К
тАв ЁЯУЛ **р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б** - р╖Гр╖Пр╢Ър╖Кр╖Вр╖Т р╢╕р╢н р╢┤р╢пр╢▒р╢╕р╖К р╖Ар╖Ц р╢┤р╖КтАНр╢╗р╖Ьр╢зр╖Ьр╢Ър╖Эр╢╜
тАв ЁЯФН **р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П** - р╢Цр╖Вр╢░ р╢Жр╢╗р╢Ър╖Кр╖Вр╖Пр╖А р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╖Тр╢╗р╖Ур╢╕
тАв ЁЯОн **р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║** - р╢Ер╢нр╢ор╖КтАНр╢║ р╢╗р╖Эр╢Ьр╖Ур╢▒р╖К р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╖Ур╢╕

*р╢Ър╖Кр╖Вр╢лр╖Тр╢Ъ р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв /agent - р╢Фр╢╢р╖Ъ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ AI agent р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /tasks - р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢╢р╢╜р╢▒р╖Кр╢▒ р╖Гр╖Д р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /addtask - р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╖Гр╢╕р╢Я р╢▒р╖А р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /alerts - р╢Фр╢╢р╖Ъ р╢Ер╢┤р╖Ър╢Ър╖Кр╖Вр╖Тр╢н р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /progress - р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢╢р╢╜р╢▒р╖Кр╢▒
тАв /calculator - р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗
тАв /drugs - р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А
тАв /simulate - р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║
тАв /help - р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒

*р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ъ р╢╖р╖Пр╖Вр╖Пр╖А:*
р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ър╖А р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒! р╢Лр╢пр╖Пр╖Др╢╗р╢л:
тАв "Add task: study dengue fever guidelines"
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*р╢╖р╖Пр╖Вр╖П:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

"initialize my agent" р╢Ър╖Тр╢║р╖П р╖Др╖Э р╢Хр╢▒р╖Ср╢╕ р╖Ар╖Тр╢░р╖Пр╢▒р╢║р╢Ър╖К р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢╕р╖Тр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!`,

  ta: `ЁЯПе *StethoLink AI Agent роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!*

роиро╛ройрпН Dr. StethoLink, роЗро▓роЩрпНроХрпИ рооро░рпБродрпНродрпБро╡ рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХро╛рой роЙроЩрпНроХро│рпН рокрпБродрпНродро┐роЪро╛ро▓ро┐ AI рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ропро╛ро│ро░рпН.

ЁЯдЦ *роиро╛ройрпН роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ AI Agent - роОройрпНройро╛ро▓рпН роорпБроЯро┐ропрпБроорпН:*
тАв ЁЯУЭ **рокрогро┐роХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН** - "add task: study cardiology" роЕро▓рпНро▓родрпБ "remind me to review ECG" роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН
тАв тП░ **роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН** - роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН
тАв ЁЯУК **роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН** - роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпБ родро┐ро▒ройрпН рооро▒рпНро▒рпБроорпН роорпБроЯро┐ро╡рпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
тАв ЁЯЪи **роЕро╡роЪро░ рокродро┐ро▓рпН** - роорпБроХрпНроХро┐ропрооро╛рой рооро░рпБродрпНродрпБро╡ роЪрпВро┤рпНроиро┐ро▓рпИроХро│рпИ роХрпИропро╛ро│ро╡рпБроорпН
тАв ЁЯУЪ **рокроЯро┐рокрпНрокрпБ родро┐роЯрпНроЯрооро┐роЯро▓рпН** - родройро┐рокрпНрокроЯрпНроЯ рокроЯро┐рокрпНрокрпБ роЕроЯрпНроЯро╡рогрпИроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН
тАв ЁЯТК **рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН** - роЗро▓роЩрпНроХрпИ рооро░рпБроирпНродрпБ родроХро╡ро▓рпН
тАв ЁЯзо **рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН** - BMI, GFR, CHADS2, роорпЗро▓рпБроорпН
тАв ЁЯУЛ **рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН** - роЪро╛ройрпНро▒рпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роирпЖро▒ро┐роорпБро▒рпИроХро│рпН
тАв ЁЯФН **рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпН** - рооро░рпБроирпНродрпБ рокро╛родрпБроХро╛рокрпНрокрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
тАв ЁЯОн **роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН** - роорпЖропрпНроиро┐роХро░рпН роирпЛропро╛ро│ро┐роХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡рпБроорпН

*ро╡ро┐ро░рпИро╡рпБ роХроЯрпНроЯро│рпИроХро│рпН:*
тАв /agent - роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ AI agent роРродрпН родрпКроЯроЩрпНроХро╡рпБроорпН
тАв /tasks - роЙроЩрпНроХро│рпН рокрогро┐роХро│рпИроХрпН роХро╛рогрпНроХ рооро▒рпНро▒рпБроорпН роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН
тАв /addtask - родро╛ройро┐ропроЩрпНроХро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпБроЯройрпН рокрпБродро┐роп рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
тАв /alerts - роЙроЩрпНроХро│рпН роиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
тАв /progress - роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИроХрпН роХро╛рогрпНроХ
тАв /calculator - рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН
тАв /drugs - рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН
тАв /simulate - роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН
тАв /help - роЕройрпИродрпНродрпБ роЕроорпНроЪроЩрпНроХро│рпИропрпБроорпН роХро╛роЯрпНроЯрпБ

*роЗропро▒рпНроХрпИ роорпКро┤ро┐:*
роЗропро▒рпНроХрпИропро╛роХ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН! роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпН:
тАв "Add task: study dengue fever guidelines"
тАв "Set reminder for cardiology exam in 2 days"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Calculate BMI for weight 70kg height 1.75m"

*роорпКро┤ро┐роХро│рпН:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

"initialize my agent" роОройрпНро▒рпБ роЪрпКро▓рпНро▓ро┐ роЕро▓рпНро▓родрпБ роОроирпНрод роХроЯрпНроЯро│рпИропрпИропрпБроорпН рокропройрпНрокроЯрпБродрпНродро┐ родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН!`
};

// Help messages
const HELP_MESSAGES = {
  en: `ЁЯПе *StethoLink AI Help*

*Basic Commands:*
тАв Just type your symptoms for diagnosis
тАв Send voice message for voice-to-text
тАв /start - Restart the bot
тАв /help - Show this help

*Advanced Features:*
тАв /simulate - Practice with virtual patients
тАв /history - View your saved cases
тАв /mentor - Get study tips and motivation
тАв /vault - Download your clinical portfolio
тАв /remindme - Set daily practice reminders

*Voice Commands:*
тАв Send voice message in Sinhala, Tamil, or English
тАв Bot will transcribe and analyze symptoms

Need more help? Contact support.`,

  si: `ЁЯПе *StethoLink AI р╢Лр╢пр╖Ар╖К*

*р╢╕р╖Цр╢╜р╖Тр╢Ъ р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв р╢╗р╖Эр╢Ь р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╖Др╢м-р╢зр╖Ф-р╢зр╖Щр╢Ър╖Кр╖Гр╖Кр╢зр╖К р╖Гр╢│р╖Др╖П р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║р╢Ър╖К р╢║р╖Ар╢▒р╖Кр╢▒
тАв /start - р╢╢р╖Ьр╢зр╖К р╢▒р╖Рр╖Ар╢н р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /help - р╢╕р╖Щр╢╕ р╢Лр╢пр╖Ар╖К р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒

*р╢Лр╖Гр╖Гр╖К р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв /simulate - р╢Ер╢нр╢ор╖КтАНр╢║ р╢╗р╖Эр╢Ьр╖Ур╢▒р╖К р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╢▒р╖Кр╢▒
тАв /history - р╢Фр╢╢р╖Ъ р╖Гр╖Фр╢╗р╖Рр╢Ър╖Т р╢╗р╖Эр╢Ь р╢╢р╢╜р╢▒р╖Кр╢▒
тАв /mentor - р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Лр╢┤р╢пр╖Щр╖Гр╖К р╖Гр╖Д р╢░р╖Ыр╢╗р╖КтАНр╢║ р╢╜р╢╢р╖П р╢Ьр╢▒р╖Кр╢▒
тАв /vault - р╢Фр╢╢р╖Ъ р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢┤р╖Эр╢зр╖Кр╖Жр╖Эр╢╜р╖Тр╢║р╖Э р╢╢р╖Пр╢Ьр╢▒р╖Кр╢▒
тАв /remindme - р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒р╖Кр╢▒

*р╖Др╢м р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв р╖Гр╖Тр╢Вр╖Др╢╜, р╢пр╖Щр╢╕р╖Е, р╖Др╖Э р╢Йр╢Вр╢Ьр╖КтАНр╢╗р╖Ур╖Гр╖Тр╢║р╖Щр╢▒р╖К р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║р╢Ър╖К р╢║р╖Ар╢▒р╖Кр╢▒
тАв р╢╢р╖Ьр╢зр╖К р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢┤р╢╗р╖Тр╖Ар╢╗р╖Кр╢нр╢▒р╢║ р╢Ър╢╗ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║ р╢Ър╢╗р╢║р╖Т

р╢нр╖Ар╢нр╖К р╢Лр╢пр╖Ар╖К р╢Ер╖Ар╖Бр╖КтАНр╢║р╢п? р╖Гр╖Др╖Пр╢║ р╢Ер╢╕р╢нр╢▒р╖Кр╢▒.`,

  ta: `ЁЯПе *StethoLink AI роЙродро╡ро┐*

*роЕроЯро┐рокрпНрокроЯрпИ роХроЯрпНроЯро│рпИроХро│рпН:*
тАв роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН
тАв роХрпБро░ро▓рпН-роХрпНроХрпБ-роЙро░рпИроХрпНроХрпБ роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН
тАв /start - рокро╛роЯрпН роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН
тАв /help - роЗроирпНрод роЙродро╡ро┐ропрпИроХрпН роХро╛роЯрпНроЯрпБ

*роорпЗроорпНрокроЯрпНроЯ роЕроорпНроЪроЩрпНроХро│рпН:*
тАв /simulate - роорпЖропрпНроиро┐роХро░рпН роирпЛропро╛ро│ро┐роХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒рпБроЩрпНроХро│рпН
тАв /history - роЙроЩрпНроХро│рпН роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┤роХрпНроХрпБроХро│рпИроХрпН роХро╛рогрпНроХ
тАв /mentor - рокроЯро┐рокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роКроХрпНроХродрпНродрпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН
тАв /vault - роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛро╡рпИрокрпН рокродро┐ро╡ро┐ро▒роХрпНроХрпБроЩрпНроХро│рпН
тАв /remindme - родро┐ройроЪро░ро┐ рокропро┐ро▒рпНроЪро┐ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН

*роХрпБро░ро▓рпН роХроЯрпНроЯро│рпИроХро│рпН:*
тАв роЪро┐роЩрпНроХро│роорпН, родрооро┐ро┤рпН роЕро▓рпНро▓родрпБ роЖроЩрпНроХро┐ро▓родрпНродро┐ро▓рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН
тАв рокро╛роЯрпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роорпКро┤ро┐рокрпЖропро░рпНродрпНродрпБ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрпБроорпН

роорпЗро▓рпБроорпН роЙродро╡ро┐ родрпЗро╡рпИропро╛? роЖродро░ро╡рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН.`
};

// Set up message handlers
function setupMessageHandlers() {
  // Handle /start command
  bot.onText(/\/start/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      logger.info('ЁЯУ▓ Telegram /start command received', { chatId, userId });
      
      // Get or create user
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      // Update user activity
      await updateUser(user.uid, {
        'stats.lastActive': new Date(),
        platform: 'telegram'
      });

      const welcomeMessage = WELCOME_MESSAGES[user.language] || WELCOME_MESSAGES.en;
      await sendTelegramMessage(chatId, welcomeMessage);

      // Log analytics
      await logAnalytics({
        event: 'telegram_start_command',
        userId: user.uid,
        platform: 'telegram',
        language: user.language || 'en'
      });

    } catch (error) {
      logger.error('тЭМ Error handling /start command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, something went wrong. Please try again.');
    }
  });

  // Handle /help command
  bot.onText(/\/help/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      const user = await getUserByTelegramId(userId);
      const helpMessage = HELP_MESSAGES[user?.language] || HELP_MESSAGES.en;
      
      await sendTelegramMessage(chatId, helpMessage);
    } catch (error) {
      logger.error('тЭМ Error handling /help command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not load help. Please try again.');
    }
  });

  // Handle /simulate command
  bot.onText(/\/simulate/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      // Get or create user automatically
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleSimulationCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /simulate command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, simulation is currently unavailable.');
    }
  });

  // Handle /endsim command
  bot.onText(/\/endsim/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      // Get or create user automatically
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleEndSimulationCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /endsim command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not end simulation.');
    }
  });

  // Handle /diagnosis command
  bot.onText(/\/diagnosis/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      // Get or create user automatically
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleDiagnosisSubmissionCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /diagnosis command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not process diagnosis submission.');
    }
  });

  // Handle /history command
  bot.onText(/\/history/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      // Get or create user automatically
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleHistoryCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /history command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not retrieve case history.');
    }
  });

  // Handle /mentor command
  bot.onText(/\/mentor/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      const user = await getUserByTelegramId(userId);
      if (!user) {
        await sendTelegramMessage(chatId, 'Please start the bot first with /start');
        return;
      }

      const response = await handleMentorCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /mentor command:', error);
      await sendTelegramMessage(msg.chat.id, 'Keep studying hard, future doctor! ЁЯТк');
    }
  });

  // Handle /vault command
  bot.onText(/\/vault/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      const user = await getUserByTelegramId(userId);
      if (!user) {
        await sendTelegramMessage(chatId, 'Please start the bot first with /start');
        return;
      }

      const response = await handleVaultCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /vault command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, vault feature is currently unavailable.');
    }
  });

  // Handle /remindme command
  bot.onText(/\/remindme/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      const user = await getUserByTelegramId(userId);
      if (!user) {
        await sendTelegramMessage(chatId, 'Please start the bot first with /start');
        return;
      }

      const response = await handleReminderCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /remindme command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, reminder feature is currently unavailable.');
    }
  });

  // AI Agent Commands
  bot.onText(/\/agent/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleAgentCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /agent command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, agent initialization failed.');
    }
  });

  bot.onText(/\/tasks/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleTasksCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /tasks command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not retrieve tasks.');
    }
  });

  bot.onText(/\/addtask/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleAddTaskCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /addtask command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not add task.');
    }
  });

  bot.onText(/\/alerts/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleAlertsCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /alerts command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not retrieve alerts.');
    }
  });

  bot.onText(/\/progress/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleProgressCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /progress command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, could not retrieve progress.');
    }
  });

  // Handle text messages
  bot.on('message', async (msg) => {
    try {
      // Skip commands
      if (msg.text && msg.text.startsWith('/')) {
        return;
      }

      const chatId = msg.chat.id;
      const userId = msg.from.id;
      const messageText = msg.text;
      
      logger.info('ЁЯУ▓ Processing Telegram message', {
        chatId,
        userId,
        messageType: msg.voice ? 'voice' : 'text'
      });

      // Get or create user
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      // Update user activity
      await updateUser(user.uid, {
        'stats.lastActive': new Date(),
        platform: 'telegram'
      });

      let response;

      // Handle voice messages
      if (msg.voice) {
        response = await handleVoiceMessage(msg.voice, user, msg.message_id);
      } else if (messageText) {
        // Handle text messages
        response = await handleTextMessage(messageText, user, msg.message_id);
      }

      if (response) {
        await sendTelegramMessage(chatId, response);
      }

      // Log analytics
      await logAnalytics({
        event: 'telegram_message_processed',
        userId: user.uid,
        platform: 'telegram',
        messageType: msg.voice ? 'voice' : 'text',
        language: user.language || 'en'
      });

    } catch (error) {
      logger.error('тЭМ Error processing Telegram message:', error);
      medicalLogger.medicalError(error, {
        platform: 'telegram',
        operation: 'message_processing'
      });
      
      try {
        const errorMessage = {
          en: 'Sorry, I encountered an error. Please try again.',
          si: 'р╖Гр╢╕р╖Пр╖Ар╢▒р╖Кр╢▒, р╢╕р╢з р╢пр╖Эр╖Вр╢║р╢Ър╖К р╢Зр╢нр╖Т р╖Ар╖Тр╢║. р╢▒р╖Рр╖Ар╢н р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒.',
          ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН рокро┐ро┤рпИропрпИ роОродро┐ро░рпНроХрпКрогрпНроЯрпЗройрпН. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
        };
        
        await sendTelegramMessage(msg.chat.id, 
          errorMessage[msg.from.language_code] || errorMessage.en);
      } catch (sendError) {
        logger.error('тЭМ Error sending error message:', sendError);
      }
    }
  });

  // Handle errors
  bot.on('error', (error) => {
    logger.error('тЭМ Telegram bot error:', error);
  });

  // Handle polling errors
  bot.on('polling_error', (error) => {
    logger.error('тЭМ Telegram polling error:', error);
  });

  // Advanced Features Commands
  bot.onText(/\/calculator/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleCalculatorCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /calculator command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, calculator is currently unavailable.');
    }
  });

  bot.onText(/\/drugs/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleDrugsCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /drugs command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, drug database is currently unavailable.');
    }
  });

  bot.onText(/\/guidelines/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleGuidelinesCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /guidelines command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, clinical guidelines are currently unavailable.');
    }
  });

  bot.onText(/\/interactions/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleInteractionsCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /interactions command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, drug interactions are currently unavailable.');
    }
  });

  bot.onText(/\/decision/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleDecisionCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /decision command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, clinical decision support is currently unavailable.');
    }
  });

  bot.onText(/\/education/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleEducationCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /education command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, patient education is currently unavailable.');
    }
  });

  bot.onText(/\/evidence/, async (msg) => {
    try {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      let user = await getUserByTelegramId(userId);
      if (!user) {
        user = await createTelegramUser(msg.from);
      }

      const response = await handleEvidenceCommand(user, user.language || 'en');
      await sendTelegramMessage(chatId, response);

    } catch (error) {
      logger.error('тЭМ Error handling /evidence command:', error);
      await sendTelegramMessage(msg.chat.id, 'Sorry, evidence-based medicine search is currently unavailable.');
    }
  });
}

// Handle text messages
async function handleTextMessage(message, user, messageId) {
  const command = message.trim().toLowerCase();
  const language = user.language || 'en';

  // Save conversation
  await saveConversation({
    userId: user.uid,
    platform: 'telegram',
    messageId: messageId,
    userMessage: message,
    timestamp: new Date()
  });

  // Check if user is in an active simulation
  const simulationStatus = simulationManager.getSimulationStatus(user.uid);
  if (simulationStatus) {
    // User is in simulation - treat message as question to patient
    const simulationResponse = simulationManager.handleQuestion(user.uid, message, language);
    
    if (simulationResponse.isSimulationActive) {
      return `ЁЯСд *Patient Response:*
${simulationResponse.response}

*Continue asking questions to gather more information about the patient's condition.*`;
    }
  }

  // Enhanced intelligent command detection with AI Agent capabilities
  const lowerMessage = message.toLowerCase().trim();
  
  // AI Agent Natural Language Commands - PRIORITY 1
  if (lowerMessage.includes('add task') || lowerMessage.includes('set task') || lowerMessage.includes('create task') || 
      lowerMessage.includes('study') && (lowerMessage.includes('at') || lowerMessage.includes('on') || lowerMessage.includes('by'))) {
    return await handleNaturalLanguageTaskCreation(message, user, language);
  }
  
  if (lowerMessage.includes('remind me') || lowerMessage.includes('set reminder') || lowerMessage.includes('alert me')) {
    return await handleNaturalLanguageReminder(message, user, language);
  }
  
  if (lowerMessage.includes('initialize') && lowerMessage.includes('agent')) {
    return await handleAgentCommand(user, language);
  }
  
  if (lowerMessage.includes('my tasks') || lowerMessage.includes('show tasks') || lowerMessage.includes('list tasks')) {
    return await handleTasksCommand(user, language);
  }
  
  if (lowerMessage.includes('my alerts') || lowerMessage.includes('show alerts') || lowerMessage.includes('check alerts')) {
    return await handleAlertsCommand(user, language);
  }
  
  if (lowerMessage.includes('my progress') || lowerMessage.includes('show progress') || lowerMessage.includes('study progress')) {
    return await handleProgressCommand(user, language);
  }
  
  // Notebook commands
  if (lowerMessage.includes('add note') || lowerMessage.includes('new note') || lowerMessage.includes('create note')) {
    return await handleAddNoteCommand(message, user, language);
  }
  
  if (lowerMessage.includes('my notes') || lowerMessage.includes('show notes') || lowerMessage.includes('list notes')) {
    return await handleNotesCommand(user, language);
  }
  
  if (lowerMessage.includes('search notes') || lowerMessage.includes('find note')) {
    return await handleSearchNotesCommand(message, user, language);
  }
  
  // Dashboard access
  if (lowerMessage.includes('dashboard') || lowerMessage.includes('web app') || lowerMessage.includes('open dashboard')) {
    return await handleDashboardCommand(user, language);
  }
  
  // User guide
  if (lowerMessage.includes('guide') || lowerMessage.includes('user guide') || lowerMessage.includes('help guide')) {
    return await handleUserGuideCommand(user, language);
  }
  
  // Name handling
  if (lowerMessage.includes('my name is') || lowerMessage.includes("i'm ") || lowerMessage.includes('i am ') || 
      lowerMessage.includes('call me') || lowerMessage.includes('this is ')) {
    return await handleNameCommand(message, user, language);
  }
  
  // Drug interaction queries
  if (lowerMessage.includes('drug interaction') || lowerMessage.includes('check interaction') || lowerMessage.includes('medication interaction')) {
    return await handleNaturalLanguageDrugInteraction(message, user, language);
  }
  
  // Calculator queries
  if (lowerMessage.includes('calculate') || lowerMessage.includes('bmi') || lowerMessage.includes('gfr') || lowerMessage.includes('chads2')) {
    return await handleNaturalLanguageCalculator(message, user, language);
  }
  
  // Drug categories and medications
  if (['antibiotics', 'analgesics', 'antihypertensives', 'antidiabetics', 'antimalarials', 'doxycycline', 'paracetamol', 'ibuprofen'].includes(lowerMessage)) {
    return await handleDrugCategoryRequest(lowerMessage, user, language);
  }
  
  // Calculator types
  if (['bmi', 'gfr', 'chads2', 'fev1', 'creatinine', 'pediatric', 'gcs', 'apache'].includes(lowerMessage)) {
    return await handleCalculatorTypeRequest(lowerMessage, user, language);
  }
  
  // Medical conditions for guidelines
  if (['dengue', 'leptospirosis', 'tb', 'malaria', 'diabetes', 'hypertension', 'gastroenteritis'].includes(lowerMessage)) {
    return await handleGuidelineRequest(lowerMessage, user, language);
  }
  
  // Common medical terms that should trigger specific responses
  if (['help', 'commands', 'menu', 'start'].includes(lowerMessage)) {
    return await handleHelpRequest(user, language);
  }
  
  // Specific symptom queries that should get detailed responses
  if (['loose motion', 'diarrhea', 'vomiting', 'fever', 'headache', 'cough'].includes(lowerMessage)) {
    return await handleDiagnosisRequest(message, user, language);
  }

  // Handle symptoms for diagnosis (longer messages)
  if (message.length > 10) {
    return await handleDiagnosisRequest(message, user, language);
  }

  // Handle note confirmation and interactive commands
  if (lowerMessage.startsWith('title:') || lowerMessage.startsWith('category:') || 
      lowerMessage.startsWith('tags:') || lowerMessage.startsWith('priority:')) {
    return await handleNoteConfirmation(message, user, language);
  }
  
  // Default response for unrecognized short messages
  const defaultResponses = {
    en: `ЁЯдЦ *I'm here to help with your medical studies!*

ЁЯТб *Try these examples:*

**ЁЯУЪ Study Tasks:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "Remind me to practice drug calculations"

**ЁЯзо Medical Tools:**
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Find information about paracetamol"

**ЁЯОн Clinical Practice:**
тАв "Start patient simulation"
тАв "Show me emergency protocols"
тАв "Practice cardiology cases"

**ЁЯУК Progress:**
тАв "Show my study progress"
тАв "What tasks do I have today?"
тАв "Check my alerts"

*Just type naturally - I understand medical terminology!* ЁЯЪА`,
    si: `ЁЯдЦ *р╢╕р╢╕ р╢Фр╢╢р╖Ъ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒р╢║р╢з р╢Лр╢пр╖Ар╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢╕р╖Щр╖Др╖Т р╖Гр╖Тр╢зр╖Тр╢╕р╖Т!*

ЁЯТб *р╢╕р╖Щр╢╕ р╢Лр╢пр╖Пр╖Др╢╗р╢л р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒:*

**ЁЯУЪ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "Remind me to practice drug calculations"

**ЁЯзо р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢╕р╖Щр╖Ар╢╜р╢╕р╖К:**
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Find information about paracetamol"

*р╖Гр╖Кр╖Ар╢╖р╖Пр╖Ар╖Тр╢Ър╖А р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒ - р╢╕р╢╕ р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢╖р╖Пр╖Вр╖Пр╖А р╢нр╖Ър╢╗р╖Фр╢╕р╖К р╢Ьр╢▒р╖Тр╢╕р╖Т!* ЁЯЪА`,
    ta: `ЁЯдЦ *роиро╛ройрпН роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ рокроЯро┐рокрпНрокрпБроХрпНроХрпБ роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН!*

ЁЯТб *роЗроирпНрод роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН:*

**ЁЯУЪ рокроЯро┐рокрпНрокрпБ рокрогро┐роХро│рпН:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "Remind me to practice drug calculations"

**ЁЯзо рооро░рпБродрпНродрпБро╡ роХро░рпБро╡ро┐роХро│рпН:**
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction between warfarin and aspirin"
тАв "Find information about paracetamol"

*роЗропро▒рпНроХрпИропро╛роХ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН - роиро╛ройрпН рооро░рпБродрпНродрпБро╡ роЪрпКро▒рпНроХро│рпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН!* ЁЯЪА`
  };

  return defaultResponses[language] || defaultResponses.en;
}

// Handle voice messages
async function handleVoiceMessage(voice, user, messageId) {
  try {
    logger.info('ЁЯОд Processing voice message from Telegram', { userId: user.uid });
    
    // Get voice file
    const file = await bot.getFile(voice.file_id);
    const audioBuffer = await downloadAudioFile(file.file_path);
    
    // Process with Whisper
    const transcription = await ai.processVoiceMessage(audioBuffer, user.language || 'en');
    
    // Save voice message
    await saveVoiceMessage({
      userId: user.uid,
      platform: 'telegram',
      messageId: messageId,
      fileId: voice.file_id,
      transcription: transcription.text,
      language: transcription.language,
      processingTime: transcription.processingTime
    });

    // Generate diagnosis from transcribed text
    const diagnosis = await ai.generateDiagnosis(
      transcription.text, 
      transcription.language, 
      user.uid
    );

    // Save case
    await saveCase({
      userId: user.uid,
      platform: 'telegram',
      symptoms: transcription.text,
      diagnosis: diagnosis.diagnosis,
      language: transcription.language,
      source: 'voice',
      processingTime: diagnosis.processingTime
    });

    const language = user.language || 'en';
    const responses = {
      en: `ЁЯОд *Voice Message Transcribed:*
"${transcription.text}"

ЁЯПе *Medical Analysis:*
${diagnosis.diagnosis}`,
      
      si: `ЁЯОд *р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║ р╢┤р╢╗р╖Тр╖Ар╢╗р╖Кр╢нр╢▒р╢║ р╢Ър╢╗р╢▒ р╢╜р╢пр╖У:*
"${transcription.text}"

ЁЯПе *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║:*
${diagnosis.diagnosis}`,
      
      ta: `ЁЯОд *роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ роорпКро┤ро┐рокрпЖропро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ:*
"${transcription.text}"

ЁЯПе *рооро░рпБродрпНродрпБро╡ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ:*
${diagnosis.diagnosis}`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling voice message:', error);
    
    const errorResponses = {
      en: 'Sorry, I could not process your voice message. Please try typing your symptoms instead.',
      si: 'р╖Гр╢╕р╖Пр╖Ар╢▒р╖Кр╢▒, р╢╕р╢з р╢Фр╢╢р╖Ъ р╖Др╢м р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║ р╖Гр╖Рр╢Ър╖Гр╖Ур╢╕р╢з р╢▒р╖Ьр╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢║. р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢зр╢║р╖Тр╢┤р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒.',
      ta: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН роЙроЩрпНроХро│рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ропрпИ роЪрпЖропро▓ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНроп роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.'
    };

    return errorResponses[user.language] || errorResponses.en;
  }
}

// Handle diagnosis request
async function handleDiagnosisRequest(symptoms, user, language) {
  try {
    logger.info('ЁЯПе Processing diagnosis request', { userId: user.uid, language });
    
    const diagnosis = await ai.generateDiagnosis(symptoms, language, user.uid);
    
    // Save case
    await saveCase({
      userId: user.uid,
      platform: 'telegram',
      symptoms: symptoms,
      diagnosis: diagnosis.diagnosis,
      language: language,
      source: 'text',
      processingTime: diagnosis.processingTime
    });

    const responses = {
      en: `ЁЯПе *Medical Analysis:*
${diagnosis.diagnosis}`,
      
      si: `ЁЯПе *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║:*
${diagnosis.diagnosis}`,
      
      ta: `ЁЯПе *рооро░рпБродрпНродрпБро╡ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ:*
${diagnosis.diagnosis}`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling diagnosis request:', error);
    
    // Provide fallback responses when OpenAI is not available
    const fallbackResponses = {
      en: `ЁЯПе *Medical Analysis (Basic)*

Based on your symptoms: "${symptoms}"

*General Advice:*
тАв Monitor your symptoms closely
тАв Stay hydrated and rest well
тАв Contact a healthcare provider if symptoms worsen
тАв Keep track of your temperature if you have fever

*For Fever:*
тАв Take paracetamol if needed
тАв Stay cool and hydrated
тАв Seek medical attention if fever is high (>39┬░C) or persistent

*Note:* This is basic guidance. For accurate diagnosis, please consult a healthcare professional.`,
      
      si: `ЁЯПе *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢лр╢║ (р╢╕р╖Цр╢╜р╖Тр╢Ъ)*

р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л: "${symptoms}"

*р╖Гр╖Пр╢╕р╖Пр╢▒р╖КтАНр╢║ р╢Лр╢┤р╢пр╖Щр╖Гр╖К:*
тАв р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╖Гр╢╕р╖Ур╢┤р╖А р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢вр╢╜р╢║ р╢╢р╖Ьр╢▒р╖Кр╢▒ р╖Гр╖Д р╖Др╖Ьр╢│р╖Тр╢▒р╖К р╖Ар╖Тр╖Ар╖Ър╢Ъ р╢Ьр╢▒р╖Кр╢▒
тАв р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╢Лр╢Ьр╖КтАНр╢╗ р╖Ар╖Фр╖Ар╖Др╖Ьр╢нр╖К р╖Гр╖Юр╢Ыр╖КтАНр╢║ р╖Гр╖Ър╖Ар╖П р╖Гр╢┤р╢║р╢▒р╖Кр╢▒р╖П р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░ р╢Ър╢╗р╢Ьр╢▒р╖Кр╢▒
тАв р╢Лр╢л р╢нр╖Тр╢╢р╖Ъ р╢▒р╢╕р╖К р╢Фр╢╢р╖Ъ р╢Лр╖Вр╖Кр╢лр╢нр╖Кр╖Ар╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒

*р╢Лр╢л р╖Гр╢│р╖Др╖П:*
тАв р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢▒р╢╕р╖К paracetamol р╢Ьр╢▒р╖Кр╢▒
тАв р╖Гр╖Тр╖Гр╖Тр╢╜р╖Кр╖А р╖Гр╖Тр╢зр╖Тр╢▒р╖Кр╢▒ р╖Гр╖Д р╢вр╢╜р╢║ р╢╢р╖Ьр╢▒р╖Кр╢▒
тАв р╢Лр╢л р╢Йр╖Др╖Е (>39┬░C) р╖Др╖Э р╢нр╖Тр╢╗р╖Гр╖Пр╢╗ р╢▒р╢╕р╖К р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Лр╢┤р╢Ър╖Пр╢╗ р╢╜р╢╢р╖Пр╢Ьр╢▒р╖Кр╢▒

*р╖Гр╢зр╖Др╢▒:* р╢╕р╖Щр╢║ р╢╕р╖Цр╢╜р╖Тр╢Ъ р╢╕р╢Яр╢┤р╖Щр╢▒р╖Кр╖Ар╖Ур╢╕р╢Ър╖Т. р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Гр╢│р╖Др╖П р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╖Гр╖Юр╢Ыр╖КтАНр╢║ р╖Гр╖Ър╖Ар╖П р╖Ар╖Шр╢нр╖Кр╢нр╖Тр╢Ър╢║р╖Щр╢Ър╖Ф р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░ р╢Ър╢╗р╢Ьр╢▒р╖Кр╢▒.`,
      
      ta: `ЁЯПе *рооро░рпБродрпНродрпБро╡ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ (роЕроЯро┐рокрпНрокроЯрпИ)*

роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН: "${symptoms}"

*рокрпКродрпБро╡ро╛рой роЖро▓рпЛроЪройрпИ:*
тАв роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роХро╡ройрооро╛роХ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН
тАв роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНродрпБ роиройрпНро▒ро╛роХ роУропрпНро╡рпЖроЯрпБроХрпНроХро╡рпБроорпН
тАв роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роорпЛроЪроороЯрпИроирпНродро╛ро▓рпН роЪрпБроХро╛родро╛ро░ ро╡ро┤роЩрпНроХрпБроиро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН
тАв роХро╛ропрпНроЪрпНроЪро▓рпН роЗро░рпБроирпНродро╛ро▓рпН роЙроЩрпНроХро│рпН ро╡рпЖрокрпНрокроиро┐ро▓рпИропрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН

*роХро╛ропрпНроЪрпНроЪро▓рпБроХрпНроХрпБ:*
тАв родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН paracetamol роОроЯрпБроХрпНроХро╡рпБроорпН
тАв роХрпБро│ро┐ро░рпНроЪрпНроЪро┐ропро╛роХ роЗро░рпБроирпНродрпБ роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНропро╡рпБроорпН
тАв роХро╛ропрпНроЪрпНроЪро▓рпН роЕродро┐роХрооро╛роХ (>39┬░C) роЕро▓рпНро▓родрпБ родрпКроЯро░рпНроЪрпНроЪро┐ропро╛роХ роЗро░рпБроирпНродро╛ро▓рпН рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ рокрпЖро▒ро╡рпБроорпН

*роХрпБро▒ро┐рокрпНрокрпБ:* роЗродрпБ роЕроЯро┐рокрпНрокроЯрпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН. родрпБро▓рпНро▓ро┐ропрооро╛рой роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХрпБ, родропро╡рпБроЪрпЖропрпНродрпБ роЪрпБроХро╛родро╛ро░ ро╡ро▓рпНро▓рпБроиро░рпИ роЕрогрпБроХро╡рпБроорпН.`
    };

    return fallbackResponses[language] || fallbackResponses.en;
  }
}

// Handle simulation command
async function handleSimulationCommand(user, language) {
  try {
    const conditions = [
      'Leptospirosis',
      'Dengue fever',
      'Typhoid fever',
      'Malaria',
      'Acute gastroenteritis',
      'Upper respiratory tract infection',
      'Hypertension',
      'Diabetes mellitus'
    ];

    const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];
    
    // Start simulation using the simulation manager
    const initialPresentation = simulationManager.startSimulation(user.uid, randomCondition, language, {
      age: Math.floor(Math.random() * 50) + 20,
      gender: Math.random() > 0.5 ? 'Male' : 'Female',
      occupation: 'Farmer',
      location: 'Rural Sri Lanka'
    });

    const responses = {
      en: `ЁЯОн *Patient Simulation Started*

${initialPresentation}

*Ask questions to the patient to gather more information about their condition!*

*Available commands:*
тАв /endsim - End current simulation
тАв /diagnosis - Submit your diagnosis
тАв /help - Show available commands`,
      
      si: `ЁЯОн *р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Жр╢╗р╢╕р╖Кр╢╖ р╖Ар╖Тр╢║*

${initialPresentation}

*р╢╗р╖Эр╢Ьр╖Тр╢║р╖Пр╢Ьр╖Ъ р╢нр╢нр╖Кр╖Ар╢║ р╢Ьр╖Рр╢▒ р╖Ар╖Рр╢йр╖Тр╢пр╖Фр╢╗ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф р╢╜р╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢╗р╖Эр╢Ьр╖Тр╢║р╖Пр╢з р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒ р╢Зр╖Гр╖Ур╢╕р╢з!*

*р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв /endsim - р╖Ар╢╗р╖Кр╢нр╢╕р╖Пр╢▒ р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Ер╖Ар╖Гр╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /diagnosis - р╢Фр╢╢р╖Ъ р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╢Йр╢пр╖Тр╢╗р╖Тр╢┤р╢нр╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /help - р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢░р╖Пр╢▒ р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒`,
      
      ta: `ЁЯОн *роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпН родрпКроЯроЩрпНроХрокрпНрокроЯрпНроЯродрпБ*

${initialPresentation}

*роирпЛропро╛ро│ро┐ропро┐ройрпН роиро┐ро▓рпИ рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН родроХро╡ро▓рпНроХро│рпИ роЪрпЗроХро░ро┐роХрпНроХ роирпЛропро╛ро│ро┐ропро┐роЯроорпН роХрпЗро│рпНро╡ро┐роХро│рпН роХрпЗро│рпНро╡ро┐!*

*роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп роХроЯрпНроЯро│рпИроХро│рпН:*
тАв /endsim - родро▒рпНрокрпЛродрпИроп роЪро┐роорпБро▓рпЗро╖ройрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
тАв /diagnosis - роЙроЩрпНроХро│рпН роХрогрпНроЯро▒ро┐родро▓рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН
тАв /help - роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп роХроЯрпНроЯро│рпИроХро│рпИроХрпН роХро╛роЯрпНроЯро╡рпБроорпН`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling simulation command:', error);
    return 'Sorry, simulation is currently unavailable.';
  }
}

// Handle end simulation command
async function handleEndSimulationCommand(user, language) {
  try {
    const simulationStatus = simulationManager.getSimulationStatus(user.uid);
    
    if (!simulationStatus) {
      const responses = {
        en: 'You don\'t have an active simulation to end.',
        si: 'р╢Фр╢╢р╢з р╢Ер╖Ар╖Гр╢▒р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║р╢Ър╖К р╢▒р╖Рр╢н.',
        ta: 'роирпАроЩрпНроХро│рпН роорпБроЯро┐роХрпНроХ роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│ роЪро┐роорпБро▓рпЗро╖ройрпН роЗро▓рпНро▓рпИ.'
      };
      return responses[language] || responses.en;
    }

    // End the simulation
    simulationManager.endSimulation(user.uid);

    const responses = {
      en: `ЁЯОн *Simulation Ended*

*Case Summary:*
- Condition: ${simulationStatus.condition}
- Duration: ${Math.round((new Date() - simulationStatus.startTime) / 1000 / 60)} minutes
- Questions asked: ${simulationStatus.conversationHistory.filter(c => c.type === 'question').length}

*Learning Points:*
- Practice history taking skills
- Develop differential diagnosis
- Consider Sri Lankan context
- Focus on evidence-based approach

Use /simulate to start a new case!`,
      
      si: `ЁЯОн *р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Ер╖Ар╖Гр╢▒р╖К р╖Ар╖Тр╢║*

*р╢╗р╖Эр╢Ь р╖Гр╖Пр╢╗р╖Пр╢Вр╖Бр╢║:*
- р╢нр╢нр╖Кр╖Ар╢║: ${simulationStatus.condition}
- р╢Ър╖Пр╢╜р╢║: ${Math.round((new Date() - simulationStatus.startTime) / 1000 / 60)} р╢╕р╖Тр╢▒р╖Тр╢нр╖Кр╢нр╖Ф
- р╢Зр╖Гр╖Ц р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒: ${simulationStatus.conversationHistory.filter(c => c.type === 'question').length}

*р╢Йр╢Ьр╖Щр╢▒р╖Ур╢╕р╖Ъ р╢Ър╢╗р╖Фр╢лр╖Ф:*
- р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║ р╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╢Ър╖Фр╖Гр╢╜р╢нр╖П р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒
- р╢Ер╖Ар╢Ър╢╜ р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Ар╢╗р╖Кр╢░р╢▒р╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
- р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║ р╖Гр╢╜р╢Ър╖П р╢╢р╢╜р╢▒р╖Кр╢▒
- р╖Гр╖Пр╢Ър╖Кр╖Вр╖Т р╢╕р╢н р╢┤р╢пр╢▒р╢╕р╖К р╖Ар╖Ц р╢┤р╖КтАНр╢╗р╖Ар╖Ър╖Бр╢║ р╢╕р╢н р╢Ер╖Ар╢░р╖Пр╢▒р╢║ р╢║р╖Ьр╢╕р╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒

р╢▒р╖А р╢╗р╖Эр╢Ьр╢║р╢Ър╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /simulate р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒!`,
      
      ta: `ЁЯОн *роЪро┐роорпБро▓рпЗро╖ройрпН роорпБроЯро┐ро╡роЯрпИроирпНродродрпБ*

*ро╡ро┤роХрпНроХрпБ роЪрпБро░рпБроХрпНроХроорпН:*
- роиро┐ро▓рпИ: ${simulationStatus.condition}
- роХро╛ро▓роорпН: ${Math.round((new Date() - simulationStatus.startTime) / 1000 / 60)} роиро┐рооро┐роЯроЩрпНроХро│рпН
- роХрпЗроЯрпНроХрокрпНрокроЯрпНроЯ роХрпЗро│рпНро╡ро┐роХро│рпН: ${simulationStatus.conversationHistory.filter(c => c.type === 'question').length}

*роХро▒рпНро▒ро▓рпН рокрпБро│рпНро│ро┐роХро│рпН:*
- ро╡ро░ро▓ро╛ро▒рпБ роОроЯрпБроХрпНроХрпБроорпН родро┐ро▒ройрпНроХро│рпИ рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН
- ро╡рпЗро▒рпБрокроЯрпНроЯ роХрогрпНроЯро▒ро┐родро▓рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроЩрпНроХро│рпН
- роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпИ роХро╡ройро┐ропрпБроЩрпНроХро│рпН
- роЪро╛ройрпНро▒рпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роЕрогрпБроХрпБроорпБро▒рпИропро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН

рокрпБродро┐роп ро╡ро┤роХрпНроХрпИродрпН родрпКроЯроЩрпНроХ /simulate роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН!`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling end simulation command:', error);
    return 'Sorry, could not end simulation.';
  }
}

// Handle diagnosis submission command
async function handleDiagnosisSubmissionCommand(user, language) {
  try {
    const simulationStatus = simulationManager.getSimulationStatus(user.uid);
    
    if (!simulationStatus) {
      const responses = {
        en: 'You don\'t have an active simulation. Use /simulate to start one.',
        si: 'р╢Фр╢╢р╢з р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║р╢Ър╖К р╢▒р╖Рр╢н. р╢Ср╢Ър╢Ър╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /simulate р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒.',
        ta: 'роЙроЩрпНроХро│рпБроХрпНроХрпБ роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│ роЪро┐роорпБро▓рпЗро╖ройрпН роЗро▓рпНро▓рпИ. роТройрпНро▒рпИродрпН родрпКроЯроЩрпНроХ /simulate роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.'
      };
      return responses[language] || responses.en;
    }

    // Get the correct diagnosis based on condition
    const correctDiagnosis = getCorrectDiagnosis(simulationStatus.condition);
    
    const responses = {
      en: `ЁЯОп *Diagnosis Review*

*Your Case:*
- Condition: ${simulationStatus.condition}
- Patient: ${simulationStatus.patientProfile.age} year old ${simulationStatus.patientProfile.gender}
- Occupation: ${simulationStatus.patientProfile.occupation}

*Correct Diagnosis:*
${correctDiagnosis}

*Key Learning Points:*
- History taking is crucial
- Consider occupational exposure
- Look for specific symptoms
- Think about local epidemiology

*Management:*
${getManagementPlan(simulationStatus.condition, language)}

Use /endsim to end this simulation or /simulate for a new case!`,
      
      si: `ЁЯОп *р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Гр╢╕р╖Пр╢╜р╖Эр╢ар╢▒р╢║*

*р╢Фр╢╢р╖Ъ р╢╗р╖Эр╢Ьр╢║:*
- р╢нр╢нр╖Кр╖Ар╢║: ${simulationStatus.condition}
- р╢╗р╖Эр╢Ьр╖Тр╢║р╖П: ${simulationStatus.patientProfile.age} р╖Ар╢║р╖Гр╖Кр╢Ър╢╗р╖Ф ${simulationStatus.patientProfile.gender}
- р╢╗р╖Рр╢Ър╖Тр╢║р╖Пр╖А: ${simulationStatus.patientProfile.occupation}

*р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║:*
${correctDiagnosis}

*р╢┤р╖КтАНр╢╗р╢░р╖Пр╢▒ р╢Йр╢Ьр╖Щр╢▒р╖Ур╢╕р╖Ъ р╢Ър╢╗р╖Фр╢лр╖Ф:*
- р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║ р╢Ьр╖Рр╢▒р╖Ур╢╕ р╢нр╖Ур╢╗р╢лр╖Пр╢нр╖Кр╢╕р╢Ъ р╢║
- р╖Ар╖Шр╢нр╖Кр╢нр╖Ур╢║ р╢▒р╖Тр╢╗р╖Пр╖Ар╢╗р╢лр╢║ р╖Гр╢╜р╢Ър╖П р╢╢р╢╜р╢▒р╖Кр╢▒
- р╖Ар╖Тр╖Бр╖Ър╖Вр╖Тр╢н р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╖Гр╖Ьр╢║р╢▒р╖Кр╢▒
- р╢пр╖Ър╖Бр╖Ур╢║ р╖Ар╖Гр╢Вр╢Ьр╢н р╖Ар╖Тр╢пр╖КтАНр╢║р╖Пр╖А р╢Ьр╖Рр╢▒ р╖Гр╖Тр╢нр╢▒р╖Кр╢▒

*р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║:*
${getManagementPlan(simulationStatus.condition, language)}

р╢╕р╖Щр╢╕ р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Ер╖Ар╖Гр╢▒р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /endsim р╖Др╖Э р╢▒р╖А р╢╗р╖Эр╢Ьр╢║р╢Ър╖К р╖Гр╢│р╖Др╖П /simulate р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒!`,
      
      ta: `ЁЯОп *роХрогрпНроЯро▒ро┐родро▓рпН роородро┐рокрпНрокро╛ропрпНро╡рпБ*

*роЙроЩрпНроХро│рпН ро╡ро┤роХрпНроХрпБ:*
- роиро┐ро▓рпИ: ${simulationStatus.condition}
- роирпЛропро╛ро│ро┐: ${simulationStatus.patientProfile.age} ро╡ропродрпБ ${simulationStatus.patientProfile.gender}
- родрпКро┤ро┐ро▓рпН: ${simulationStatus.patientProfile.occupation}

*роЪро░ро┐ропро╛рой роХрогрпНроЯро▒ро┐родро▓рпН:*
${correctDiagnosis}

*роорпБроХрпНроХро┐роп роХро▒рпНро▒ро▓рпН рокрпБро│рпНро│ро┐роХро│рпН:*
- ро╡ро░ро▓ро╛ро▒рпБ роОроЯрпБрокрпНрокродрпБ роорпБроХрпНроХро┐ропрооро╛ройродрпБ
- родрпКро┤ро┐ро▓рпН ро╡рпЖро│ро┐рокрпНрокро╛роЯрпНроЯрпИ роХро╡ройро┐ропрпБроЩрпНроХро│рпН
- роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЕро▒ро┐роХрпБро▒ро┐роХро│рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН
- роЙро│рпНро│рпВро░рпН родрпКро▒рпНро▒рпБроирпЛропро┐ропро▓рпН рокро▒рпНро▒ро┐ роЪро┐роирпНродро┐ропрпБроЩрпНроХро│рпН

*роорпЗро▓ро╛рогрпНроорпИ:*
${getManagementPlan(simulationStatus.condition, language)}

роЗроирпНрод роЪро┐роорпБро▓рпЗро╖ройрпИ роорпБроЯро┐роХрпНроХ /endsim роЕро▓рпНро▓родрпБ рокрпБродро┐роп ро╡ро┤роХрпНроХрпБроХрпНроХрпБ /simulate роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН!`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling diagnosis submission command:', error);
    return 'Sorry, could not process diagnosis submission.';
  }
}

// Helper function to get correct diagnosis
function getCorrectDiagnosis(condition) {
  const diagnoses = {
    'leptospirosis': 'Leptospirosis - A bacterial infection transmitted through contact with contaminated water or soil, common in farmers and agricultural workers.',
    'dengue fever': 'Dengue Fever - A viral infection transmitted by Aedes mosquitoes, endemic in tropical regions including Sri Lanka.',
    'typhoid fever': 'Typhoid Fever - A bacterial infection caused by Salmonella typhi, transmitted through contaminated food and water.',
    'malaria': 'Malaria - A parasitic infection transmitted by Anopheles mosquitoes, common in tropical regions.',
    'acute gastroenteritis': 'Acute Gastroenteritis - Inflammation of the stomach and intestines, usually caused by viral or bacterial infection.',
    'upper respiratory tract infection': 'Upper Respiratory Tract Infection - Viral infection affecting the nose, throat, and upper airways.',
    'hypertension': 'Hypertension - High blood pressure, a common chronic condition requiring long-term management.',
    'diabetes mellitus': 'Diabetes Mellitus - A metabolic disorder characterized by high blood sugar levels.'
  };
  return diagnoses[condition] || 'General medical condition requiring further evaluation.';
}

// Helper function to get management plan
function getManagementPlan(condition, language) {
  const plans = {
    'leptospirosis': {
      en: '- IV fluids and electrolyte management\n- Doxycycline or Penicillin G\n- Monitor renal function\n- Supportive care\n- Prevention: Avoid contaminated water',
      si: '- IV р╢пр╖Тр╢║р╢╗ р╖Гр╖Д р╖Ар╖Тр╢пр╖КтАНр╢║р╖Фр╢нр╖К р╢╜р╖Ар╢л р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║\n- Doxycycline р╖Др╖Э Penicillin G\n- р╖Ар╢Ър╖Фр╢Ьр╢йр╖Ф р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║\n- р╖Гр╖Др╖Пр╢║р╢Ъ р╢╗р╖Рр╢Ър╖Ар╢╗р╢лр╢║\n- р╖Ар╖Рр╖Ер╖Рр╢Ър╖Кр╖Ар╖Ур╢╕: р╢пр╖Цр╖Вр╖Тр╢н р╢вр╢╜р╢║ р╖Ар╖Ер╢Ър╖Кр╖Ар╢▒р╖Кр╢▒',
      ta: '- IV родро┐ро░ро╡роЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роОро▓роХрпНроЯрпНро░рпЛро▓рпИроЯрпН роорпЗро▓ро╛рогрпНроорпИ\n- Doxycycline роЕро▓рпНро▓родрпБ Penicillin G\n- роЪро┐ро▒рпБроирпАро░роХ роЪрпЖропро▓рпНрокро╛роЯрпНроЯрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН\n- роЖродро░ро╡рпБ рокро░ро╛рооро░ро┐рокрпНрокрпБ\n- родроЯрпБрокрпНрокрпБ: рооро╛роЪрпБрокроЯрпНроЯ роирпАро░рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН'
    },
    'dengue fever': {
      en: '- IV fluids for severe cases\n- Paracetamol for fever\n- Monitor platelet count\n- Avoid NSAIDs\n- Prevention: Mosquito control',
      si: '- р╢нр╢п р╢╗р╖Эр╢Ь р╖Гр╢│р╖Др╖П IV р╢пр╖Тр╢║р╢╗\n- р╢Лр╢л р╖Гр╢│р╖Др╖П р╢┤р╖Рр╢╗р╖Гр╖Тр╢зр╢╕р╖Эр╢╜р╖К\n- р╢┤р╖Кр╢╜р╖Ър╢зр╖Кр╢╜р╢зр╖К р╢Ьр╢лр╢▒ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║\n- NSAIDs р╖Ар╖Ер╢Ър╖Кр╖Ар╢▒р╖Кр╢▒\n- р╖Ар╖Рр╖Ер╖Рр╢Ър╖Кр╖Ар╖Ур╢╕: р╢╕р╢пр╖Фр╢╗р╖Ф р╢┤р╖Пр╢╜р╢▒р╢║',
      ta: '- роХроЯрпБроорпИропро╛рой ро╡ро┤роХрпНроХрпБроХро│рпБроХрпНроХрпБ IV родро┐ро░ро╡роЩрпНроХро│рпН\n- роХро╛ропрпНроЪрпНроЪро▓рпБроХрпНроХрпБ рокро╛ро░ро╛роЪро┐роЯрпНроЯрооро╛ро▓рпН\n- рокро┐ро│рпЗроЯрпНро▓рпЖроЯрпН роОрогрпНрогро┐роХрпНроХрпИропрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН\n- NSAIDs роРродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН\n- родроЯрпБрокрпНрокрпБ: роХрпКроЪрпБ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ'
    }
  };
  
  const plan = plans[condition];
  return plan ? plan[language] || plan.en : 'Standard medical management based on condition severity.';
}

// Handle drug category request
async function handleDrugCategoryRequest(category, user, language) {
  try {
    logger.info('ЁЯТК Processing drug category request', { category, userId: user.uid });
    
    // Handle specific medication queries
    const specificMedications = {
      'doxycycline': {
        en: `ЁЯТК *Doxycycline Information*

*Generic Name:* Doxycycline
*Class:* Tetracycline antibiotic
*Common Uses:*
тАв Respiratory infections
тАв Skin infections
тАв Malaria prophylaxis
тАв Acne treatment

*Dosage:* 100mg twice daily (varies by condition)
*Duration:* 7-14 days typically

*Important Notes:*
тАв Take with food to avoid stomach upset
тАв Avoid dairy products 2 hours before/after
тАв Use sunscreen (increases sun sensitivity)
тАв Not recommended in pregnancy

*Side Effects:*
тАв Nausea, vomiting
тАв Diarrhea
тАв Sun sensitivity
тАв Yeast infection

*For Medical Students:*
Consider drug interactions with warfarin, antacids, and oral contraceptives.`,

        si: `ЁЯТК *Doxycycline р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф*

*р╖Гр╖Пр╢╕р╖Пр╢▒р╖КтАНр╢║ р╢▒р╢╕:* Doxycycline
*р╖Ар╢╗р╖Кр╢Ьр╢║:* Tetracycline р╢┤р╖КтАНр╢╗р╢нр╖Тр╢вр╖Ур╖Ар╢Ъ
*р╖Гр╖Пр╢╕р╖Пр╢▒р╖КтАНр╢║ р╢╖р╖Пр╖Ар╖Тр╢н:*
тАв р╖Бр╖Кр╖Ар╖Гр╢▒ р╢Жр╖Гр╖Пр╢пр╢▒
тАв р╖Гр╢╕ р╢Жр╖Гр╖Пр╢пр╢▒
тАв р╢╕р╖Рр╢╜р╖Ър╢╗р╖Тр╢║р╖П р╖Ар╖Рр╖Ер╖Рр╢Ър╖Кр╖Ар╖Ур╢╕
тАв р╢Ър╖Фр╢╗р╖Фр╢╜р╖С р╢╗р╖Эр╢Ь р╢ар╖Тр╢Ър╖Тр╢нр╖Кр╖Гр╖Пр╖А

*р╢Цр╖Вр╢░ р╢┤р╖КтАНр╢╗р╢╕р╖Пр╢лр╢║:* 100mg р╢пр╖Тр╢▒р╢Ър╢з р╢пр╖Щр╖Ар╢╗р╢Ър╖К (р╢╗р╖Эр╢Ь р╢нр╢нр╖Кр╖Ар╢║ р╢Ер╢▒р╖Фр╖А р╖Ар╖Щр╢▒р╖Гр╖К р╖Ар╖Ъ)
*р╢Ър╖Пр╢╜р╖Гр╖Ур╢╕р╖Пр╖А:* р╖Гр╖Пр╢╕р╖Пр╢▒р╖КтАНр╢║р╢║р╖Щр╢▒р╖К 7-14 р╢пр╖Тр╢▒

*р╖Ар╖Рр╢пр╢Ьр╢нр╖К р╖Гр╢зр╖Др╢▒р╖К:*
тАв р╢Жр╢╕р╖Пр╖Бр╢║р╖Ъ р╢Ер╖Гр╖Др╢▒р╢нр╖Пр╖А р╖Ар╖Рр╖Ер╖Рр╢Ър╖Кр╖Ар╖Ур╢╕р╢з р╢Жр╖Др╖Пр╢╗ р╖Гр╢╕р╢Я р╢Ьр╢▒р╖Кр╢▒
тАв р╢Ър╖Тр╢╗р╖Т р╢╖р╖Пр╢лр╖Кр╢й 2 р╢┤р╖Рр╢║р╢Ър╢з р╢┤р╖Щр╢╗/р╢┤р╖Гр╖Ф р╖Ар╢╜р╢Ър╢▒р╖Кр╢▒
тАв р╖Гр╖Цр╢╗р╖КтАНр╢║ р╢Жр╢╜р╖Эр╢Ър╢║ р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒ (р╖Гр╖Цр╢╗р╖КтАНр╢║ р╖Гр╢Вр╖Ар╖Ър╢пр╖Ур╢нр╖Пр╖А р╖Ар╖Рр╢йр╖Т р╢Ър╢╗р╢║р╖Т)
тАв р╢Ьр╢╗р╖Кр╢╖р╢лр╖У р╢╖р╖Пр╖Ар╢║р╖Ъ р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б р╢▒р╖Ьр╢Ър╖Щр╢╗р╖Ъ

*р╢┤р╖Пр╢╗р╖Кр╖Бр╖А р╢Жр╢╢р╖Пр╢░:*
тАв р╖Ар╢╕р╢▒р╢║, р╖Ар╢╕р╢▒р╢║
тАв р╢Ер╢нр╖Фр╢╗р╖Ф р╢Жр╢╢р╖Пр╢░
тАв р╖Гр╖Цр╢╗р╖КтАНр╢║ р╖Гр╢Вр╖Ар╖Ър╢пр╖Ур╢нр╖Пр╖А
тАв р╢║р╖Ур╖Гр╖Кр╢зр╖К р╢Жр╖Гр╖Пр╢пр╢▒

*р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Бр╖Тр╖Вр╖КтАНр╢║р╢║р╖Тр╢▒р╖К р╖Гр╢│р╖Др╖П:*
Warfarin, antacids, р╖Гр╖Д oral contraceptives р╖Гр╢╕р╢Я р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╖Гр╢╜р╢Ър╖П р╢╢р╢╜р╢▒р╖Кр╢▒.`,

        ta: `ЁЯТК *Doxycycline родроХро╡ро▓рпН*

*рокрпКродрпБро╡ро╛рой рокрпЖропро░рпН:* Doxycycline
*ро╡роХрпБрокрпНрокрпБ:* Tetracycline роирпБрогрпНрогрпБропро┐ро░рпН роОродро┐ро░рпНрокрпНрокро┐
*рокрпКродрпБро╡ро╛рой рокропройрпНрокро╛роЯрпБроХро│рпН:*
тАв роЪрпБро╡ро╛роЪ родрпКро▒рпНро▒рпБроХро│рпН
тАв родрпЛро▓рпН родрпКро▒рпНро▒рпБроХро│рпН
тАв рооро▓рпЗро░ро┐ропро╛ родроЯрпБрокрпНрокрпБ
тАв роорпБроХрокрпНрокро░рпБ роЪро┐роХро┐роЪрпНроЪрпИ

*рооро░рпБроирпНродро│ро╡рпБ:* 100mg роиро╛ро│рпБроХрпНроХрпБ роЗро░рогрпНроЯрпБ роорпБро▒рпИ (роиро┐ро▓рпИроорпИропрпИрокрпН рокрпКро▒рпБродрпНродрпБ рооро╛ро▒рпБрокроЯрпБроорпН)
*роХро╛ро▓роорпН:* рокрпКродрпБро╡ро╛роХ 7-14 роиро╛роЯрпНроХро│рпН

*роорпБроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:*
тАв ро╡ропро┐ро▒рпНро▒рпБ роЙрокро╛родрпИропрпИродрпН родро╡ро┐ро░рпНроХрпНроХ роЙрогро╡рпБроЯройрпН роОроЯрпБроХрпНроХро╡рпБроорпН
тАв рокро╛ро▓рпН рокрпКро░рпБроЯрпНроХро│рпИ 2 роорогро┐ роирпЗро░родрпНродро┐ро▒рпНроХрпБ роорпБройрпН/рокро┐ройрпНройро░рпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН
тАв роЪрпВро░ро┐роп роТро│ро┐ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН (роЪрпВро░ро┐роп роЙрогро░рпНродро┐ро▒ройрпИ роЕродро┐роХро░ро┐роХрпНроХро┐ро▒родрпБ)
тАв роХро░рпНрокрпНрокродрпНродро┐ро▓рпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ

*рокроХрпНроХ ро╡ро┐ро│рпИро╡рпБроХро│рпН:*
тАв роХрпБроороЯрпНроЯро▓рпН, ро╡ро╛роирпНродро┐
тАв ро╡ропро┐ро▒рпНро▒рпБрокрпНрокрпЛроХрпНроХрпБ
тАв роЪрпВро░ро┐роп роЙрогро░рпНродро┐ро▒ройрпН
тАв роИро╕рпНроЯрпН родрпКро▒рпНро▒рпБ

*рооро░рпБродрпНродрпБро╡ рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХрпБ:*
Warfarin, antacids, рооро▒рпНро▒рпБроорпН oral contraceptives роЙроЯройрпН рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпИроХрпН роХро╡ройро┐ропрпБроЩрпНроХро│рпН.`
      }
    };

    // Check if it's a specific medication query
    if (specificMedications[category]) {
      return specificMedications[category][language] || specificMedications[category].en;
    }
    
    const drugs = advancedFeatures.getDrugsByCategory(category);
    
    if (!drugs || drugs.length === 0) {
      const responses = {
        en: `No drugs found for category: ${category}`,
        si: `${category} р╢Ър╖Пр╢лр╖Кр╢йр╢║ р╖Гр╢│р╖Др╖П р╢Цр╖Вр╢░ р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║`,
        ta: `${category} ро╡роХрпИроХрпНроХрпБ рооро░рпБроирпНродрпБроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ`
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 
      `ЁЯТК *${category} - р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А*\n\n` :
      language === 'ta' ? 
      `ЁЯТК *${category} - роЗро▓роЩрпНроХрпИ рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН*\n\n` :
      `ЁЯТК *${category} - Sri Lankan Drug Database*\n\n`;

    drugs.forEach((drug, index) => {
      response += `${index + 1}. *${drug.name}*\n`;
      response += `   ЁЯТК Generic: ${drug.generic}\n`;
      response += `   ЁЯТ░ Cost: ${drug.cost}\n`;
      response += `   ЁЯУж Availability: ${drug.availability}\n`;
      response += `   ЁЯТб Usage: ${drug.usage}\n\n`;
    });

    response += language === 'si' ? 
      '*р╖Ар╖Рр╢йр╖Тр╢пр╖Фр╢╗ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф р╖Гр╢│р╖Др╖П р╢Цр╖Вр╢░ р╢▒р╢╕ р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒*' :
      language === 'ta' ? 
      '*роорпЗро▓рпБроорпН родроХро╡ро▓рпНроХро│рпБроХрпНроХрпБ рооро░рпБроирпНродрпБ рокрпЖропро░рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН*' :
      '*Type drug name for more details*';

    return response;

  } catch (error) {
    logger.error('тЭМ Error handling drug category request:', error);
    return 'Sorry, could not retrieve drug information.';
  }
}

// Handle calculator type request
async function handleCalculatorTypeRequest(calculatorType, user, language) {
  try {
    logger.info('ЁЯзо Processing calculator request', { calculatorType, userId: user.uid });
    
    const responses = {
      en: `ЁЯзо *${calculatorType.toUpperCase()} Calculator*\n\nPlease provide the required parameters:\n\n`,
      si: `ЁЯзо *${calculatorType.toUpperCase()} р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢┤р╢╗р╖Пр╢╕р╖Тр╢нр╖Т р╖Гр╢┤р╢║р╢▒р╖Кр╢▒:\n\n`,
      ta: `ЁЯзо *${calculatorType.toUpperCase()} роХрогро┐рокрпНрокро╛ройрпН*\n\nродрпЗро╡рпИропро╛рой роЕро│ро╡рпБро░рпБроХрпНроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН:\n\n`
    };

    let response = responses[language] || responses.en;

    // Add specific instructions for each calculator
    const instructions = {
      'bmi': {
        en: 'Weight (kg) and Height (m)\nExample: "70 1.75"',
        si: 'р╢╢р╢╗ (kg) р╖Гр╖Д р╢Лр╖Г (m)\nр╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "70 1.75"',
        ta: 'роОроЯрпИ (kg) рооро▒рпНро▒рпБроорпН роЙропро░роорпН (m)\nроОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "70 1.75"'
      },
      'gfr': {
        en: 'Age, Gender, Weight (kg), Creatinine (mg/dL)\nExample: "45 male 70 1.2"',
        si: 'р╖Ар╢║р╖Г, р╖Гр╖Кр╢нр╖КтАНр╢╗р╖У р╢┤р╖Фр╢╗р╖Фр╖В р╢╖р╖Пр╖Ар╢║, р╢╢р╢╗ (kg), р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Ър╢зр╖Тр╢▒р╖Тр╢▒р╖К (mg/dL)\nр╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "45 male 70 1.2"',
        ta: 'ро╡ропродрпБ, рокро╛ро▓ро┐ройроорпН, роОроЯрпИ (kg), роХро┐ро░ро┐ропрпЗроЯрпНроЯро┐ройро┐ройрпН (mg/dL)\nроОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "45 male 70 1.2"'
      },
      'chads2': {
        en: 'Age, CHF, HTN, DM, Stroke/TIA\nExample: "65 yes no yes no"',
        si: 'р╖Ар╢║р╖Г, CHF, HTN, DM, Stroke/TIA\nр╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "65 yes no yes no"',
        ta: 'ро╡ропродрпБ, CHF, HTN, DM, Stroke/TIA\nроОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "65 yes no yes no"'
      }
    };

    response += instructions[calculatorType]?.[language] || instructions[calculatorType]?.en || 'Please provide the required parameters.';

    return response;

  } catch (error) {
    logger.error('тЭМ Error handling calculator request:', error);
    return 'Sorry, could not process calculator request.';
  }
}

// Handle guideline request
async function handleGuidelineRequest(condition, user, language) {
  try {
    logger.info('ЁЯУЛ Processing guideline request', { condition, userId: user.uid });
    
    const guideline = advancedFeatures.getClinicalGuideline(condition);
    
    if (!guideline) {
      const responses = {
        en: `No guidelines found for: ${condition}`,
        si: `${condition} р╖Гр╢│р╖Др╖П р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║`,
        ta: `${condition} роХрпНроХро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ`
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 
      `ЁЯУЛ *${condition} - р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б*\n\n` :
      language === 'ta' ? 
      `ЁЯУЛ *${condition} - рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН*\n\n` :
      `ЁЯУЛ *${condition} - Clinical Guidelines*\n\n`;

    response += `*Diagnosis:*\n${guideline.diagnosis}\n\n`;
    response += `*Treatment:*\n${guideline.treatment}\n\n`;
    response += `*Monitoring:*\n${guideline.monitoring}\n\n`;
    response += `*Prevention:*\n${guideline.prevention}`;

    return response;

  } catch (error) {
    logger.error('тЭМ Error handling guideline request:', error);
    return 'Sorry, could not retrieve clinical guidelines.';
  }
}

// Handle help request
async function handleHelpRequest(user, language) {
  try {
    const responses = {
      en: `ЁЯПе *StethoLink AI Agent Help*

*ЁЯУЦ Getting Started:*
тАв /guide - View comprehensive user guide
тАв /help - Show this command list
тАв /agent - Initialize your personal AI agent

*ЁЯУЪ Study Management:*
тАв /tasks - View and manage your tasks
тАв /addtask - Add a new task with alerts
тАв /alerts - Check your pending alerts
тАв /progress - View your study progress

*ЁЯУЭ Note Management:*
тАв "add note: [content]" - Add new note
тАв "my notes" - View all notes
тАв "search notes: [keyword]" - Find notes

*ЁЯПе Medical Commands:*
тАв /simulate - Start patient simulation
тАв /endsim - End current simulation
тАв /diagnosis - Submit your diagnosis
тАв /history - View case history
тАв /mentor - Get motivational tips

*ЁЯТК Advanced Features:*
тАв /drugs - Drug database and interactions
тАв /calculator - Medical calculators
тАв /guidelines - Clinical guidelines
тАв /decision - Clinical decision support
тАв /education - Medical education content
тАв /evidence - Evidence-based medicine

*ЁЯЦея╕П Dashboard:*
тАв "dashboard" - Open web dashboard
тАв "open dashboard" - Same as above

*Quick Access (type these words):*
тАв antibiotics, analgesics - Drug database
тАв bmi, gfr, chads2 - Medical calculators
тАв dengue, leptospirosis - Clinical guidelines
тАв help, commands - Show this menu

*Natural Language Examples:*
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "add note: ECG interpretation basics"
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction warfarin aspirin"
тАв "Start patient simulation"
тАв "dashboard"

*Languages:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

*For detailed guide, type: /guide*

Start by typing a command or medical term!`,
      
      si: `ЁЯПе *StethoLink AI р╢Лр╢пр╖Ар╖К*

*р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╖Ар╖Тр╢░р╖Пр╢▒:*
тАв /simulate - р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /endsim - р╖Ар╢╗р╖Кр╢нр╢╕р╖Пр╢▒ р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒р╢║ р╢Ер╖Ар╖Гр╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /diagnosis - р╢Фр╢╢р╖Ъ р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╢Йр╢пр╖Тр╢╗р╖Тр╢┤р╢нр╖К р╢Ър╢╗р╢▒р╖Кр╢▒
тАв /history - р╢╗р╖Эр╢Ь р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║ р╢╢р╢╜р╢▒р╖Кр╢▒
тАв /mentor - р╢░р╖Ыр╢╗р╖КтАНр╢║р╢╕р╢нр╖К р╢Лр╢┤р╢пр╖Щр╖Гр╖К р╢╜р╢╢р╖П р╢Ьр╢▒р╖Кр╢▒

*р╢Ър╖Кр╖Вр╢лр╖Тр╢Ъ р╢┤р╖КтАНр╢╗р╖Ар╖Ър╖Бр╢║ (р╢╕р╖Щр╢╕ р╖Ар╢ар╢▒ р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒):*
тАв antibiotics, analgesics - р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А
тАв bmi, gfr, chads2 - р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗
тАв dengue, leptospirosis - р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б
тАв help, commands - р╢╕р╖Щр╢╕ р╢╕р╖Щр╢▒р╖Фр╖А р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒

*р╢╖р╖Пр╖Вр╖П:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

р╖Ар╖Тр╢░р╖Пр╢▒р╢║р╢Ър╖К р╖Др╖Э р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢┤р╢пр╢║р╢Ър╖К р╢зр╢║р╖Тр╢┤р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖Щр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!`,
      
      ta: `ЁЯПе *StethoLink AI роЙродро╡ро┐*

*роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп роХроЯрпНроЯро│рпИроХро│рпН:*
тАв /simulate - роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпИродрпН родрпКроЯроЩрпНроХро╡рпБроорпН
тАв /endsim - родро▒рпНрокрпЛродрпИроп роЪро┐роорпБро▓рпЗро╖ройрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
тАв /diagnosis - роЙроЩрпНроХро│рпН роХрогрпНроЯро▒ро┐родро▓рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН
тАв /history - ро╡ро┤роХрпНроХрпБ ро╡ро░ро▓ро╛ро▒рпНро▒рпИроХрпН роХро╛рогрпНроХ
тАв /mentor - роКроХрпНроХрооро│ро┐роХрпНроХрпБроорпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН

*ро╡ро┐ро░рпИро╡рпБ роЕрогрпБроХро▓рпН (роЗроирпНрод ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН):*
тАв antibiotics, analgesics - рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН
тАв bmi, gfr, chads2 - рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН
тАв dengue, leptospirosis - рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН
тАв help, commands - роЗроирпНрод роорпЖройрпБро╡рпИроХрпН роХро╛роЯрпНроЯрпБ

*роорпКро┤ро┐роХро│рпН:* ЁЯЗ║ЁЯЗ╕ ЁЯЗ▒ЁЯЗ░ ЁЯЗоЁЯЗ│

роТро░рпБ роХроЯрпНроЯро│рпИропрпИ роЕро▓рпНро▓родрпБ рооро░рпБродрпНродрпБро╡ роЪрпКро▓рпНро▓рпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНро╡родройрпН роорпВро▓роорпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН!`
    };

    // Create inline keyboard with quick access buttons for help
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: 'ЁЯУЭ Add Task', callback_data: 'add_task' },
          { text: 'ЁЯУЛ My Tasks', callback_data: 'my_tasks' },
          { text: 'тП░ My Alerts', callback_data: 'my_alerts' }
        ],
        [
          { text: 'ЁЯУЭ Add Note', callback_data: 'add_note' },
          { text: 'ЁЯУЦ My Notes', callback_data: 'my_notes' },
          { text: 'ЁЯФН Search Notes', callback_data: 'search_notes' }
        ],
        [
          { text: 'ЁЯТК Drug Info', callback_data: 'drugs' },
          { text: 'ЁЯзо Calculator', callback_data: 'calculator' },
          { text: 'ЁЯУЛ Guidelines', callback_data: 'guidelines' }
        ],
        [
          { text: 'ЁЯОн Simulation', callback_data: 'simulation' },
          { text: 'ЁЯЦея╕П Dashboard', callback_data: 'dashboard' },
          { text: 'ЁЯУЦ User Guide', callback_data: 'guide' }
        ]
      ]
    };

    return {
      text: responses[language] || responses.en,
      reply_markup: inlineKeyboard
    };

  } catch (error) {
    logger.error('тЭМ Error handling help request:', error);
    return 'Sorry, could not load help menu.';
  }
}

// Handle history command
async function handleHistoryCommand(user, language) {
  try {
    const cases = await getCases(user.uid, 5);
    
    if (cases.length === 0) {
      const responses = {
        en: 'ЁЯУЛ *Case History*\n\nNo cases found. Start by describing symptoms!',
        si: 'ЁЯУЛ *р╢╗р╖Эр╢Ь р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║*\n\nр╢╗р╖Эр╢Ь р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║. р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л р╖Ар╖Тр╖Гр╖Кр╢нр╢╗ р╢Ър╖Тр╢╗р╖Ур╢╕р╖Щр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!',
        ta: 'ЁЯУЛ *ро╡ро┤роХрпНроХрпБ ро╡ро░ро▓ро╛ро▒рпБ*\n\nро╡ро┤роХрпНроХрпБроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ ро╡ро┐ро╡ро░ро┐рокрпНрокродройрпН роорпВро▓роорпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН!'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'ЁЯУЛ *р╢╗р╖Эр╢Ь р╢Йр╢нр╖Тр╖Др╖Пр╖Гр╢║*\n\n' :
                   language === 'ta' ? 'ЁЯУЛ *ро╡ро┤роХрпНроХрпБ ро╡ро░ро▓ро╛ро▒рпБ*\n\n' :
                   'ЁЯУЛ *Case History*\n\n';

    cases.forEach((case_, index) => {
      const date = new Date(case_.createdAt.toDate()).toLocaleDateString();
      const symptoms = case_.symptoms.substring(0, 50) + '...';
      
      response += `${index + 1}. *${date}*\n`;
      response += `Symptoms: ${symptoms}\n\n`;
    });

    return response;

  } catch (error) {
    logger.error('тЭМ Error handling history command:', error);
    return 'Sorry, could not retrieve case history.';
  }
}

// Handle mentor command
async function handleMentorCommand(user, language) {
  try {
    const motivationalMessage = await ai.generateMotivationalMessage(language, 'daily');
    
    const responses = {
      en: `ЁЯОУ *Mentor Message*\n\n${motivationalMessage.message}\n\nKeep learning, future doctor! ЁЯТк`,
      si: `ЁЯОУ *р╢Лр╢┤р╢пр╖Ър╖Бр╢Ъ р╢┤р╢лр╖Тр╖Ар╖Тр╢йр╢║*\n\n${motivationalMessage.message}\n\nр╢Йр╢Ьр╖Щр╢▒ р╢Ьр╖Рр╢▒р╖Ур╢╕ р╢пр╖Тр╢Ьр╢зр╢╕ р╢Ър╢╗р╢Ьр╖Щр╢▒ р╢║р╢▒р╖Кр╢▒, р╢Ер╢▒р╖Пр╢Ьр╢н р╖Ар╖Ыр╢пр╖КтАНр╢║р╖Ар╢╗р╢║р╖П! ЁЯТк`,
      ta: `ЁЯОУ *ро╡ро┤ро┐роХро╛роЯрпНроЯро┐ роЪрпЖропрпНродро┐*\n\n${motivationalMessage.message}\n\nроХро▒рпНро▒рпБроХрпНроХрпКрогрпНроЯрпЗ роЗро░рпБроЩрпНроХро│рпН, роОродро┐ро░рпНроХро╛ро▓ рооро░рпБродрпНродрпБро╡ро░рпЗ! ЁЯТк`
    };

    return responses[language] || responses.en;

  } catch (error) {
    logger.error('тЭМ Error handling mentor command:', error);
    return 'Keep studying hard, future doctor! ЁЯТк';
  }
}

// Handle vault command
async function handleVaultCommand(user, language) {
  const responses = {
    en: 'ЁЯУБ *Clinical Vault*\n\nYour encrypted clinical portfolio is being prepared. You will receive a download link shortly.',
    si: 'ЁЯУБ *р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢Ьр╢╢р╢йр╖Пр╖А*\n\nр╢Фр╢╢р╖Ъ р╢Ср╢▒р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢┤р╖Кр╢зр╖К р╢Ър╢╗р╢▒ р╢╜р╢п р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢┤р╖Эр╢зр╖Кр╖Жр╖Эр╢╜р╖Тр╢║р╖Э р╖Гр╖Цр╢пр╖Пр╢▒р╢╕р╖К р╢Ър╢╗р╢╕р╖Тр╢▒р╖К р╢┤р╖Ар╢нр╖У. р╢Фр╢╢р╢з р╢Йр╢Ър╖Кр╢╕р╢▒р╖Тр╢▒р╖К р╢╢р╖Пр╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╖Гр╢╢р╖Рр╢│р╖Тр╢║р╢Ър╖К р╢╜р╖Рр╢╢р╖Щр╢▒р╖Ф р╢Зр╢н.',
    ta: 'ЁЯУБ *рооро░рпБродрпНродрпБро╡ роХро╛рокрпНрокроХроорпН*\n\nроЙроЩрпНроХро│рпН роХрпБро▒ро┐ропро╛роХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБродрпНродрпБро╡ рокрпЛро░рпНроЯрпНроГрокрпЛро▓ро┐ропрпЛ родропро╛ро░ро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ. ро╡ро┐ро░рпИро╡ро┐ро▓рпН рокродро┐ро╡ро┐ро▒роХрпНроХ роЗрогрпИрокрпНрокрпИрокрпН рокрпЖро▒рпБро╡рпАро░рпНроХро│рпН.'
  };

  return responses[language] || responses.en;
}

// Handle reminder command
async function handleReminderCommand(user, language) {
  const responses = {
    en: 'тП░ *Daily Reminders*\n\nReminders set! You will receive daily practice prompts to keep your skills sharp.',
    si: 'тП░ *р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К*\n\nр╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У! р╢Фр╢╢р╖Ъ р╢Ър╖Фр╖Гр╢╜р╢нр╖П р╢нр╖Тр╢║р╖Фр╢лр╖Фр╖А р╢нр╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╢Йр╢Яр╖Т р╢Фр╢╢р╢з р╢╜р╖Рр╢╢р╖Щр╢▒р╖Ф р╢Зр╢н.',
    ta: 'тП░ *родро┐ройроЪро░ро┐ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН*\n\nроиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯрой! роЙроЩрпНроХро│рпН родро┐ро▒ройрпНроХро│рпИ роХрпВро░рпНроорпИропро╛роХ ро╡рпИродрпНродро┐ро░рпБроХрпНроХ родро┐ройроЪро░ро┐ рокропро┐ро▒рпНроЪро┐ роХрпБро▒ро┐рокрпНрокрпБроХро│рпИрокрпН рокрпЖро▒рпБро╡рпАро░рпНроХро│рпН.'
  };

  return responses[language] || responses.en;
}

// Send Telegram message
async function sendTelegramMessage(chatId, message) {
  try {
    // Check if message is an object with text and reply_markup (for buttons)
    if (typeof message === 'object' && message.text && message.reply_markup) {
      const response = await bot.sendMessage(chatId, message.text, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
        reply_markup: message.reply_markup
      });

      logger.info('тЬЕ Telegram message with buttons sent successfully', {
        messageId: response.message_id,
        chatId: chatId
      });

      return response;
    } else {
      // Regular text message
      const response = await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });

      logger.info('тЬЕ Telegram message sent successfully', {
        messageId: response.message_id,
        chatId: chatId
      });

      return response;
    }
  } catch (error) {
    logger.error('тЭМ Error sending Telegram message:', error);
    throw error;
  }
}

// Get user by Telegram ID
async function getUserByTelegramId(telegramId) {
  try {
    if (!telegramId) {
      logger.warn('тЪая╕П No Telegram ID provided');
      return null;
    }

    // Query Firebase for existing user with this Telegram ID
    const usersSnapshot = await getDb().collection('users')
      .where('telegramId', '==', telegramId)
      .limit(1)
      .get();

    if (usersSnapshot.empty) {
      return null;
    }

    const userDoc = usersSnapshot.docs[0];
    return {
      uid: userDoc.id,
      ...userDoc.data()
    };
  } catch (error) {
    logger.error('тЭМ Error getting user by Telegram ID:', error);
    return null;
  }
}

// Create Telegram user
async function createTelegramUser(telegramUser) {
  try {
    const userData = {
      telegramId: telegramUser.id,
      displayName: telegramUser.first_name + (telegramUser.last_name ? ' ' + telegramUser.last_name : ''),
      username: telegramUser.username,
      language: telegramUser.language_code || 'en',
      platform: 'telegram'
    };

    const user = await createUser(userData);
    logger.info('тЬЕ Telegram user created', { uid: user.uid, telegramId: telegramUser.id });
    
    return user;
  } catch (error) {
    logger.error('тЭМ Error creating Telegram user:', error);
    throw error;
  }
}

// Download audio file (placeholder)
async function downloadAudioFile(filePath) {
  // This would download the audio file from Telegram
  // For now, return a placeholder
  return Buffer.from('placeholder audio data');
}

// Save voice message (placeholder)
async function saveVoiceMessage(data) {
  // This would save voice message data
  logger.info('Voice message saved', data);
}

// Get cases (placeholder)
async function getCases(userId, limit) {
  // This would retrieve cases from database
  return [];
}

// Process webhook (for production)
async function processTelegramWebhook(req, res) {
  try {
    // Verify webhook
    if (req.params.token !== process.env.TELEGRAM_BOT_TOKEN) {
      return res.status(403).send('Forbidden');
    }

    // Process the update directly
    const update = req.body;
    logger.info('ЁЯУ▓ Processing Telegram webhook update:', { updateType: update.message ? 'message' : 'other' });

    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;
      const messageId = message.message_id;

      // Create user object
      const user = {
        uid: userId,
        id: userId,
        telegramId: userId,
        firstName: message.from.first_name,
        lastName: message.from.last_name,
        username: message.from.username,
        language: 'en' // Default to English
      };

      // Process the message
      if (text) {
        const response = await handleTextMessage(text, user, messageId);
        await sendTelegramMessage(chatId, response);
      } else if (message.voice) {
        const response = await handleVoiceMessage(message.voice, user, messageId);
        await sendTelegramMessage(chatId, response);
      } else {
        // Send welcome message for other types
        await sendTelegramMessage(chatId, WELCOME_MESSAGES.en);
      }
    }
    
    res.status(200).send('OK');
  } catch (error) {
    logger.error('тЭМ Error processing Telegram webhook:', error);
    res.status(500).send('Internal Server Error');
  }
}

// Advanced Feature Command Handlers

async function handleCalculatorCommand(user, language) {
  try {
    const calculators = Object.keys(advancedFeatures.medicalCalculators);
    
    const response = {
      en: `ЁЯзо *Medical Calculators Available:*

*Cardiovascular:*
тАв BMI - Body Mass Index
тАв GFR - Glomerular Filtration Rate
тАв CHADS2 - Stroke Risk Score

*Respiratory:*
тАв FEV1 Predicted

*Renal:*
тАв Creatinine Clearance

*Pediatric:*
тАв Pediatric Dose Calculator

*Emergency:*
тАв Glasgow Coma Scale
тАв APACHE II Score

*Usage:* Send calculator type and parameters
Example: "BMI weight:70 height:170"`,

      si: `ЁЯзо *р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗:*

*р╖Др╖Шр╢пр╖КтАНр╢║ р╖Гр╢Вр╖Ар╖Др╢▒:*
тАв BMI - р╖Бр╢╗р╖Ур╢╗ р╖Гр╖Кр╢Ър╢▒р╖Кр╢░ р╢пр╢╗р╖Кр╖Бр╢Ър╢║
тАв GFR - р╢Ьр╖Кр╢╜р╖Эр╢╕р╢╗р╖Фр╢╜р╢╗р╖К р╢┤р╖Щр╢╗р╖Др╢▒р╖К р╢Ер╢▒р╖Фр╢┤р╖Пр╢нр╢║
тАв CHADS2 - р╖Др╖Шр╢пр╢║р╖Пр╢╢р╖Пр╢░ р╢Ер╖Ар╢пр╖Пр╢▒р╢╕р╖К р╢╜р╢Ър╖Фр╢лр╖Ф

*р╖Бр╖Кр╖Ар╖Гр╢▒:*
тАв FFR1 р╢Ер╢┤р╖Ър╢Ър╖Кр╖Вр╖Тр╢н

*р╖Ар╢Ър╖Фр╢Ьр╢йр╖Ф:*
тАв р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Ър╢зр╖Тр╢▒р╖Тр╢▒р╖К р╢┤р╖Тр╢╗р╖Тр╖Гр╖Тр╢пр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕

*р╖Ер╢╕р╖П:*
тАв р╖Ер╢╕р╖П р╢Цр╖Вр╢░ р╢╕р╖Пр╢нр╖КтАНр╢╗р╖П р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗р╢║

*р╖Др╢пр╖Тр╖Гр╖Т:*
тАв р╢Ьр╖Кр╢╜р╖Пр╖Гр╖Кр╢Ьр╖Э р╢Ър╖Эр╢╕р╖П р╢┤р╢╗р╖Тр╢╕р╖Пр╢лр╢║
тАв APACHE II р╢╜р╢Ър╖Фр╢лр╖Ф

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗ р╖Ар╢╗р╖Кр╢Ьр╢║ р╖Гр╖Д р╢┤р╢╗р╖Пр╢╕р╖Тр╢нр╖Ур╢▒р╖К р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "BMI weight:70 height:170"`,

      ta: `ЁЯзо *роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпНроХро│рпН:*

*роЗродроп роиро╛ро│:*
тАв BMI - роЙроЯро▓рпН роиро┐ро▒рпИ роХрпБро▒ро┐ропрпАроЯрпНроЯрпБ роОрогрпН
тАв GFR - роХрпБро│рпЛрооро░рпБро▓ро░рпН ро╡роЯро┐рокрпНрокрпБ ро╡ро┐роХро┐родроорпН
тАв CHADS2 - рокроХрпНроХро╡ро╛род роЕрокро╛роп роородро┐рокрпНрокрпЖрогрпН

*роЪрпБро╡ро╛роЪ:*
тАв FEV1 роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН

*роЪро┐ро▒рпБроирпАро░роХ:*
тАв роХро┐ро░ро┐ропрпЗроЯрпНроЯро┐ройро┐ройрпН роЕро┤ро┐рокрпНрокрпБ

*роХрпБро┤роирпНродрпИ:*
тАв роХрпБро┤роирпНродрпИ рооро░рпБроирпНродрпБ роЕро│ро╡рпБ роХрогро┐рокрпНрокро╛ройрпН

*роЕро╡роЪро░:*
тАв роХро┐ро│ро╛ро╕рпНроХрпЛ роХрпЛрооро╛ роЕро│ро╡рпБроХрпЛро▓рпН
тАв APACHE II роородро┐рокрпНрокрпЖрогрпН

*рокропройрпНрокро╛роЯрпБ:* роХрогро┐рокрпНрокро╛ройрпН ро╡роХрпИ рооро▒рпНро▒рпБроорпН роЕро│ро╡рпБро░рпБроХрпНроХро│рпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "BMI weight:70 height:170"`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in calculator command:', error);
    return 'Sorry, calculator information is currently unavailable.';
  }
}

async function handleDrugsCommand(user, language) {
  try {
    const categories = Object.keys(advancedFeatures.sriLankanDrugDatabase);
    
    const response = {
      en: `ЁЯТК *Sri Lankan Drug Database:*

*Available Categories:*
тАв Antibiotics
тАв Analgesics
тАв Antihypertensives

*Usage:* Send category name to get drug list
Example: "antibiotics" or "analgesics"

*Features:*
тАв Dosage information
тАв Availability status
тАв Cost information
тАв Sri Lankan context`,

      si: `ЁЯТК *р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╢Цр╖Вр╢░ р╢пр╢нр╖Кр╢н р╢Ьр╢╢р╢йр╖Пр╖А:*

*р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╢Ър╖Пр╢лр╖Кр╢й:*
тАв р╢┤р╖КтАНр╢╗р╢нр╖Тр╢вр╖Ур╖Ар╢Ъ
тАв р╖Ар╖Ър╢пр╢▒р╖П р╢▒р╖Пр╖Бр╢Ъ
тАв р╢╗р╖Фр╢░р╖Тр╢╗ р╢┤р╖Ур╢йр╢▒ р╖Ар╖Тр╢╗р╖Эр╢░р╖У

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢Цр╖Вр╢░ р╢╜р╖Рр╢║р╖Тр╖Гр╖Кр╢нр╖Фр╖А р╢╜р╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢Ър╖Пр╢лр╖Кр╢й р╢▒р╢╕ р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "antibiotics" р╖Др╖Э "analgesics"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢╕р╖Пр╢нр╖КтАНр╢╗р╖П р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф
тАв р╢╜р╢╢р╖П р╢Ьр╢н р╖Др╖Рр╢Ър╖Т р╢нр╢нр╖Кр╖Ар╢║
тАв р╢┤р╖Тр╢╗р╖Тр╖Ар╖Рр╢║ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф
тАв р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║`,

      ta: `ЁЯТК *роЗро▓роЩрпНроХрпИ рооро░рпБроирпНродрпБ родро░ро╡рпБродрпНродро│роорпН:*

*роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп ро╡роХрпИроХро│рпН:*
тАв роирпБрогрпНрогрпБропро┐ро░рпН роОродро┐ро░рпНрокрпНрокро┐роХро│рпН
тАв ро╡ро▓ро┐ роиро┐ро╡ро╛ро░рогро┐роХро│рпН
тАв роЗро░родрпНрод роЕро┤рпБродрпНрод роОродро┐ро░рпНрокрпНрокро┐роХро│рпН

*рокропройрпНрокро╛роЯрпБ:* рооро░рпБроирпНродрпБ рокроЯрпНроЯро┐ропро▓рпИрокрпН рокрпЖро▒ ро╡роХрпИ рокрпЖропро░рпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "antibiotics" роЕро▓рпНро▓родрпБ "analgesics"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв рооро░рпБроирпНродро│ро╡рпБ родроХро╡ро▓рпН
тАв роХро┐роЯрпИрокрпНрокрпБ роиро┐ро▓рпИ
тАв роЪрпЖро▓ро╡рпБ родроХро╡ро▓рпН
тАв роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпН`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in drugs command:', error);
    return 'Sorry, drug database information is currently unavailable.';
  }
}

async function handleGuidelinesCommand(user, language) {
  try {
    const guidelines = Object.keys(advancedFeatures.clinicalGuidelines);
    
    const response = {
      en: `ЁЯУЛ *Clinical Guidelines (Sri Lankan Context):*

*Available Guidelines:*
тАв Dengue Fever
тАв Leptospirosis
тАв Tuberculosis

*Usage:* Send condition name to get guidelines
Example: "dengue fever" or "tuberculosis"

*Features:*
тАв Symptoms
тАв Investigations
тАв Management
тАв Sri Lankan context
тАв Local disease patterns`,

      si: `ЁЯУЛ *р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б (р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║):*

*р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ър╖Т р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б:*
тАв р╢йр╖Щр╢Вр╢Ьр╖Ф р╢Лр╢л
тАв р╢╜р╖Щр╢┤р╖Кр╢зр╖Ьр╖Гр╖Кр╢┤р╢║р╖Тр╢╗р╖Эр╖Гр╖Тр╖Гр╖К
тАв р╢║р╢Ър╖Вр╖Кр╢╕р╖П

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б р╢╜р╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢╗р╖Эр╢Ь р╢нр╢нр╖Кр╖Ар╢║р╖Ъ р╢▒р╢╕ р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "dengue fever" р╖Др╖Э "tuberculosis"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л
тАв р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╢л
тАв р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║
тАв р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║
тАв р╢пр╖Ър╖Бр╖Ур╢║ р╢╗р╖Эр╢Ь р╢╗р╢зр╖П`,

      ta: `ЁЯУЛ *рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН (роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпН):*

*роХро┐роЯрпИроХрпНроХроХрпНроХрпВроЯро┐роп ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:*
тАв роЯрпЖроЩрпНроХрпБ роХро╛ропрпНроЪрпНроЪро▓рпН
тАв ро▓рпЖрокрпНроЯрпЛро╕рпНрокрпИро░рпЛроЪро┐ро╕рпН
тАв роХро╛роЪроирпЛропрпН

*рокропройрпНрокро╛роЯрпБ:* ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпИрокрпН рокрпЖро▒ роиро┐ро▓рпИ рокрпЖропро░рпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "dengue fever" роЕро▓рпНро▓родрпБ "tuberculosis"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв роЕро▒ро┐роХрпБро▒ро┐роХро│рпН
тАв ро╡ро┐роЪро╛ро░рогрпИроХро│рпН
тАв роорпЗро▓ро╛рогрпНроорпИ
тАв роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпН
тАв роЙро│рпНро│рпВро░рпН роирпЛропрпН ро╡роЯро┐ро╡роЩрпНроХро│рпН`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in guidelines command:', error);
    return 'Sorry, clinical guidelines information is currently unavailable.';
  }
}

async function handleInteractionsCommand(user, language) {
  try {
    const response = {
      en: `ЁЯФН *Drug Interaction Checker:*

*Usage:* Send drug names separated by commas
Example: "Warfarin, Aspirin, Metformin"

*Features:*
тАв Drug-drug interactions
тАв Severity assessment
тАв Recommendations
тАв Alternative suggestions

*Common Interactions:*
тАв Warfarin + NSAIDs
тАв ACE inhibitors + NSAIDs
тАв Statins + Grapefruit
тАв Digoxin + Diuretics`,

      si: `ЁЯФН *р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╢Ъ:*

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢Ър╖Ьр╢╕р╖П р╖Ар╢╜р╖Тр╢▒р╖К р╖Ар╖Щр╢▒р╖К р╢Ър╢╗ р╢Цр╖Вр╢░ р╢▒р╢╕р╖К р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "Warfarin, Aspirin, Metformin"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢Цр╖Вр╢░-р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П
тАв р╢нр╢пр╢╢р╢п р╢Зр╢Ьр╢║р╖Ур╢╕
тАв р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б
тАв р╖Ар╖Тр╢Ър╢╜р╖Кр╢┤ р╢║р╖Эр╢вр╢▒р╖П

*р╢┤р╖Ьр╢пр╖Ф р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П:*
тАв Warfarin + NSAIDs
тАв ACE inhibitors + NSAIDs
тАв Statins + Grapefruit
тАв Digoxin + Diuretics`,

      ta: `ЁЯФН *рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБ роЪрпЛродройрпИропро╛ро│ро░рпН:*

*рокропройрпНрокро╛роЯрпБ:* роХрооро╛ро╡ро╛ро▓рпН рокро┐ро░ро┐роХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБроирпНродрпБ рокрпЖропро░рпНроХро│рпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "Warfarin, Aspirin, Metformin"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв рооро░рпБроирпНродрпБ-рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпН
тАв родрпАро╡ро┐ро░роорпН роородро┐рокрпНрокрпАроЯрпБ
тАв рокро░ро┐роирпНродрпБро░рпИроХро│рпН
тАв рооро╛ро▒рпНро▒рпБ рокро░ро┐роирпНродрпБро░рпИроХро│рпН

*рокрпКродрпБро╡ро╛рой родрпКроЯро░рпНрокрпБроХро│рпН:*
тАв Warfarin + NSAIDs
тАв ACE inhibitors + NSAIDs
тАв Statins + Grapefruit
тАв Digoxin + Diuretics`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in interactions command:', error);
    return 'Sorry, drug interaction information is currently unavailable.';
  }
}

async function handleDecisionCommand(user, language) {
  try {
    const response = {
      en: `ЁЯза *Clinical Decision Support:*

*Usage:* Send symptoms, age, gender
Example: "fever headache, 25, male"

*Features:*
тАв Differential diagnosis
тАв Recommended investigations
тАв Management strategies
тАв Age-specific considerations
тАв Gender-specific considerations
тАв Sri Lankan context

*Supported Symptoms:*
тАв Fever + Headache
тАв Chest Pain
тАв Shortness of Breath
тАв And more...`,

      si: `ЁЯза *р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢нр╖Ур╢╗р╢л р╖Гр╖Др╖Пр╢║:*

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л, р╖Ар╢║р╖Г, р╖Гр╖Кр╢нр╖КтАНр╢╗р╖У р╢┤р╖Фр╢╗р╖Фр╖В р╢╖р╖Пр╖Ар╢║ р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "fever headache, 25, male"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢Ер╖Ар╢Ър╢╜ р╢╗р╖Эр╢Ь р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║
тАв р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Бр╖Тр╢н р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╢л
тАв р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢л р╢Лр╢┤р╖Пр╢║
тАв р╖Ар╢║р╖Гр╖К р╢Ьр╢н р╖Ар╖Тр╖Бр╖Ър╖Вр╢ер╢нр╖П
тАв р╖Гр╖Кр╢нр╖КтАНр╢╗р╖У р╢┤р╖Фр╢╗р╖Фр╖В р╢╖р╖Пр╖Ар╢║ р╢Ьр╢н р╖Ар╖Тр╖Бр╖Ър╖Вр╢ер╢нр╖П
тАв р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║

*р╖Гр╖Др╖Пр╢║ р╖Ар╢▒ р╢╗р╖Эр╢Ь р╢╜р╢Ър╖Кр╖Вр╢л:*
тАв р╢Лр╢л + р╖Др╖Тр╖Гр╢╗р╢пр╢║
тАв р╢┤р╢┤р╖Фр╖Ар╖Ъ р╖Ар╖Ър╢пр╢▒р╖Пр╖А
тАв р╖Др╖Фр╖Гр╖Кр╢╕ р╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╢Ер╢┤р╖Др╖Гр╖Фр╢нр╖Пр╖А
тАв р╢нр╖Ар╢нр╖К...`,

      ta: `ЁЯза *рооро░рпБродрпНродрпБро╡ роорпБроЯро┐ро╡рпБ роЖродро░ро╡рпБ:*

*рокропройрпНрокро╛роЯрпБ:* роЕро▒ро┐роХрпБро▒ро┐роХро│рпН, ро╡ропродрпБ, рокро╛ро▓ро┐ройродрпНродрпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "fever headache, 25, male"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв ро╡рпЗро▒рпБрокроЯрпНроЯ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН
тАв рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┐роЪро╛ро░рогрпИроХро│рпН
тАв роорпЗро▓ро╛рогрпНроорпИ роЙродрпНродро┐роХро│рпН
тАв ро╡ропродрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокро░ро┐роЪрпАро▓ройрпИроХро│рпН
тАв рокро╛ро▓ро┐рой роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокро░ро┐роЪрпАро▓ройрпИроХро│рпН
тАв роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпН

*роЖродро░ро┐роХрпНроХрокрпНрокроЯрпБроорпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН:*
тАв роХро╛ропрпНроЪрпНроЪро▓рпН + родро▓рпИро╡ро▓ро┐
тАв рооро╛ро░рпНрокрпБ ро╡ро▓ро┐
тАв роорпВроЪрпНроЪрпБ родро┐рогро▒ро▓рпН
тАв роорпЗро▓рпБроорпН...`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in decision command:', error);
    return 'Sorry, clinical decision support information is currently unavailable.';
  }
}

async function handleEducationCommand(user, language) {
  try {
    const response = {
      en: `ЁЯУЪ *Patient Education Generator:*

*Usage:* Send diagnosis and language
Example: "diabetes, en" or "hypertension, si"

*Features:*
тАв Disease-specific education
тАв Lifestyle recommendations
тАв Complication prevention
тАв Multi-language support
тАв Sri Lankan context

*Supported Diagnoses:*
тАв Diabetes
тАв Hypertension
тАв And more...

*Languages:*
тАв English (en)
тАв Sinhala (si)
тАв Tamil (ta)`,

      si: `ЁЯУЪ *р╢╗р╖Эр╢Ьр╖У р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Лр╢нр╖Кр╢┤р╖Пр╢пр╢Ъ:*

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╢╗р╖Эр╢Ь р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢ар╢║ р╖Гр╖Д р╢╖р╖Пр╖Вр╖Пр╖А р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "diabetes, en" р╖Др╖Э "hypertension, si"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢╗р╖Эр╢Ь р╖Ар╖Тр╖Бр╖Ър╖Вр╖Тр╢н р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒р╢║
тАв р╢вр╖Ур╖Ар╢▒ р╢╗р╢зр╖П р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б
тАв р╢Ер╖Ар╢нр╖Ур╢╗р╖Кр╢лр╢нр╖П р╖Ар╖Рр╖Ер╖Рр╢Ър╖Кр╖Ар╖Ур╢╕
тАв р╢╢р╖Др╖Ф р╢╖р╖Пр╖Вр╖П р╖Гр╖Др╖Пр╢║
тАв р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖П р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║

*р╖Гр╖Др╖Пр╢║ р╖Ар╢▒ р╢╗р╖Эр╢Ь р╖Ар╖Тр╢▒р╖Тр╖Бр╖Кр╢а:*
тАв р╢╕р╢░р╖Фр╢╕р╖Ър╖Др╢║
тАв р╢╗р╖Фр╢░р╖Тр╢╗ р╢┤р╖Ур╢йр╢▒р╢║
тАв р╢нр╖Ар╢нр╖К...

*р╢╖р╖Пр╖Вр╖П:*
тАв р╢Йр╢Вр╢Ьр╖КтАНр╢╗р╖Ур╖Гр╖Т (en)
тАв р╖Гр╖Тр╢Вр╖Др╢╜ (si)
тАв р╢пр╖Щр╢╕р╖Е (ta)`,

      ta: `ЁЯУЪ *роирпЛропро╛ро│ро┐ роХро▓рпНро╡ро┐ роЙро░рпБро╡ро╛роХрпНроХро┐:*

*рокропройрпНрокро╛роЯрпБ:* роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН рооро▒рпНро▒рпБроорпН роорпКро┤ро┐ропрпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "diabetes, en" роЕро▓рпНро▓родрпБ "hypertension, ta"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв роирпЛропрпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роХро▓рпНро╡ро┐
тАв ро╡ро╛ро┤рпНроХрпНроХрпИ роорпБро▒рпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН
тАв роЪро┐роХрпНроХро▓рпНроХро│рпИродрпН родроЯрпБродрпНродро▓рпН
тАв рокро▓ роорпКро┤ро┐ роЖродро░ро╡рпБ
тАв роЗро▓роЩрпНроХрпИ роЪрпВро┤ро▓рпН

*роЖродро░ро┐роХрпНроХрокрпНрокроЯрпБроорпН роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпНроХро│рпН:*
тАв роирпАро░ро┐ро┤ро┐ро╡рпБ
тАв роЙропро░рпН роЗро░родрпНрод роЕро┤рпБродрпНродроорпН
тАв роорпЗро▓рпБроорпН...

*роорпКро┤ро┐роХро│рпН:*
тАв роЖроЩрпНроХро┐ро▓роорпН (en)
тАв роЪро┐роЩрпНроХро│роорпН (si)
тАв родрооро┐ро┤рпН (ta)`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in education command:', error);
    return 'Sorry, patient education information is currently unavailable.';
  }
}

async function handleEvidenceCommand(user, language) {
  try {
    const response = {
      en: `ЁЯФм *Evidence-Based Medicine Search:*

*Usage:* Send medical query
Example: "diabetes treatment" or "hypertension guidelines"

*Features:*
тАв Systematic reviews
тАв Clinical trials
тАв Clinical guidelines
тАв Treatment recommendations
тАв Latest evidence

*Supported Topics:*
тАв Diabetes management
тАв Hypertension treatment
тАв Cardiovascular disease
тАв And more...

*Sources:*
тАв PubMed
тАв Cochrane Reviews
тАв Clinical Guidelines
тАв Recent Trials`,

      si: `ЁЯФм *р╖Гр╖Пр╢Ър╖Кр╖Вр╖Т р╢╕р╢н р╢┤р╢пр╢▒р╢╕р╖К р╖Ар╖Ц р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╢пр╖КтАНр╢║р╖П р╖Гр╖Ьр╢║р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕:*

*р╢╖р╖Пр╖Ар╖Тр╢нр╢║:* р╖Ар╖Ыр╢пр╖КтАНр╢║ р╖Ар╖Тр╢╕р╖Гр╖Фр╢╕ р╢║р╖Ар╢▒р╖Кр╢▒
р╢Лр╢пр╖Пр╖Др╢╗р╢лр╢║: "diabetes treatment" р╖Др╖Э "hypertension guidelines"

*р╖Ар╖Тр╖Бр╖Ър╖Вр╖Пр╢Вр╢Ь:*
тАв р╢Ър╖КтАНр╢╗р╢╕р╖Пр╢▒р╖Фр╢Ър╖Цр╢╜ р╖Гр╢╕р╖Пр╢╜р╖Эр╢ар╢▒
тАв р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢Ер╢нр╖Кр╖Др╢пр╖П р╢╢р╖Рр╢╜р╖Ур╢╕р╖К
тАв р╖Гр╖Пр╢║р╢▒р╖Тр╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Б
тАв р╢┤р╖КтАНр╢╗р╢нр╖Тр╢Ър╖Пр╢╗ р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б
тАв р╢▒р╖Ар╢нр╢╕ р╖Гр╖Пр╢Ър╖Кр╖Вр╖Т

*р╖Гр╖Др╖Пр╢║ р╖Ар╢▒ р╢╕р╖Пр╢нр╖Шр╢Ър╖П:*
тАв р╢╕р╢░р╖Фр╢╕р╖Ър╖Д р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║
тАв р╢╗р╖Фр╢░р╖Тр╢╗ р╢┤р╖Ур╢йр╢▒ р╢┤р╖КтАНр╢╗р╢нр╖Тр╢Ър╖Пр╢╗
тАв р╖Др╖Шр╢пр╖КтАНр╢║ р╖Гр╢Вр╖Ар╖Др╢▒ р╢╗р╖Эр╢Ь
тАв р╢нр╖Ар╢нр╖К...

*р╢╕р╖Цр╢╜р╖Пр╖Бр╖КтАНр╢╗:*
тАв PubMed
тАв Cochrane Reviews
тАв Clinical Guidelines
тАв Recent Trials`,

      ta: `ЁЯФм *роЪро╛ройрпНро▒рпБ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рооро░рпБродрпНродрпБро╡родрпН родрпЗроЯро▓рпН:*

*рокропройрпНрокро╛роЯрпБ:* рооро░рпБродрпНродрпБро╡ ро╡ро┐ройро╛ро╡рпИ роЕройрпБрокрпНрокро╡рпБроорпН
роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБ: "diabetes treatment" роЕро▓рпНро▓родрпБ "hypertension guidelines"

*роЕроорпНроЪроЩрпНроХро│рпН:*
тАв роорпБро▒рпИропро╛рой роородро┐рокрпНрокро╛ропрпНро╡рпБроХро│рпН
тАв рооро░рпБродрпНродрпБро╡ роЪрпЛродройрпИроХро│рпН
тАв рооро░рпБродрпНродрпБро╡ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН
тАв роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН
тАв роЪроорпАрокродрпНродро┐роп роЪро╛ройрпНро▒рпБроХро│рпН

*роЖродро░ро┐роХрпНроХрокрпНрокроЯрпБроорпН родро▓рпИрокрпНрокрпБроХро│рпН:*
тАв роирпАро░ро┐ро┤ро┐ро╡рпБ роорпЗро▓ро╛рогрпНроорпИ
тАв роЙропро░рпН роЗро░родрпНрод роЕро┤рпБродрпНрод роЪро┐роХро┐роЪрпНроЪрпИ
тАв роЗродроп роиро╛ро│ роирпЛропрпН
тАв роорпЗро▓рпБроорпН...

*роорпВро▓роЩрпНроХро│рпН:*
тАв PubMed
тАв Cochrane Reviews
тАв Clinical Guidelines
тАв Recent Trials`
    };

    return response[language] || response.en;
  } catch (error) {
    logger.error('тЭМ Error in evidence command:', error);
    return 'Sorry, evidence-based medicine information is currently unavailable.';
  }
}

// AI Agent Command Handlers

async function handleAgentCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.initializeAgent(user.uid || user.id, {
      name: user.displayName || user.firstName || 'Medical Student',
      email: user.email || '',
      phone: user.phone || '',
      telegramId: user.telegramId || user.id,
      studyLevel: 'intermediate',
      specialization: 'general'
    });

    const responses = {
      en: `ЁЯдЦ *AI Agent Initialized Successfully!*

*Agent ID:* ${agent.id}
*Student:* ${agent.userData.name}
*Status:* ${agent.status}

*Your AI Agent Can:*
тАв ЁЯУЭ Add and manage tasks with automatic alerts
тАв тП░ Set intelligent reminders
тАв ЁЯУК Track your study progress
тАв ЁЯЪи Handle emergency situations
тАв ЁЯТК Access drug database and interactions
тАв ЁЯзо Use medical calculators
тАв ЁЯУЛ Get clinical guidelines
тАв ЁЯОн Practice with patient simulations

*Quick Access Buttons Below:* ЁЯСЗ

Your agent is now active and ready to help! ЁЯЪА`,

      si: `ЁЯдЦ *AI Agent Successfully Initialized!*

*Agent ID:* ${agent.id}
*Student:* ${agent.userData.name}
*Status:* ${agent.status}

*Your AI Agent Can:*
тАв ЁЯУЭ Add and manage tasks with automatic alerts
тАв тП░ Set intelligent reminders
тАв ЁЯУК Track your study progress
тАв ЁЯЪи Handle emergency situations
тАв ЁЯТК Access drug database and interactions
тАв ЁЯзо Use medical calculators
тАв ЁЯУЛ Get clinical guidelines
тАв ЁЯОн Practice with patient simulations

*Quick Access with Buttons Below:* ЁЯСЗ

Your agent is now active and ready to help! ЁЯЪА`,

      ta: `ЁЯдЦ *AI Agent Successfully Initialized!*

*Agent ID:* ${agent.id}
*Student:* ${agent.userData.name}
*Status:* ${agent.status}

*Your AI Agent Can:*
тАв ЁЯУЭ Add and manage tasks with automatic alerts
тАв тП░ Set intelligent reminders
тАв ЁЯУК Track your study progress
тАв ЁЯЪи Handle emergency situations
тАв ЁЯТК Access drug database and interactions
тАв ЁЯзо Use medical calculators
тАв ЁЯУЛ Get clinical guidelines
тАв ЁЯОн Practice with patient simulations

*Quick Access with Buttons Below:* ЁЯСЗ

Your agent is now active and ready to help! ЁЯЪА`
    };

    // Create inline keyboard with quick access buttons
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: 'ЁЯУЭ Add Task', callback_data: 'add_task' },
          { text: 'ЁЯУЛ My Tasks', callback_data: 'my_tasks' },
          { text: 'тП░ My Alerts', callback_data: 'my_alerts' }
        ],
        [
          { text: 'ЁЯУК Progress', callback_data: 'progress' },
          { text: 'ЁЯУЭ Add Note', callback_data: 'add_note' },
          { text: 'ЁЯУЦ My Notes', callback_data: 'my_notes' }
        ],
        [
          { text: 'ЁЯТК Drug Info', callback_data: 'drugs' },
          { text: 'ЁЯзо Calculator', callback_data: 'calculator' },
          { text: 'ЁЯУЛ Guidelines', callback_data: 'guidelines' }
        ],
        [
          { text: 'ЁЯОн Simulation', callback_data: 'simulation' },
          { text: 'ЁЯЦея╕П Dashboard', callback_data: 'dashboard' },
          { text: 'ЁЯУЦ User Guide', callback_data: 'guide' }
        ]
      ]
    };

    return {
      text: responses[language] || responses.en,
      reply_markup: inlineKeyboard
    };
  } catch (error) {
    logger.error('тЭМ Error in agent command:', error);
    return 'Sorry, could not initialize AI agent. Please try again.';
  }
}

async function handleTasksCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid || user.id);
    const tasks = agent.currentTasks || [];

    if (tasks.length === 0) {
      const responses = {
        en: 'ЁЯУЭ *Your Tasks*\n\nNo tasks found. Add your first task!\n\nTry: "add task: study cardiology"',
        si: 'ЁЯУЭ *р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К*\n\nр╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║. р╢Фр╢╢р╖Ъ р╢┤р╖Ер╢╕р╖Ф р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒!\n\nр╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒: "add task: study cardiology"',
        ta: 'ЁЯУЭ *роЙроЩрпНроХро│рпН рокрогро┐роХро│рпН*\n\nрокрогро┐роХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН роорпБродро▓рпН рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН!\n\nроорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН: "add task: study cardiology"'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'ЁЯУЭ *р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К*\n\n' :
                   language === 'ta' ? 'ЁЯУЭ *роЙроЩрпНроХро│рпН рокрогро┐роХро│рпН*\n\n' :
                   'ЁЯУЭ *Your Tasks*\n\n';

    tasks.forEach((task, index) => {
      const status = task.status === 'completed' ? 'тЬЕ' : 'тП│';
      const priority = task.priority === 'high' ? 'ЁЯФ┤' : task.priority === 'medium' ? 'ЁЯЯб' : 'ЁЯЯв';
      
      response += `${index + 1}. ${status} ${priority} *${task.title}*\n`;
      response += `   ЁЯУЕ ${new Date(task.createdAt).toLocaleDateString()}\n`;
      if (task.deadline) {
        response += `   тП░ Due: ${new Date(task.deadline).toLocaleDateString()}\n`;
      }
      response += `   ЁЯУВ ${task.category}\n\n`;
    });

    response += language === 'si' ? 
      '*р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕р╢з: "add task: [title]"*' :
      language === 'ta' ? 
      '*рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХ: "add task: [title]"*' :
      '*To add a task: "add task: [title]"*';

    return response;
  } catch (error) {
    logger.error('тЭМ Error in tasks command:', error);
    return 'Sorry, could not retrieve tasks.';
  }
}

async function handleAddTaskCommand(user, language) {
  try {
    const responses = {
      en: `ЁЯУЭ *Add New Task*

*Format:* "add task: [title] [optional: deadline]"

*Examples:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*I'll automatically:*
тАв Set appropriate reminders
тАв Track your progress
тАв Send alerts at the right time

Just type your task naturally!`,

      si: `ЁЯУЭ *р╢▒р╖А р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢Ър╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒*

*р╢Жр╢Ър╖Шр╢нр╖Тр╢║:* "add task: [title] [р╖Ар╖Тр╢Ър╢╜р╖Кр╢┤: deadline]"

*р╢Лр╢пр╖Пр╖Др╢╗р╢л:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*р╢╕р╢╕ р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║р╖А:*
тАв р╖Гр╖Фр╢пр╖Фр╖Гр╖Ф р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв р╢Фр╢╢р╖Ъ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К
тАв р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢║р╖Ар╢▒р╖Кр╢▒р╢╕р╖К

р╢Фр╢╢р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╖Кр╖Ар╖Пр╢╖р╖Пр╖Ар╖Тр╢Ър╖А р╢зр╢║р╖Тр╢┤р╖К р╢Ър╢╗р╢▒р╖Кр╢▒!`,

      ta: `ЁЯУЭ *рокрпБродро┐роп рокрогро┐ропрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН*

*ро╡роЯро┐ро╡роорпН:* "add task: [title] [ро╡ро┐ро░рпБрокрпНрок: deadline]"

*роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпН:*
тАв "add task: study cardiology"
тАв "add task: review ECG guidelines tomorrow"
тАв "add task: practice patient history taking in 2 days"

*роиро╛ройрпН родро╛ройро╛роХ:*
тАв рокрпКро░рпБродрпНродрооро╛рой роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЕроорпИрокрпНрокрпЗройрпН
тАв роЙроЩрпНроХро│рпН роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐рокрпНрокрпЗройрпН
тАв роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЕройрпБрокрпНрокрпБро╡рпЗройрпН

роЙроЩрпНроХро│рпН рокрогро┐ропрпИ роЗропро▒рпНроХрпИропро╛роХ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН!`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in add task command:', error);
    return 'Sorry, could not process task addition.';
  }
}

async function handleAlertsCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid || user.id);
    const alerts = await medicalAgentSystem.getPendingAlerts(user.uid || user.id);

    if (alerts.length === 0) {
      const responses = {
        en: 'тП░ *Your Alerts*\n\nNo pending alerts. All caught up! ЁЯОЙ',
        si: 'тП░ *р╢Фр╢╢р╖Ъ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К*\n\nр╢Ер╢┤р╖Ър╢Ър╖Кр╖Вр╖Тр╢н р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К р╢▒р╖Рр╢н. р╖Гр╖Тр╢║р╢╜р╖Кр╢╜ р╢Ер╢╜р╖Фр╢нр╖К! ЁЯОЙ',
        ta: 'тП░ *роЙроЩрпНроХро│рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН*\n\nроиро┐ро▓рпБро╡рпИропро┐ро▓рпН роЙро│рпНро│ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ. роОро▓рпНро▓ро╛роорпН рокрпБродро┐ропродрпБ! ЁЯОЙ'
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'тП░ *р╢Фр╢╢р╖Ъ р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К*\n\n' :
                   language === 'ta' ? 'тП░ *роЙроЩрпНроХро│рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН*\n\n' :
                   'тП░ *Your Alerts*\n\n';

    alerts.forEach((alert, index) => {
      const priority = alert.priority === 'high' ? 'ЁЯФ┤' : alert.priority === 'medium' ? 'ЁЯЯб' : 'ЁЯЯв';
      
      response += `${index + 1}. ${priority} *${alert.title}*\n`;
      response += `   ЁЯУЭ ${alert.message}\n`;
      response += `   тП░ ${new Date(alert.scheduledTime).toLocaleString()}\n\n`;
    });

    return response;
  } catch (error) {
    logger.error('тЭМ Error in alerts command:', error);
    return 'Sorry, could not retrieve alerts.';
  }
}

async function handleProgressCommand(user, language) {
  try {
    const agent = await medicalAgentSystem.getAgent(user.uid || user.id);
    const progress = agent.studyProgress;
    const performance = agent.performance;

    const responses = {
      en: `ЁЯУК *Study Progress Report*

*Completion Rate:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*Efficiency:* ${Math.round(progress.efficiency * 100)}%
*Task Completion:* ${Math.round(performance.taskCompletionRate * 100)}%
*Study Consistency:* ${Math.round(performance.studyConsistency * 100)}%

*Last Study Session:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'Not recorded'}

*Recommendations:*
тАв Keep up the good work! ЁЯУЪ
тАв Try to maintain consistent study hours
тАв Review difficult topics regularly
тАв Practice with patient simulations

Use "add task" to set new study goals!`,

      si: `ЁЯУК *р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Т р╖Ар╖Пр╢╗р╖Кр╢нр╖Пр╖А*

*р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖П р╢Ер╢▒р╖Фр╢┤р╖Пр╢нр╢║:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*р╢Ър╖Пр╢╗р╖Кр╢║р╢Ър╖Кр╖Вр╢╕р╢нр╖Пр╖А:* ${Math.round(progress.efficiency * 100)}%
*р╢Ър╖Пр╢╗р╖Кр╢║ р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢лр╢нр╖Пр╖А:* ${Math.round(performance.taskCompletionRate * 100)}%
*р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ер╢▒р╖Фр╢Ър╖Цр╢╜р╢нр╖Пр╖А:* ${Math.round(performance.studyConsistency * 100)}%

*р╢Ер╖Ар╖Гр╢▒р╖К р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╖Гр╖Рр╖Гр╖Тр╢║:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'Record р╢Ър╢╗ р╢▒р╖Рр╢н'}

*р╢▒р╖Тр╢╗р╖Кр╢пр╖Ър╖Б:*
тАв р╖Др╖Ьр╢│ р╖Ар╖Рр╢й р╢пр╖Тр╢Ьр╢зр╢╕ р╢Ър╢╗р╢Ьр╖Щр╢▒ р╢║р╢▒р╖Кр╢▒! ЁЯУЪ
тАв р╢Ер╢▒р╖Фр╢Ър╖Цр╢╜ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢┤р╖Рр╢║ р╢┤р╖Ар╢нр╖Кр╖Ар╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢Лр╢нр╖Кр╖Гр╖Пр╖Д р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢пр╖Фр╖Вр╖Кр╢Ър╢╗ р╢╕р╖Пр╢нр╖Шр╢Ър╖П р╢▒р╖Тр╢нр╖Тр╢┤р╢нр╖П р╖Гр╢╕р╖Пр╢╜р╖Эр╢ар╢▒р╢║ р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢╗р╖Эр╢Ьр╖У р╖Гр╖Тр╢╕р╖Тр╢║р╖Фр╢╜р╖Ър╖Вр╢▒ р╖Гр╢╕р╢Я р╢┤р╖Фр╖Др╖Фр╢лр╖Ф р╖Ар╢▒р╖Кр╢▒

р╢▒р╖А р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Йр╢╜р╢Ър╖Кр╢Ъ р╖Гр╢Ър╖Гр╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з "add task" р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒!`,

      ta: `ЁЯУК *рокроЯро┐рокрпНрокрпБ роорпБройрпНройрпЗро▒рпНро▒ роЕро▒ро┐роХрпНроХрпИ*

*роорпБроЯро┐ро╡рпБ ро╡ро┐роХро┐родроорпН:* ${progress.completedTopics}/${progress.totalTopics} (${Math.round((progress.completedTopics / Math.max(progress.totalTopics, 1)) * 100)}%)
*родро┐ро▒ройрпН:* ${Math.round(progress.efficiency * 100)}%
*рокрогро┐ роорпБроЯро┐ро╡рпБ:* ${Math.round(performance.taskCompletionRate * 100)}%
*рокроЯро┐рокрпНрокрпБ роиро┐ро▓рпИрокрпНрокро╛роЯрпБ:* ${Math.round(performance.studyConsistency * 100)}%

*роХроЯрпИроЪро┐ рокроЯро┐рокрпНрокрпБ роЕрооро░рпНро╡рпБ:* ${progress.lastStudySession ? new Date(progress.lastStudySession).toLocaleString() : 'рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ'}

*рокро░ро┐роирпНродрпБро░рпИроХро│рпН:*
тАв роиро▓рпНро▓ ро╡рпЗро▓рпИропрпИродрпН родрпКроЯро░рпНроирпНродрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН! ЁЯУЪ
тАв роиро┐ро▓рпИропро╛рой рокроЯро┐рокрпНрокрпБ роорогро┐роирпЗро░роЩрпНроХро│рпИ рокро░ро╛рооро░ро┐роХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН
тАв роХроЯро┐ройрооро╛рой родро▓рпИрокрпНрокрпБроХро│рпИ родро╡ро▒ро╛рооро▓рпН роородро┐рокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН
тАв роирпЛропро╛ро│ро┐ роЪро┐роорпБро▓рпЗро╖ройрпНроХро│рпБроЯройрпН рокропро┐ро▒рпНроЪро┐ рокрпЖро▒ро╡рпБроорпН

рокрпБродро┐роп рокроЯро┐рокрпНрокрпБ роЗро▓роХрпНроХрпБроХро│рпИ роЕроорпИроХрпНроХ "add task" роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН!`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in progress command:', error);
    return 'Sorry, could not retrieve progress.';
  }
}

// Natural Language Handlers

async function handleNaturalLanguageTaskCreation(message, user, language) {
  try {
    // Extract task details from natural language - multiple patterns
    let taskTitle = '';
    let scheduledTime = null;
    
    // Pattern 1: "add task: study cardiology"
    const taskMatch1 = message.match(/add task:\s*(.+)/i) || 
                      message.match(/set task:\s*(.+)/i) || 
                      message.match(/create task:\s*(.+)/i);
    
    // Pattern 2: "study cardiology at 5.29 PM"
    const taskMatch2 = message.match(/study\s+(.+?)\s+at\s+(.+)/i) ||
                      message.match(/study\s+(.+?)\s+on\s+(.+)/i) ||
                      message.match(/study\s+(.+?)\s+by\s+(.+)/i);
    
    // Pattern 3: "review ECG tomorrow"
    const taskMatch3 = message.match(/review\s+(.+?)\s+(.+)/i) ||
                      message.match(/practice\s+(.+?)\s+(.+)/i) ||
                      message.match(/read\s+(.+?)\s+(.+)/i);
    
    if (taskMatch1) {
      taskTitle = taskMatch1[1].trim();
    } else if (taskMatch2) {
      taskTitle = `Study ${taskMatch2[1].trim()}`;
      scheduledTime = this.parseTime(taskMatch2[2].trim());
    } else if (taskMatch3) {
      taskTitle = `${taskMatch3[1].trim()} - ${taskMatch3[2].trim()}`;
      scheduledTime = this.parseTime(taskMatch3[2].trim());
    } else {
      // If no pattern matches, treat the whole message as task title
      taskTitle = message.trim();
    }
    
    // Parse time if provided
    const parseTime = (timeStr) => {
      try {
        // Handle "5.29 PM" format
        if (timeStr.match(/\d+\.\d+\s*(AM|PM)/i)) {
          const [time, period] = timeStr.split(/\s*(AM|PM)/i);
          const [hours, minutes] = time.split('.');
          let hour = parseInt(hours);
          if (period.toUpperCase() === 'PM' && hour !== 12) hour += 12;
          if (period.toUpperCase() === 'AM' && hour === 12) hour = 0;
          
          const date = new Date();
          date.setHours(hour, parseInt(minutes), 0, 0);
          return date;
        }
        
        // Handle "tomorrow" format
        if (timeStr.toLowerCase().includes('tomorrow')) {
          const date = new Date();
          date.setDate(date.getDate() + 1);
          return date;
        }
        
        // Handle "next week" format
        if (timeStr.toLowerCase().includes('next week')) {
          const date = new Date();
          date.setDate(date.getDate() + 7);
          return date;
        }
        
        return null;
      } catch (error) {
        return null;
      }
    };
    
    // Set scheduled time
    const taskScheduledTime = scheduledTime || parseTime(message) || new Date();
    
    // Add task with automatic alerts
    await medicalAgentSystem.addTaskWithAlerts(user.uid, {
      title: taskTitle,
      description: `Task created via Telegram: ${taskTitle}`,
      category: 'study',
      priority: 'medium',
      scheduledTime: taskScheduledTime,
      deadline: new Date(taskScheduledTime.getTime() + 24 * 60 * 60 * 1000) // 24 hours from scheduled time
    });

    const responses = {
      en: `тЬЕ *Task Added Successfully!*

*Task:* ${taskTitle}
*Status:* Active
*Alerts:* Scheduled automatically

I'll remind you at the right time! тП░

*Next steps:*
тАв Use /tasks to view all tasks
тАв Use /alerts to check reminders
тАв Use /progress to track your study`,

      si: `тЬЕ *р╢Ър╖Пр╢╗р╖Кр╢║р╢║ р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╖А р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗р╢▒ р╢╜р╢пр╖У!*

*р╢Ър╖Пр╢╗р╖Кр╢║р╢║:* ${taskTitle}
*р╢нр╢нр╖Кр╖Ар╢║:* р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У
*р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К:* р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║р╖А р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У

р╢╕р╢╕ р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! тП░

*р╢Кр╖Ер╢Я р╢┤р╖Тр╢║р╖Ар╢╗:*
тАв р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╢╢р╖Рр╢╜р╖Ур╢╕р╢з /tasks р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /alerts р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒
тАв р╢Фр╢╢р╖Ъ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒р╢║ р╢▒р╖Тр╢╗р╖Ур╢Ър╖Кр╖Вр╢лр╢║ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /progress р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒`,

      ta: `тЬЕ *рокрогро┐ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ!*

*рокрогро┐:* ${taskTitle}
*роиро┐ро▓рпИ:* роЪрпЖропро▓ро┐ро▓рпН
*роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:* родро╛ройро╛роХ родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯродрпБ

роиро╛ройрпН роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН! тП░

*роЕроЯрпБродрпНрод рокроЯро┐роХро│рпН:*
тАв роЕройрпИродрпНродрпБ рокрогро┐роХро│рпИропрпБроорпН роХро╛рог /tasks роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
тАв роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХ /alerts роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
тАв роЙроЩрпНроХро│рпН рокроЯро┐рокрпНрокрпИ роХрогрпНроХро╛рогро┐роХрпНроХ /progress роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in natural language task creation:', error);
    return 'Sorry, could not create task. Please try again.';
  }
}

async function handleNaturalLanguageReminder(message, user, language) {
  try {
    // Extract reminder details from natural language
    const reminderMatch = message.match(/remind me\s+(.+)/i) || 
                         message.match(/set reminder\s+(.+)/i) || 
                         message.match(/alert me\s+(.+)/i);
    
    if (!reminderMatch) {
      const responses = {
        en: 'тП░ *Reminder Setup*\n\nPlease specify your reminder:\n"remind me to [what you want to be reminded about]"',
        si: 'тП░ *р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╖Рр╢Ър╖Гр╖Фр╢╕*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"remind me to [р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢пр╖Ъ]"',
        ta: 'тП░ *роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН роЕроорпИрокрпНрокрпБ*\n\nроЙроЩрпНроХро│рпН роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"remind me to [роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯ ро╡ро┐ро░рпБроорпНрокрпБро╡родрпБ]"'
      };
      return responses[language] || responses.en;
    }

    const reminderText = reminderMatch[1].trim();
    
    // Add reminder as a task
    await medicalAgentSystem.addTaskWithAlerts(user.uid, {
      title: `Reminder: ${reminderText}`,
      description: `Reminder set via Telegram: ${reminderText}`,
      category: 'reminder',
      priority: 'high',
      scheduledTime: new Date(),
      deadline: new Date(Date.now() + 2 * 60 * 60 * 1000) // 2 hours from now
    });

    const responses = {
      en: `тП░ *Reminder Set Successfully!*

*Reminder:* ${reminderText}
*Status:* Active
*Alerts:* Scheduled

I'll remind you at the right time! ЁЯФФ`,

      si: `тП░ *р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К р╖Гр╖Пр╢╗р╖Кр╢ор╢Ър╖А р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У!*

*р╢╕р╢нр╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╖К:* ${reminderText}
*р╢нр╢нр╖Кр╖Ар╢║:* р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╖У
*р╢Ер╢▒р╢нр╖Фр╢╗р╖Ф р╢Зр╢Яр╖Ар╖Ур╢╕р╖К:* р╖Гр╢Ър╖Гр╖К р╢Ър╢╗р╢▒ р╢╜р╢пр╖У

р╢╕р╢╕ р╢▒р╖Тр╖Ар╖Рр╢╗р╢пр╖Т р╖Ар╖Ър╢╜р╖Пр╖Ар╢з р╢Фр╢╢р╢з р╢╕р╢нр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╢╕р╖К! ЁЯФФ`,

      ta: `тП░ *роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЕроорпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ!*

*роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпН:* ${reminderText}
*роиро┐ро▓рпИ:* роЪрпЖропро▓ро┐ро▓рпН
*роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:* родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯродрпБ

роиро╛ройрпН роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роиро┐ройрпИро╡рпВроЯрпНроЯрпБро╡рпЗройрпН! ЁЯФФ`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in natural language reminder:', error);
    return 'Sorry, could not set reminder. Please try again.';
  }
}

async function handleNaturalLanguageDrugInteraction(message, user, language) {
  try {
    // Extract drug names from natural language
    const interactionMatch = message.match(/check.*interaction.*between\s+(.+)/i) || 
                            message.match(/drug.*interaction.*between\s+(.+)/i) || 
                            message.match(/medication.*interaction.*between\s+(.+)/i);
    
    if (!interactionMatch) {
      const responses = {
        en: 'ЁЯТК *Drug Interaction Check*\n\nPlease specify drugs:\n"check interaction between [drug1] and [drug2]"',
        si: 'ЁЯТК *р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖Пр╖А*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Цр╖Вр╢░ р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"check interaction between [drug1] and [drug2]"',
        ta: 'ЁЯТК *рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБ роЪрпЛродройрпИ*\n\nрооро░рпБроирпНродрпБроХро│рпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"check interaction between [drug1] and [drug2]"'
      };
      return responses[language] || responses.en;
    }

    const drugsText = interactionMatch[1];
    const drugs = drugsText.split(/\s+and\s+|\s*,\s*/i).map(d => d.trim());
    
    if (drugs.length < 2) {
      return 'Please specify at least two drugs to check interactions.';
    }

    // Use advanced features to check interactions
    const interaction = advancedFeatures.checkDrugInteractions(drugs);
    
    let response = language === 'si' ? 'ЁЯТК *р╢Цр╖Вр╢░ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖Пр╖А*\n\n' :
                   language === 'ta' ? 'ЁЯТК *рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБ роЪрпЛродройрпИ*\n\n' :
                   'ЁЯТК *Drug Interaction Check*\n\n';

    response += `*Drugs:* ${drugs.join(' + ')}\n`;
    response += `*Severity:* ${interaction.severity}\n`;
    response += `*Mechanism:* ${interaction.mechanism}\n`;
    response += `*Recommendation:* ${interaction.recommendation}\n`;

    return response;
  } catch (error) {
    logger.error('тЭМ Error in natural language drug interaction:', error);
    return 'Sorry, could not check drug interactions. Please try again.';
  }
}

async function handleNaturalLanguageCalculator(message, user, language) {
  try {
    // Extract calculator parameters from natural language
    const calcMatch = message.match(/calculate\s+(bmi|gfr|chads2)\s+(.+)/i);
    
    if (!calcMatch) {
      const responses = {
        en: 'ЁЯзо *Medical Calculator*\n\nPlease specify calculation:\n"calculate BMI weight 70kg height 1.75m"',
        si: 'ЁЯзо *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢Ъ р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗*\n\nр╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Ьр╢лр╢▒р╢║ р╢Ър╖Тр╢╗р╖Ур╢╕ р╖Гр╢│р╖Др╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒:\n"calculate BMI weight 70kg height 1.75m"',
        ta: 'ЁЯзо *рооро░рпБродрпНродрпБро╡ роХрогро┐рокрпНрокро╛ройрпН*\n\nроХрогроХрпНроХрпАроЯрпНроЯрпИроХрпН роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпН:\n"calculate BMI weight 70kg height 1.75m"'
      };
      return responses[language] || responses.en;
    }

    const calculatorType = calcMatch[1].toLowerCase();
    const params = calcMatch[2].trim();
    
    let result;
    
    if (calculatorType === 'bmi') {
      const bmiMatch = params.match(/weight\s+(\d+(?:\.\d+)?)\s*kg.*height\s+(\d+(?:\.\d+)?)\s*m/i);
      if (bmiMatch) {
        const weight = parseFloat(bmiMatch[1]);
        const height = parseFloat(bmiMatch[2]);
        result = advancedFeatures.medicalCalculators.bmi(weight, height);
      }
    }
    
    if (!result) {
      return 'Please provide valid parameters for the calculation.';
    }

    let response = language === 'si' ? 'ЁЯзо *р╖Ар╖Ыр╢пр╖КтАНр╢║ р╢Ьр╢лр╢▒р╢║ р╢Ър╖Тр╢╗р╖Ур╢╕*\n\n' :
                   language === 'ta' ? 'ЁЯзо *рооро░рпБродрпНродрпБро╡ роХрогроХрпНроХрпАроЯрпБ*\n\n' :
                   'ЁЯзо *Medical Calculation*\n\n';

    response += `*Type:* ${calculatorType.toUpperCase()}\n`;
    response += `*Result:* ${result.result}\n`;
    if (result.interpretation) {
      response += `*Interpretation:* ${result.interpretation}\n`;
    }

    return response;
  } catch (error) {
    logger.error('тЭМ Error in natural language calculator:', error);
    return 'Sorry, could not perform calculation. Please try again.';
  }
}

// User guide command handler
async function handleUserGuideCommand(user, language) {
  try {
    const studentName = user.userData?.name ? `Dr. ${user.userData.name}` : 'Student';
    
    const responses = {
      en: `ЁЯУЦ *StethoLink AI - Comprehensive User Guide*

*Welcome, ${studentName}!*

**ЁЯОп How to Use StethoLink AI:**

**1я╕ПтГг Getting Started:**
тАв Send /start to begin
тАв Provide your name for personalized experience
тАв Send /agent to initialize your personal AI agent
тАв Use /guide anytime to see this guide

**2я╕ПтГг Study Management Commands:**
```
тЬЕ "Study cardiology at 6 PM"
тЬЕ "Add task: review ECG cases tomorrow"
тЬЕ "Remind me to practice drug calculations"
тЬЕ "Set reminder for cardiology exam in 2 days"
```

**3я╕ПтГг Note Management Commands:**
```
тЬЕ "add note: ECG interpretation basics"
тЬЕ "my notes" - View all notes
тЬЕ "search notes: cardiology" - Find specific notes
```

**4я╕ПтГг Medical Tool Commands:**
```
тЬЕ "Calculate BMI for 70kg 1.75m"
тЬЕ "Check drug interaction between warfarin and aspirin"
тЬЕ "Find information about paracetamol"
тЬЕ "Show me antibiotics for UTI"
```

**5я╕ПтГг Clinical Practice Commands:**
```
тЬЕ "Start patient simulation"
тЬЕ "Show me emergency protocols"
тЬЕ "Practice cardiology cases"
тЬЕ "I want to practice ECG interpretation"
```

**6я╕ПтГг Progress & Dashboard Commands:**
```
тЬЕ "Show my study progress"
тЬЕ "What tasks do I have today?"
тЬЕ "Check my alerts"
тЬЕ "dashboard" - Open web dashboard
```

**7я╕ПтГг Natural Language Examples:**
```
тЬЕ "I need to study pharmacology tonight"
тЬЕ "Calculate my GFR if creatinine 1.2, weight 65kg, age 25, male"
тЬЕ "Check warfarin and aspirin interaction"
тЬЕ "Start a patient simulation"
```

**ЁЯФФ Enhanced Alert System:**
тАв Automatic scheduling when you set tasks
тАв Sound notifications (different for each priority)
тАв Voice reminders
тАв Telegram alerts with action buttons
тАв Dashboard notifications

**ЁЯУЭ Interactive Note System:**
тАв Step-by-step guided note creation
тАв Categories: anatomy, physiology, pathology, etc.
тАв Tags for easy searching
тАв Priority levels
тАв Full-text search

**ЁЯЦея╕П Dashboard Features:**
тАв Full note management
тАв Task tracking
тАв Medical calculators
тАв Drug database
тАв Clinical guidelines
тАв Patient simulations
тАв Progress analytics

**ЁЯОУ Professional Features:**
тАв Sri Lankan drug database
тАв National guidelines
тАв Multi-language support (English, Sinhala, Tamil)
тАв Evidence-based protocols
тАв Clinical decision support

**ЁЯТб Tips for Best Experience:**
тАв Type naturally like ChatGPT
тАв Use medical terminology
тАв Be specific with times and dates
тАв Use categories for notes
тАв Check dashboard for full features

**ЁЯУЮ Need Help?**
тАв Type "help" for quick commands
тАв Type "dashboard" for full web interface
тАв Type "my progress" to see your study analytics

*This is a professional medical assistant designed for Sri Lankan medical students.*`,
      si: `ЁЯУЦ *StethoLink AI - р╖Гр╖Ар╖Тр╖Гр╖Кр╢нр╢╗р╖Пр╢нр╖Кр╢╕р╢Ъ р╢┤р╢╗р╖Тр╖Бр╖Ур╢╜р╢Ъ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Бр╢║*

*р╖Гр╖Пр╢пр╢╗р╢║р╖Щр╢▒р╖К р╢┤р╖Тр╖Ер╖Тр╢Ьр╢▒р╖Тр╢╕р╖Ф, ${studentName}!*

**ЁЯОп StethoLink AI р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п:**

**1я╕ПтГг р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╖Тр╢╗р╖Ур╢╕:**
тАв р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /start р╢║р╖Ар╢▒р╖Кр╢▒
тАв р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ р╢Ер╢нр╖Кр╢пр╖Рр╢Ър╖Ур╢╕р╢Ър╖К р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢▒р╢╕ р╖Гр╢┤р╢║р╢▒р╖Кр╢▒
тАв р╢Фр╢╢р╖Ъ р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ AI agent р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╖Тр╢╗р╖Ур╢╕р╢з /agent р╢║р╖Ар╢▒р╖Кр╢▒
тАв р╢╕р╖Щр╢╕ р╢╕р╖Пр╢╗р╖Кр╢Ьр╖Эр╢┤р╢пр╖Ър╖Бр╢║ р╢╢р╖Рр╢╜р╖Ур╢╕р╢з /guide р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒`,
      ta: `ЁЯУЦ *StethoLink AI - ро╡ро┐ро░ро┐ро╡ро╛рой рокропройро░рпН ро╡ро┤ро┐роХро╛роЯрпНроЯро┐*

*ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН, ${studentName}!*

**ЁЯОп StethoLink AI роР роОро╡рпНро╡ро╛ро▒рпБ рокропройрпНрокроЯрпБродрпНродрпБро╡родрпБ:**

**1я╕ПтГг родрпКроЯроЩрпНроХрпБродро▓рпН:**
тАв родрпКроЯроЩрпНроХ /start роЕройрпБрокрпНрокро╡рпБроорпН
тАв родройро┐рокрпНрокроЯрпНроЯ роЕройрпБрокро╡родрпНродро┐ро▒рпНроХрпБ роЙроЩрпНроХро│рпН рокрпЖропро░рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН
тАв роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ AI agent роРродрпН родрпКроЯроЩрпНроХ /agent роЕройрпБрокрпНрокро╡рпБроорпН
тАв роЗроирпНрод ро╡ро┤ро┐роХро╛роЯрпНроЯро┐ропрпИрокрпН рокро╛ро░рпНроХрпНроХ /guide роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in user guide command:', error);
    return 'Sorry, could not load user guide. Please try again.';
  }
}

// Name handling command
async function handleNameCommand(message, user, language) {
  try {
    let name = '';
    
    // Extract name from various patterns
    if (message.toLowerCase().includes('my name is')) {
      name = message.substring(message.toLowerCase().indexOf('my name is') + 11).trim();
    } else if (message.toLowerCase().includes("i'm ")) {
      name = message.substring(message.toLowerCase().indexOf("i'm ") + 4).trim();
    } else if (message.toLowerCase().includes('i am ')) {
      name = message.substring(message.toLowerCase().indexOf('i am ') + 5).trim();
    } else if (message.toLowerCase().includes('call me')) {
      name = message.substring(message.toLowerCase().indexOf('call me') + 7).trim();
    } else if (message.toLowerCase().includes('this is ')) {
      name = message.substring(message.toLowerCase().indexOf('this is ') + 8).trim();
    }
    
    // Clean up the name
    name = name.replace(/^dr\.?\s*/i, '').replace(/^professor\s*/i, '').trim();
    
    if (!name || name.length < 2) {
      const responses = {
        en: `тЭМ *Name Not Recognized*

Please provide your full name clearly. Examples:
тАв "My name is John Smith"
тАв "I'm Dr. Sarah Perera"
тАв "Call me Dr. Rajapaksa"
тАв "This is Dr. Fernando"`,
              si: `тЭМ *Name Not Recognized*

Please provide your full name clearly. Examples:
тАв "My name is John Smith"
тАв "I'm Dr. Sarah Perera"`,
      ta: `тЭМ *Name Not Recognized*

Please provide your full name clearly. Examples:
тАв "My name is John Smith"
тАв "I'm Dr. Sarah Perera"`
      };
      return responses[language] || responses.en;
    }
    
    // Update user data with name
    user.userData = user.userData || {};
    user.userData.name = name;
    user.userData.updatedAt = new Date();
    
    // Save to database
    try {
      await updateUser(user.uid, { 
        name: name,
        updatedAt: new Date()
      });
    } catch (error) {
      logger.warn('Could not save name to database:', error.message);
    }
    
    const responses = {
      en: `тЬЕ *Welcome, Dr. ${name}!*

*Your name has been saved for personalized assistance.*

**ЁЯОп What would you like to do today?**

**ЁЯУЪ Study Management:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"
тАв "Remind me to practice drug calculations"

**ЁЯУЭ Note Management:**
тАв "add note: ECG interpretation basics"
тАв "my notes" - View all notes

**ЁЯзо Medical Tools:**
тАв "Calculate BMI for 70kg 1.75m"
тАв "Check drug interaction warfarin aspirin"

**ЁЯОн Clinical Practice:**
тАв "Start patient simulation"
тАв "Show me emergency protocols"

**ЁЯУК Quick Access:**
тАв /guide - View comprehensive user guide
тАв /help - See all commands
тАв /agent - Initialize your AI agent
тАв "dashboard" - Open web interface

*Type naturally - I understand medical terminology and will address you as Dr. ${name}.*`,
      si: `тЬЕ *р╖Гр╖Пр╢пр╢╗р╢║р╖Щр╢▒р╖К р╢┤р╖Тр╖Ер╖Тр╢Ьр╢▒р╖Тр╢╕р╖Ф, Dr. ${name}!*

*р╢┤р╖Фр╢пр╖Кр╢Ьр╢╜р╖Тр╢Ъ р╢Лр╢┤р╢Ър╖Пр╢╗ р╖Гр╢│р╖Др╖П р╢Фр╢╢р╖Ъ р╢▒р╢╕ р╖Гр╖Фр╢╗р╖Рр╢Ър╖У р╢Зр╢н.*

**ЁЯОп р╢Ер╢п р╢Фр╢╢р╢з р╢Ър╖Е р╢║р╖Фр╢нр╖Кр╢нр╖Ъ р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?**

**ЁЯУЪ р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"`,
      ta: `тЬЕ *ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН, Dr. ${name}!*

*родройро┐рокрпНрокроЯрпНроЯ роЙродро╡ро┐роХрпНроХро╛роХ роЙроЩрпНроХро│рпН рокрпЖропро░рпН роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.*

**ЁЯОп роЗройрпНро▒рпБ роирпАроЩрпНроХро│рпН роОройрпНрой роЪрпЖропрпНроп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?**

**ЁЯУЪ рокроЯро┐рокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ:**
тАв "Study cardiology at 6 PM"
тАв "Add task: review ECG cases tomorrow"`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in name command:', error);
    return 'Sorry, could not process your name. Please try again.';
  }
}

// Note confirmation handler
async function handleNoteConfirmation(message, user, language) {
  try {
    const lowerMessage = message.toLowerCase().trim();
    
    // Find user's temp note
    let tempNote = null;
    for (const [id, note] of global.tempNotes || []) {
      if (note.studentId === user.uid) {
        tempNote = { id, ...note };
        break;
      }
    }
    
    if (!tempNote) {
      return 'No pending note found. Please start with "add note: [content]"';
    }
    
    let response = '';
    
    if (lowerMessage.startsWith('title:')) {
      const title = message.substring(6).trim();
      tempNote.title = title;
      global.tempNotes.set(tempNote.id, tempNote);
      
      response = `тЬЕ *Title set:* ${title}\n\n*Next:* Set category with "category: [category]"`;
      
    } else if (lowerMessage.startsWith('category:')) {
      const category = message.substring(9).trim();
      const validCategories = ['anatomy', 'physiology', 'pathology', 'pharmacology', 'clinical', 'surgery', 'medicine', 'pediatrics', 'emergency', 'radiology', 'research', 'exam_notes', 'case_studies', 'procedures', 'drugs', 'calculations', 'guidelines', 'personal', 'other'];
      
      if (!validCategories.includes(category)) {
        return `тЭМ Invalid category. Please choose from: ${validCategories.join(', ')}`;
      }
      
      tempNote.category = category;
      global.tempNotes.set(tempNote.id, tempNote);
      
      response = `тЬЕ *Category set:* ${category}\n\n*Next:* Set tags with "tags: [tag1, tag2, tag3]" (optional)`;
      
    } else if (lowerMessage.startsWith('tags:')) {
      const tagsText = message.substring(5).trim();
      const tags = tagsText.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      tempNote.tags = tags;
      global.tempNotes.set(tempNote.id, tempNote);
      
      response = `тЬЕ *Tags set:* ${tags.join(', ')}\n\n*Next:* Set priority with "priority: [low/medium/high]"`;
      
    } else if (lowerMessage.startsWith('priority:')) {
      const priority = message.substring(9).trim();
      const validPriorities = ['low', 'medium', 'high'];
      
      if (!validPriorities.includes(priority)) {
        return `тЭМ Invalid priority. Please choose: low, medium, or high`;
      }
      
      tempNote.priority = priority;
      global.tempNotes.set(tempNote.id, tempNote);
      
      // Now save the complete note
      const noteData = {
        title: tempNote.title || 'Untitled Note',
        content: tempNote.content,
        category: tempNote.category || 'other',
        tags: tempNote.tags || [],
        priority: tempNote.priority || 'medium'
      };
      
      const result = await notebookService.addNote(user.uid, noteData);
      
      // Remove temp note
      global.tempNotes.delete(tempNote.id);
      
      if (result.success) {
        response = `ЁЯУЭ *Note Saved Successfully!*

*Title:* ${result.note.title}
*Category:* ${result.note.category}
*Tags:* ${result.note.tags.join(', ') || 'None'}
*Priority:* ${result.note.priority}
*Word Count:* ${result.note.wordCount}

*Commands:*
тАв "my notes" - View all notes
тАв "search notes: [keyword]" - Find notes
тАв "add note: [content]" - Add another note
тАв "dashboard" - Full note management`;
      } else {
        response = 'тЭМ Error saving note. Please try again.';
      }
    }
    
    return response;
  } catch (error) {
    logger.error('тЭМ Error in note confirmation:', error);
    return 'Sorry, could not process note confirmation. Please try again.';
  }
}

// Notebook command handlers
async function handleAddNoteCommand(message, user, language) {
  try {
    // Extract note content from message
    const noteMatch = message.match(/add note:\s*(.+)/i) || 
                     message.match(/new note:\s*(.+)/i) || 
                     message.match(/create note:\s*(.+)/i);
    
    if (!noteMatch) {
      const responses = {
        en: `ЁЯУЭ *Add Note*

Please provide your note content:
"add note: [your note content]"

*Examples:*
тАв "add note: Cardiology - ECG interpretation key points"
тАв "add note: Drug interactions for warfarin"
тАв "add note: Clinical case - chest pain differential diagnosis"

*Categories available:* anatomy, physiology, pathology, pharmacology, clinical, surgery, medicine, pediatrics, emergency, radiology, research, exam_notes, case_studies, procedures, drugs, calculations, guidelines, personal, other

*After adding, I'll ask for:*
тАв Note title
тАв Category
тАв Tags (optional)
тАв Priority level`,
        si: `ЁЯУЭ *р╖Гр╢зр╖Др╢▒ р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕*

р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╢Фр╢╢р╖Ъ р╖Гр╢зр╖Др╢▒р╖Ъ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ьр╢нр╢║ р╖Гр╢┤р╢║р╢▒р╖Кр╢▒:
"add note: [р╢Фр╢╢р╖Ъ р╖Гр╢зр╖Др╢▒р╖Ъ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ьр╢нр╢║]"

*р╢Лр╢пр╖Пр╖Др╢╗р╢л:*
тАв "add note: Cardiology - ECG interpretation key points"
тАв "add note: Drug interactions for warfarin"
тАв "add note: Clinical case - chest pain differential diagnosis"`,
        ta: `ЁЯУЭ *роХрпБро▒ро┐рокрпНрокрпБ роЪрпЗро░рпНроХрпНроХ*

роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокрпБ роЙро│рпНро│роЯроХрпНроХродрпНродрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН:
"add note: [роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокрпБ роЙро│рпНро│роЯроХрпНроХроорпН]"

*роОроЯрпБродрпНродрпБроХрпНроХро╛роЯрпНроЯрпБроХро│рпН:*
тАв "add note: Cardiology - ECG interpretation key points"
тАв "add note: Drug interactions for warfarin"
тАв "add note: Clinical case - chest pain differential diagnosis"`
      };
      return responses[language] || responses.en;
    }

    const noteContent = noteMatch[1].trim();
    
    // Store note content temporarily for user to confirm
    if (!global.tempNotes) {
      global.tempNotes = new Map();
    }
    
    const tempNoteId = uuidv4();
    global.tempNotes.set(tempNoteId, {
      studentId: user.uid,
      content: noteContent,
      createdAt: new Date()
    });

    const responses = {
      en: `ЁЯУЭ *Note Content Received!*

*Content:* ${noteContent}

*Next steps:*
1я╕ПтГг *Title:* What would you like to name this note?
   Reply with: "title: [your title]"

2я╕ПтГг *Category:* Which category fits best?
   Reply with: "category: [category]"

3я╕ПтГг *Tags:* Any tags for easy finding? (optional)
   Reply with: "tags: [tag1, tag2, tag3]"

4я╕ПтГг *Priority:* How important is this note?
   Reply with: "priority: [low/medium/high]"

*Available categories:* anatomy, physiology, pathology, pharmacology, clinical, surgery, medicine, pediatrics, emergency, radiology, research, exam_notes, case_studies, procedures, drugs, calculations, guidelines, personal, other

*Example:* "title: ECG Interpretation Guide"`,
      si: `ЁЯУЭ *р╖Гр╢зр╖Др╢▒р╖Ъ р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ьр╢нр╢║ р╢╜р╖Рр╢╢р╖Фр╢лр╖Т!*

*р╢Ер╢▒р╖Кр╢нр╢╗р╖Кр╢Ьр╢нр╢║:* ${noteContent}

*р╢Кр╖Ер╢Я р╢┤р╖Тр╢║р╖Ар╢╗:*
1я╕ПтГг *р╖Бр╖Ур╢╗р╖Кр╖Вр╢║:* р╢╕р╖Щр╢╕ р╖Гр╢зр╖Др╢▒ р╢▒р╢╕р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Фр╢╢р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢пр╖Ъ р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?
   р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф: "title: [р╢Фр╢╢р╖Ъ р╖Бр╖Ур╢╗р╖Кр╖Вр╢║]"

2я╕ПтГг *р╖Ар╢╗р╖Кр╢Ьр╢║:* р╢Ър╖Фр╢╕р╢▒ р╖Ар╢╗р╖Кр╢Ьр╢║ р╖Др╖Ьр╢│р╖Тр╢▒р╖К р╢Ьр╖Рр╢╜р╢┤р╖Ър╢п?
   р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф: "category: [р╖Ар╢╗р╖Кр╢Ьр╢║]"`,
      ta: `ЁЯУЭ *роХрпБро▒ро┐рокрпНрокрпБ роЙро│рпНро│роЯроХрпНроХроорпН рокрпЖро▒рокрпНрокроЯрпНроЯродрпБ!*

*роЙро│рпНро│роЯроХрпНроХроорпН:* ${noteContent}

*роЕроЯрпБродрпНрод рокроЯро┐роХро│рпН:*
1я╕ПтГг *родро▓рпИрокрпНрокрпБ:* роЗроирпНрод роХрпБро▒ро┐рокрпНрокрпИ роОройрпНрой рокрпЖропро░ро┐роЯ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?
   рокродро┐ро▓рпН: "title: [роЙроЩрпНроХро│рпН родро▓рпИрокрпНрокрпБ]"

2я╕ПтГг *ро╡роХрпИ:* роОроирпНрод ро╡роХрпИ роЪро┐ро▒рокрпНрокро╛роХ рокрпКро░рпБроирпНродрпБроХро┐ро▒родрпБ?
   рокродро┐ро▓рпН: "category: [ро╡роХрпИ]"`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in add note command:', error);
    return 'Sorry, could not process note. Please try again.';
  }
}

async function handleNotesCommand(user, language) {
  try {
    const result = await notebookService.getNotes(user.uid, { limit: 10 });
    
    if (!result.success || result.notes.length === 0) {
      const responses = {
        en: `ЁЯУЭ *Your Notes*

No notes found. Start by adding your first note!

*Quick commands:*
тАв "add note: [your content]"
тАв "search notes: [keyword]"
тАв "my notes" - View all notes

*Example:* "add note: Cardiology - ECG interpretation key points"`,
        si: `ЁЯУЭ *р╢Фр╢╢р╖Ъ р╖Гр╢зр╖Др╢▒р╖К*

р╖Гр╢зр╖Др╢▒р╖К р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║. р╢Фр╢╢р╖Ъ р╢┤р╖Ер╢╕р╖Ф р╖Гр╢зр╖Др╢▒ р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕р╖Щр╢▒р╖К р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒!`,
        ta: `ЁЯУЭ *роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН*

роХрпБро▒ро┐рокрпНрокрпБроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЙроЩрпНроХро│рпН роорпБродро▓рпН роХрпБро▒ро┐рокрпНрокрпИ роЪрпЗро░рпНрокрпНрокродройрпН роорпВро▓роорпН родрпКроЯроЩрпНроХро╡рпБроорпН!`
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? 'ЁЯУЭ *р╢Фр╢╢р╖Ъ р╖Гр╢зр╖Др╢▒р╖К*\n\n' :
                   language === 'ta' ? 'ЁЯУЭ *роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН*\n\n' :
                   'ЁЯУЭ *Your Notes*\n\n';

    result.notes.forEach((note, index) => {
      const date = new Date(note.updatedAt).toLocaleDateString();
      response += `${index + 1}. *${note.title}*\n`;
      response += `   ЁЯУВ ${note.category} | ЁЯУЕ ${date}\n`;
      response += `   ЁЯУЭ ${note.content.substring(0, 100)}${note.content.length > 100 ? '...' : ''}\n\n`;
    });

    response += `*Total:* ${result.total} notes\n`;
    response += `*Commands:*\n`;
    response += `тАв "search notes: [keyword]" - Find specific notes\n`;
    response += `тАв "add note: [content]" - Add new note\n`;
    response += `тАв "dashboard" - Open web dashboard for full management`;

    return response;
  } catch (error) {
    logger.error('тЭМ Error in notes command:', error);
    return 'Sorry, could not retrieve notes. Please try again.';
  }
}

async function handleSearchNotesCommand(message, user, language) {
  try {
    const searchMatch = message.match(/search notes:\s*(.+)/i) || 
                       message.match(/find note:\s*(.+)/i);
    
    if (!searchMatch) {
      const responses = {
        en: `ЁЯФН *Search Notes*

Please provide search term:
"search notes: [keyword]"

*Examples:*
тАв "search notes: cardiology"
тАв "search notes: ECG interpretation"
тАв "search notes: drug interactions"`,
        si: `ЁЯФН *р╖Гр╢зр╖Др╢▒р╖К р╖Гр╖Ьр╢║р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕*

р╢Ър╢╗р╖Фр╢лр╖Пр╢Ър╢╗ р╖Гр╖Ьр╢║р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╖Ар╢ар╢▒р╢║ р╖Гр╢┤р╢║р╢▒р╖Кр╢▒:
"search notes: [keyword]"`,
        ta: `ЁЯФН *роХрпБро▒ро┐рокрпНрокрпБроХро│рпИродрпН родрпЗроЯрпБроЩрпНроХро│рпН*

родрпЗроЯро▓рпН роЪрпКро▓рпНро▓рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН:
"search notes: [keyword]"`
      };
      return responses[language] || responses.en;
    }

    const searchTerm = searchMatch[1].trim();
    const result = await notebookService.searchNotes(user.uid, searchTerm, { limit: 5 });
    
    if (!result.success || result.notes.length === 0) {
      const responses = {
        en: `ЁЯФН *Search Results*

No notes found for "${searchTerm}"

*Try:*
тАв Different keywords
тАв "add note: [content]" to create new note
тАв "my notes" to see all notes`,
        si: `ЁЯФН *р╖Гр╖Ьр╢║р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╢┤р╖КтАНр╢╗р╢нр╖Тр╢╡р╢╜*

"${searchTerm}" р╖Гр╢│р╖Др╖П р╖Гр╢зр╖Др╢▒р╖К р╖Др╢╕р╖Ф р╢▒р╖Ьр╖Ар╖Ур╢║`,
        ta: `ЁЯФН *родрпЗроЯро▓рпН роорпБроЯро┐ро╡рпБроХро│рпН*

"${searchTerm}" роХрпНроХрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН роОродрпБро╡рпБроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ`
      };
      return responses[language] || responses.en;
    }

    let response = language === 'si' ? `ЁЯФН *р╖Гр╖Ьр╢║р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╖Ъ р╢┤р╖КтАНр╢╗р╢нр╖Тр╢╡р╢╜: "${searchTerm}"*\n\n` :
                   language === 'ta' ? `ЁЯФН *родрпЗроЯро▓рпН роорпБроЯро┐ро╡рпБроХро│рпН: "${searchTerm}"*\n\n` :
                   `ЁЯФН *Search Results: "${searchTerm}"*\n\n`;

    result.notes.forEach((note, index) => {
      const date = new Date(note.updatedAt).toLocaleDateString();
      response += `${index + 1}. *${note.title}*\n`;
      response += `   ЁЯУВ ${note.category} | ЁЯУЕ ${date}\n`;
      response += `   ЁЯУЭ ${note.content.substring(0, 150)}${note.content.length > 150 ? '...' : ''}\n\n`;
    });

    response += `*Found:* ${result.total} notes\n`;
    response += `*Commands:*\n`;
    response += `тАв "add note: [content]" - Add new note\n`;
    response += `тАв "my notes" - View all notes\n`;
    response += `тАв "dashboard" - Full note management`;

    return response;
  } catch (error) {
    logger.error('тЭМ Error in search notes command:', error);
    return 'Sorry, could not search notes. Please try again.';
  }
}

async function handleDashboardCommand(user, language) {
  try {
    const dashboardUrl = `http://localhost:3000/dashboard.html?userId=${user.uid}`;
    
    const responses = {
      en: `ЁЯЦея╕П *StethoLink AI Dashboard*

*Access your full dashboard:*
${dashboardUrl}

*What you can do in the dashboard:*
ЁЯУЪ **Study Management**
тАв View all tasks and progress
тАв Add/edit notes with rich formatting
тАв Track study analytics

ЁЯзо **Medical Tools**
тАв All calculators (BMI, GFR, CHADS2)
тАв Drug database and interactions
тАв Clinical guidelines

ЁЯОн **Clinical Practice**
тАв Patient simulations
тАв Emergency protocols
тАв Case studies

ЁЯУК **Advanced Features**
тАв Medical image analysis
тАв Research assistant
тАв Evidence-based medicine
тАв Performance tracking

*Quick access commands:*
тАв "my tasks" - View tasks
тАв "my notes" - View notes
тАв "my progress" - View progress
тАв "add note: [content]" - Add note

*Need help?* Type "help" for all commands!`,
      si: `ЁЯЦея╕П *StethoLink AI Dashboard*

*р╢Фр╢╢р╖Ъ р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢л dashboard р╖Ар╖Щр╢н р╢┤р╖КтАНр╢╗р╖Ар╖Ър╖Бр╢║:*
${dashboardUrl}

*Dashboard р╖Др╖Т р╢Фр╢╢р╢з р╢Ър╖Е р╖Др╖Рр╢Ър╖Кр╢Ър╖Ъ:*
ЁЯУЪ **р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╢Ър╖Ер╢╕р╢▒р╖Пр╢Ър╢╗р╢лр╢║**
тАв р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╢Ър╖Пр╢╗р╖Кр╢║р╢║р╢▒р╖К р╖Гр╖Д р╢┤р╖КтАНр╢╗р╢Ьр╢нр╖Тр╢║ р╢╢р╢╜р╢▒р╖Кр╢▒
тАв р╖Гр╢зр╖Др╢▒р╖К р╢Ср╢Ър╢нр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕/р╖Гр╢Вр╖Гр╖Кр╢Ър╢╗р╢лр╢║ р╢Ър╖Тр╢╗р╖Ур╢╕
тАв р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒ р╖Ар╖Тр╖Бр╖Кр╢╜р╖Ър╖Вр╢л р╢╜р╖Фр╖Др╖Фр╢╢р╖Рр╢│р╖Ур╢╕`,
      ta: `ЁЯЦея╕П *StethoLink AI Dashboard*

*роЙроЩрпНроХро│рпН роорпБро┤рпБ dashboard роХрпНроХрпБ роЕрогрпБроХро▓рпН:*
${dashboardUrl}

*Dashboard роЗро▓рпН роирпАроЩрпНроХро│рпН роЪрпЖропрпНропроХрпНроХрпВроЯро┐ропро╡рпИ:*
ЁЯУЪ **рокроЯро┐рокрпНрокрпБ роорпЗро▓ро╛рогрпНроорпИ**
тАв роЕройрпИродрпНродрпБ рокрогро┐роХро│рпИропрпБроорпН роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИропрпБроорпН роХро╛рогрпНроХ
тАв роХрпБро▒ро┐рокрпНрокрпБроХро│рпИ роЪрпЗро░рпНроХрпНроХ/родро┐ро░рпБродрпНродрпБ
тАв рокроЯро┐рокрпНрокрпБ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ`
    };

    return responses[language] || responses.en;
  } catch (error) {
    logger.error('тЭМ Error in dashboard command:', error);
    return 'Sorry, could not access dashboard. Please try again.';
  }
}

// Handle callback queries (button clicks)
bot.on('callback_query', async (callbackQuery) => {
  try {
    const { data, message, from } = callbackQuery;
    const user = await getUserByTelegramId(from.id);
    
    if (!user) {
      await bot.answerCallbackQuery(callbackQuery.id, 'User not found. Please start with /start');
      return;
    }

    let response = '';
    
    switch (data) {
      case 'add_task':
        response = 'ЁЯУЭ *Add a New Task*\n\nType your task with time:\n\nExamples:\nтАв "Study cardiology at 6 PM"\nтАв "Review ECG cases tomorrow"\nтАв "Practice drug calculations at 3 PM"';
        break;
        
      case 'my_tasks':
        const agent = await medicalAgentSystem.getAgent(user.uid || user.id);
        const tasks = agent.currentTasks || [];
        if (tasks.length === 0) {
          response = 'ЁЯУЛ *Your Tasks*\n\nNo tasks found. Add your first task!\n\nTry: "add task: study cardiology"';
        } else {
          response = 'ЁЯУЛ *Your Tasks*\n\n' + tasks.map((task, index) => 
            `${index + 1}. ${task.title}\n   ЁЯУЕ ${task.deadline}\n   тП░ ${task.scheduledTime || 'No alert'}\n   ЁЯУК ${task.status}`
          ).join('\n\n');
        }
        break;
        
      case 'my_alerts':
        const agentAlerts = await medicalAgentSystem.getAgent(user.uid || user.id);
        const alerts = agentAlerts.currentAlerts || [];
        if (alerts.length === 0) {
          response = 'тП░ *Your Alerts*\n\nNo pending alerts.';
        } else {
          response = 'тП░ *Your Alerts*\n\n' + alerts.map((alert, index) => 
            `${index + 1}. ${alert.title}\n   тП░ ${alert.scheduledTime}\n   ЁЯУК ${alert.priority}`
          ).join('\n\n');
        }
        break;
        
      case 'progress':
        response = 'ЁЯУК *Study Progress*\n\nFeature coming soon! Track your study performance and analytics.';
        break;
        
      case 'add_note':
        response = 'ЁЯУЭ *Add a New Note*\n\nType: "add note: [your note content]"\n\nExamples:\nтАв "add note: ECG interpretation basics"\nтАв "add note: Drug interactions summary"\nтАв "add note: Clinical guidelines for diabetes"';
        break;
        
      case 'my_notes':
        response = 'ЁЯУЦ *My Notes*\n\nType: "my notes" to view all your notes\n\nOr search: "search notes: [keyword]"';
        break;
        
      case 'drugs':
        response = 'ЁЯТК *Drug Information*\n\nType a drug name to get information:\n\nExamples:\nтАв "paracetamol"\nтАв "aspirin"\nтАв "warfarin"\n\nOr check interactions:\nтАв "check drug interaction warfarin aspirin"';
        break;
        
      case 'calculator':
        response = 'ЁЯзо *Medical Calculators*\n\nAvailable calculators:\nтАв BMI Calculator\nтАв GFR Calculator\nтАв CHADS2 Score\n\nType:\nтАв "Calculate BMI for 70kg 1.75m"\nтАв "Calculate GFR for creatinine 1.2"\nтАв "Calculate CHADS2 score"';
        break;
        
      case 'guidelines':
        response = 'ЁЯУЛ *Clinical Guidelines*\n\nType a condition for guidelines:\n\nExamples:\nтАв "dengue fever"\nтАв "hypertension"\nтАв "diabetes"\nтАв "myocardial infarction"';
        break;
        
      case 'simulation':
        response = 'ЁЯОн *Patient Simulation*\n\nType: "Start patient simulation"\n\nOr use: /simulate';
        break;
        
      case 'dashboard':
        response = 'ЁЯЦея╕П *Web Dashboard*\n\nAccess your full dashboard at:\nhttp://localhost:3000/dashboard.html\n\nAll features available in web interface!';
        break;
        
      case 'guide':
        response = 'ЁЯУЦ *User Guide*\n\nType: /guide\n\nFor comprehensive help and examples.';
        break;
        
      case 'search_notes':
        response = 'ЁЯФН *Search Notes*\n\nType: "search notes: [keyword]"\n\nExamples:\nтАв "search notes: cardiology"\nтАв "search notes: ECG"\nтАв "search notes: diabetes"';
        break;
        
      default:
        response = 'Unknown button. Please try again.';
    }
    
    await bot.editMessageText(response, {
      chat_id: message.chat.id,
      message_id: message.message_id,
      parse_mode: 'Markdown'
    });
    
    await bot.answerCallbackQuery(callbackQuery.id);
    
  } catch (error) {
    logger.error('тЭМ Error handling callback query:', error);
    await bot.answerCallbackQuery(callbackQuery.id, 'Error occurred. Please try again.');
  }
});

module.exports = {
  initializeTelegramBot,
  processTelegramWebhook
}; 