const { logger } = require('../utils/logger');

// Enhanced simulation state management with intelligence and memory
class SimulationManager {
  constructor() {
    this.activeSimulations = new Map(); // userId -> simulation state
    this.userMemories = new Map(); // userId -> user memory
  }

  // Start a new simulation with enhanced intelligence
  startSimulation(userId, condition, language = 'en', patientProfile = {}) {
    const simulationState = {
      userId,
      condition: condition.toLowerCase(),
      language,
      patientProfile: {
        age: patientProfile.age || Math.floor(Math.random() * 50) + 20,
        gender: patientProfile.gender || (Math.random() > 0.5 ? 'Male' : 'Female'),
        occupation: patientProfile.occupation || 'Farmer',
        location: patientProfile.location || 'Rural Sri Lanka',
        education: patientProfile.education || 'Primary school',
        familyHistory: patientProfile.familyHistory || 'No significant family history',
        ...patientProfile
      },
      conversationHistory: [],
      currentStage: 'initial',
      symptoms: this.getInitialSymptoms(condition),
      vitalSigns: this.getVitalSigns(condition),
      labResults: this.getLabResults(condition),
      physicalExam: this.getPhysicalExam(condition),
      startTime: new Date(),
      // Enhanced intelligence features
      symptomProgression: this.getSymptomProgression(condition),
      currentSymptomStage: 0,
      patientMood: 'cooperative', // cooperative, anxious, irritable, confused
      painLevel: 5, // 1-10 scale
      consciousness: 'alert', // alert, drowsy, confused, unconscious
      revealedInformation: new Set(), // Track what information has been revealed
      emotionalState: 'worried', // worried, calm, angry, scared
      culturalContext: this.getCulturalContext(language),
      learningObjectives: this.getLearningObjectives(condition)
    };

    this.activeSimulations.set(userId, simulationState);
    
    // Initialize or update user memory
    this.initializeUserMemory(userId, condition, language);
    
    logger.info('üé≠ Enhanced simulation started', { userId, condition, language });
    
    return this.getInitialPresentation(simulationState);
  }

  // Enhanced question handling with intelligence
  handleQuestion(userId, question, language = 'en') {
    const simulation = this.activeSimulations.get(userId);
    if (!simulation) {
      return {
        response: this.getNoActiveSimulationMessage(language),
        isSimulationActive: false
      };
    }

    // Add question to conversation history
    simulation.conversationHistory.push({
      type: 'question',
      content: question,
      timestamp: new Date()
    });

    // Analyze question intent and context
    const questionAnalysis = this.analyzeQuestion(question, simulation);
    
    // Generate intelligent patient response
    const patientResponse = this.generateIntelligentPatientResponse(simulation, question, questionAnalysis, language);
    
    // Update simulation state based on interaction
    this.updateSimulationState(simulation, questionAnalysis);
    
    // Add response to conversation history
    simulation.conversationHistory.push({
      type: 'response',
      content: patientResponse,
      timestamp: new Date(),
      analysis: questionAnalysis
    });

    // Update user memory
    this.updateUserMemory(userId, question, patientResponse, questionAnalysis);

    return {
      response: patientResponse,
      isSimulationActive: true,
      simulation: simulation,
      hints: this.getLearningHints(simulation, questionAnalysis)
    };
  }

  // Analyze question intent and context
  analyzeQuestion(question, simulation) {
    const lowerQuestion = question.toLowerCase();
    const analysis = {
      intent: 'general',
      topic: 'general',
      urgency: 'low',
      specificity: 'low',
      followUp: false,
      culturalSensitivity: 'neutral'
    };

    // Analyze intent
    if (lowerQuestion.includes('what happened') || lowerQuestion.includes('how did it start')) {
      analysis.intent = 'history_taking';
      analysis.topic = 'onset';
    } else if (lowerQuestion.includes('pain') || lowerQuestion.includes('hurt')) {
      analysis.intent = 'symptom_assessment';
      analysis.topic = 'pain';
      analysis.specificity = 'high';
    } else if (lowerQuestion.includes('fever') || lowerQuestion.includes('temperature')) {
      analysis.intent = 'symptom_assessment';
      analysis.topic = 'fever';
    } else if (lowerQuestion.includes('family') || lowerQuestion.includes('children')) {
      analysis.intent = 'social_history';
      analysis.topic = 'family';
    } else if (lowerQuestion.includes('work') || lowerQuestion.includes('occupation')) {
      analysis.intent = 'occupational_history';
      analysis.topic = 'occupation';
    } else if (lowerQuestion.includes('urine') || lowerQuestion.includes('water')) {
      analysis.intent = 'symptom_assessment';
      analysis.topic = 'urinary';
    } else if (lowerQuestion.includes('allergy') || lowerQuestion.includes('drug')) {
      analysis.intent = 'medication_history';
      analysis.topic = 'allergies';
    } else if (lowerQuestion.includes('name') || lowerQuestion.includes('who')) {
      analysis.intent = 'identification';
      analysis.topic = 'demographics';
    } else if (lowerQuestion.includes('when') || lowerQuestion.includes('how long')) {
      analysis.intent = 'timeline';
      analysis.topic = 'duration';
    } else if (lowerQuestion.includes('where') || lowerQuestion.includes('location')) {
      analysis.intent = 'geographic_history';
      analysis.topic = 'location';
    }

    // Check for follow-up questions
    if (lowerQuestion.includes('and') || lowerQuestion.includes('also') || lowerQuestion.includes('what about')) {
      analysis.followUp = true;
    }

    // Check urgency
    if (lowerQuestion.includes('emergency') || lowerQuestion.includes('urgent') || lowerQuestion.includes('severe')) {
      analysis.urgency = 'high';
    }

    return analysis;
  }

  // Generate intelligent patient response
  generateIntelligentPatientResponse(simulation, question, analysis, language) {
    const { condition, patientProfile, revealedInformation, emotionalState, culturalContext } = simulation;
    
    // Check if this information has already been revealed
    const questionKey = analysis.topic + '_' + analysis.intent;
    if (revealedInformation.has(questionKey)) {
      return this.generateFollowUpResponse(simulation, question, analysis, language);
    }

    // Mark information as revealed
    revealedInformation.add(questionKey);

    // Generate context-aware response
    let response = this.generateContextualResponse(simulation, question, analysis, language);
    
    // Add emotional and cultural context
    response = this.addEmotionalContext(response, simulation, language);
    
    // Add realistic patient behavior
    response = this.addPatientBehavior(response, simulation, analysis, language);

    return response;
  }

  // Generate contextual response based on condition and analysis
  generateContextualResponse(simulation, question, analysis, language) {
    const { condition, patientProfile } = simulation;
    const lowerQuestion = question.toLowerCase();
    
    // Leptospirosis responses with enhanced intelligence
    if (condition === 'leptospirosis') {
      if (analysis.intent === 'history_taking' && analysis.topic === 'onset') {
        return language === 'si' ? 
          '‡∂∏‡∂∏ ‡∂¥‡∑É‡∑î‡∂ú‡∑í‡∂∫ ‡∑É‡∂≠‡∑í‡∂∫‡∑ö ‡∑Ä‡∂≠‡∑î‡∂ª‡∑ö ‡∑Ä‡∑ê‡∂© ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä ‡∑É‡∑í‡∂ß‡∑í‡∂∫‡∑ô‡∂∏‡∑í. ‡∂ë‡∂Ø‡∑í‡∂± ‡∂ª‡∑è‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑ö ‡∂∏‡∂ß ‡∂ã‡∂´ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫. ‡∂∏‡∂∏ ‡∑É‡∑í‡∂≠‡∑î‡∑Ä‡∑ö ‡∂ë‡∂∫ ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂ã‡∂´‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂∫‡∑í, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂ë‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂∏‡∂ß ‡∂∏‡∑è‡∂Ç‡∑Å ‡∂¥‡∑ö‡∑Å‡∑í ‡∑Ä‡∂Ω ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä, ‡∑Ñ‡∑í‡∑É‡∂ª‡∂Ø‡∂∫ ‡∑É‡∑Ñ ‡∂á‡∑É‡∑ä ‡∑Ä‡∂Ω ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä ‡∂≠‡∑í‡∂∂‡∑ö. ‡∂∏‡∂ß ‡∂≠‡∑Ä‡∂Ø ‡∂á‡∑É‡∑ä ‡∂ö‡∑Ñ ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠.' :
          language === 'ta' ? 
          '‡Æ®‡Ææ‡Æ©‡Øç ‡Æï‡Æü‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡Æµ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ£‡Øç‡Æü‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Øá‡Æ©‡Øç. ‡ÆÖ‡Æ©‡Øç‡Æ±‡ØÅ ‡Æá‡Æ∞‡Æµ‡ØÅ ‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ. ‡Æá‡Æ§‡ØÅ ‡Æö‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ£ ‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Æø‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡Øá‡Æ©‡Øç, ‡ÆÜ‡Æ©‡Ææ‡Æ≤‡Øç ‡ÆÖ‡Æ§‡ØÅ ‡ÆÆ‡Øã‡Æö‡ÆÆ‡Ææ‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ. ‡Æá‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ§‡Æö‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ≤‡Æø, ‡Æ§‡Æ≤‡Øà‡Æµ‡Æ≤‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æ£‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ≤‡Æø ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡Æ£‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æû‡Øç‡Æö‡Æ≥‡Øç ‡Æ®‡Æø‡Æ±‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.' :
          'I was working in the paddy field last week, handling water and mud. That night I developed fever. I thought it was just a common fever, but it got worse. Now I have severe muscle pain, especially in my calves, headache, and eye pain. My eyes also look yellow.';
      }
      
      if (analysis.intent === 'symptom_assessment' && analysis.topic === 'pain') {
        return language === 'si' ? 
          '‡∂∏‡∂ß ‡∂∏‡∑è‡∂Ç‡∑Å ‡∂¥‡∑ö‡∑Å‡∑í ‡∑Ä‡∂Ω ‡∂â‡∂≠‡∑è ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä ‡∂≠‡∑í‡∂∂‡∑ö, ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∂∫‡∑ô‡∂±‡∑ä ‡∂ö‡∂ö‡∑î‡∂Ω‡∑ä ‡∑Ä‡∂Ω. ‡∂ë‡∂∫ ‡∂â‡∂≠‡∑è ‡∂≠‡∂Ø ‡∂∫. ‡∂∏‡∂ß ‡∂á‡∑Ä‡∑í‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂¥‡∑Ä‡∑è ‡∂Ö‡∂¥‡∑Ñ‡∑É‡∑î ‡∂∫. ‡∂∏‡∂ß ‡∑Ñ‡∑í‡∑É‡∂ª‡∂Ø‡∂∫ ‡∑É‡∑Ñ ‡∂á‡∑É‡∑ä ‡∑Ä‡∂Ω ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä‡∂Ø ‡∂≠‡∑í‡∂∂‡∑ö.' :
          language === 'ta' ? 
          '‡Æ§‡Æö‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ≤‡Æø ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ, ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡Æï‡Ææ‡Æ≤‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç. ‡Æá‡Æ§‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ©‡Æ§‡ØÅ. ‡Æ®‡Æü‡Æ™‡Øç‡Æ™‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡Æï‡ØÇ‡Æü ‡Æï‡Æ∑‡Øç‡Æü‡ÆÆ‡Ææ‡Æï ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æ§‡Æ≤‡Øà‡Æµ‡Æ≤‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æ£‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ≤‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.' :
          'I have severe muscle pain, especially in my legs and calves. It is very intense, like deep aching. I can barely walk. I also have headache and eye pain. The pain is worse when I move.';
      }
      
      if (analysis.intent === 'symptom_assessment' && analysis.topic === 'urinary') {
        return language === 'si' ? 
          '‡∂∏‡∂∏ ‡∂Ö‡∂©‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫‡∂ö ‡∂∏‡∑î‡∂≠‡∑ä‚Äç‡∂ª‡∑è ‡∂∂‡∑Ñ‡∑í‡∂∏‡∑í. ‡∂ë‡∂∫ ‡∂≠‡∂Ø ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠. ‡∂∏‡∂ß ‡∂≠‡∑ò‡∑Ç‡∑ä‡∂´‡∑è‡∑Ä ‡∂≠‡∑í‡∂∂‡∑ö ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂∂‡∑ú‡∂±‡∑ä‡∂±‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∑ê‡∂≠. ‡∂∏‡∂ß ‡∂∂‡∂©‡∑Ä‡∑ê‡∂Ω‡∑ä ‡∑Ä‡∂Ω ‡∂Ö‡∂¥‡∑Ñ‡∑É‡∑î‡∂≠‡∑è‡∑Ä‡∂∫‡∂ö‡∑ä‡∂Ø ‡∂≠‡∑í‡∂∂‡∑ö.' :
          language === 'ta' ? 
          '‡Æ®‡Ææ‡Æ©‡Øç ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡ÆÖ‡Æ≥‡Æµ‡ØÅ ‡Æö‡Æø‡Æ±‡ØÅ‡Æ®‡ØÄ‡Æ∞‡Øç ‡Æï‡Æ¥‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æá‡Æ§‡ØÅ ‡Æï‡Æ∞‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æ®‡Æø‡Æ±‡ÆÆ‡Øç. ‡Æ§‡Ææ‡Æï‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ ‡ÆÜ‡Æ©‡Ææ‡Æ≤‡Øç ‡Æï‡ØÅ‡Æü‡Æø‡Æï‡Øç‡Æï ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æµ‡ÆØ‡Æø‡Æ±‡Øç‡Æ±‡Æø‡Æ≤‡Øç ‡Æö‡Æø‡Æ∞‡ÆÆ‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.' :
          'I pass less urine than usual. It is dark colored, like tea. I feel thirsty but don\'t want to drink much. I also have some abdominal discomfort.';
      }
    }
    
    // Dengue fever responses with enhanced intelligence
    if (condition === 'dengue fever') {
      if (analysis.intent === 'history_taking' && analysis.topic === 'onset') {
        return language === 'si' ? 
          '‡∂∏‡∂∏ ‡∂¥‡∑É‡∑î‡∂ú‡∑í‡∂∫ ‡∑É‡∂≠‡∑í‡∂∫‡∑ö ‡∂∏‡∂Ø‡∑î‡∂ª‡∑î‡∑Ä‡∂±‡∑ä ‡∂∂‡∑ú‡∑Ñ‡∑ù ‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∑Ä‡∂Ω ‡∂Ø‡∑ê‡∂ö ‡∂á‡∂≠. ‡∂ë‡∂Ø‡∑í‡∂± ‡∂ª‡∑è‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑ö ‡∂∏‡∂ß ‡∂ã‡∂´ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑í‡∂∫. ‡∂∏‡∂∏ ‡∑É‡∑í‡∂≠‡∑î‡∑Ä‡∑ö ‡∂ë‡∂∫ ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂ã‡∂´‡∂ö‡∑ä ‡∂∂‡∑Ä‡∂∫‡∑í, ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂ë‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂∏‡∂ß ‡∑Ñ‡∑í‡∑É‡∂ª‡∂Ø‡∂∫ ‡∑É‡∑Ñ ‡∂∏‡∑è‡∂Ç‡∑Å ‡∂¥‡∑ö‡∑Å‡∑í ‡∑Ä‡∂Ω ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä ‡∂≠‡∑í‡∂∂‡∑ö.' :
          language === 'ta' ? 
          '‡Æ®‡Ææ‡Æ©‡Øç ‡Æï‡Æü‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡Æ™‡Æ≤ ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æö‡ØÅ‡Æï‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡Ææ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡Øá‡Æ©‡Øç. ‡ÆÖ‡Æ©‡Øç‡Æ±‡ØÅ ‡Æá‡Æ∞‡Æµ‡ØÅ ‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ. ‡Æá‡Æ§‡ØÅ ‡Æö‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ£ ‡Æï‡Ææ‡ÆØ‡Øç‡Æö‡Øç‡Æö‡Æ≤‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Æø‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡Øá‡Æ©‡Øç, ‡ÆÜ‡Æ©‡Ææ‡Æ≤‡Øç ‡ÆÖ‡Æ§‡ØÅ ‡ÆÆ‡Øã‡Æö‡ÆÆ‡Ææ‡Æï‡Æø‡ÆØ‡Æ§‡ØÅ. ‡Æ§‡Æ≤‡Øà‡Æµ‡Æ≤‡Æø ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æö‡Øà‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ≤‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.' :
          'I saw many mosquitoes around my house and workplace last week. That night I developed fever. I thought it was just a common fever, but it got worse. I have severe headache and muscle pain.';
      }
      
      if (analysis.intent === 'symptom_assessment' && analysis.topic === 'pain') {
        return language === 'si' ? 
          '‡∂∏‡∂ß ‡∂â‡∂≠‡∑è ‡∂≠‡∂Ø ‡∑Ñ‡∑í‡∑É‡∂ª‡∂Ø‡∂∫ ‡∂≠‡∑í‡∂∂‡∑ö. ‡∂ë‡∂∫ ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂¥‡∑É ‡∑É‡∑Ñ ‡∂¥‡∑É‡∑î‡∂¥‡∑É ‡∂Ø‡∑ô‡∂¥‡∑ê‡∂≠‡∑ä‡∂≠‡∑ô‡∂±‡∑ä‡∂∏ ‡∂≠‡∑í‡∂∂‡∑ö. ‡∂∏‡∂ß ‡∂∏‡∑è‡∂Ç‡∑Å ‡∂¥‡∑ö‡∑Å‡∑í ‡∑É‡∑Ñ ‡∂∂‡∂±‡∑ä‡∂∞‡∂± ‡∑Ä‡∂Ω ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä‡∂Ø ‡∂≠‡∑í‡∂∂‡∑ö. ‡∂ë‡∂∫ ‡∂â‡∂≠‡∑è ‡∂≠‡∂Ø ‡∂∫.' :
          language === 'ta' ? 
          '‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æ§‡Æ≤‡Øà‡Æµ‡Æ≤‡Æø ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æá‡Æ§‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æø‡Æ©‡Øç‡Æ™‡ØÅ‡Æ±‡ÆÆ‡Øç ‡Æá‡Æ∞‡Æ£‡Øç‡Æü‡ØÅ ‡Æ™‡Æï‡Øç‡Æï‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æ§‡Æö‡Øà‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÇ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æµ‡Æ≤‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æá‡Æ§‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ©‡Æ§‡ØÅ.' :
          'I have very severe headache. It is in the front and back of my head, like a band around my head. I also have muscle and joint pain. It is very intense.';
      }
    }

    // Generic intelligent responses
    if (analysis.intent === 'identification' && analysis.topic === 'demographics') {
      return language === 'si' ? 
        `‡∂∏‡∂ú‡∑ö ‡∂±‡∂∏ ${patientProfile.gender === 'Male' ? '‡∂ö‡∑î‡∂∏‡∑è‡∂ª' : '‡∂ö‡∑î‡∂∏‡∑è‡∂ª‡∑í'} ${patientProfile.occupation === 'Farmer' ? '‡∑É‡∑í‡∂Ω‡∑ä‡∑Ä‡∑è' : '‡∂¥‡∑ô‡∂ª‡∑ö‡∂ª‡∑è'}. ‡∂∏‡∂ú‡∑ö ‡∑Ä‡∂∫‡∑É ${patientProfile.age} ‡∂∫. ‡∂∏‡∂∏ ${patientProfile.location} ‡∑Ñ‡∑í ‡∂¢‡∑ì‡∑Ä‡∂≠‡∑ä ‡∑Ä‡∑ô‡∂∏‡∑í.` :
        language === 'ta' ? 
        `‡Æé‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç ${patientProfile.gender === 'Male' ? '‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Øç' : '‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ∞‡Æø'} ${patientProfile.occupation === 'Farmer' ? '‡Æö‡Æø‡Æ≤‡Øç‡Æµ‡Ææ' : '‡Æ™‡ØÜ‡Æ∞‡Øá‡Æ∞‡Ææ'}. ‡Æé‡Æ©‡Øç ‡Æµ‡ÆØ‡Æ§‡ØÅ ${patientProfile.age}. ‡Æ®‡Ææ‡Æ©‡Øç ${patientProfile.location} ‡Æá‡Æ≤‡Øç ‡Æµ‡Æö‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.` :
        `My name is ${patientProfile.gender === 'Male' ? 'Kumar' : 'Kumari'} ${patientProfile.occupation === 'Farmer' ? 'Silva' : 'Perera'}. I am ${patientProfile.age} years old. I live in ${patientProfile.location}.`;
    }
    
    if (analysis.intent === 'occupational_history' && analysis.topic === 'occupation') {
      return language === 'si' ? 
        `‡∂∏‡∂∏ ${patientProfile.occupation} ‡∂ö‡∂∏‡∑ä ‡∂ö‡∂ª‡∂∏‡∑í. ‡∂∏‡∂∏ ‡∂Ø‡∑í‡∂±‡∂ö‡∂ß ‡∂¥‡∑ê‡∂∫ 8-10 ‡∂ö‡∑ä ‡∑Ä‡∑ê‡∂© ‡∂ö‡∂ª‡∂∏‡∑í. ‡∂∏‡∂∏ ‡∑Ä‡∂≠‡∑î‡∂ª‡∑ö ‡∑Ä‡∑ê‡∂© ‡∂ö‡∂ª‡∂± ‡∑Ä‡∑í‡∂ß ‡∂ª‡∂∂‡∂ª‡∑ä ‡∂∂‡∑ñ‡∂ß‡∑ä ‡∑É‡∑Ñ ‡∂ª‡∂∂‡∂ª‡∑ä ‡∂Ö‡∂≠‡∑ä‡∑Ä‡∑ê‡∑É‡∑î‡∂∏‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂∏‡∑í.` :
        language === 'ta' ? 
        `‡Æ®‡Ææ‡Æ©‡Øç ${patientProfile.occupation} ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æ®‡Ææ‡Æ©‡Øç ‡Æí‡Æ∞‡ØÅ ‡Æ®‡Ææ‡Æ≥‡Øà‡Æï‡Øç‡Æï‡ØÅ 8-10 ‡ÆÆ‡Æ£‡Æø ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æ®‡Ææ‡Æ©‡Øç ‡Æµ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ∞‡Æ™‡Øç‡Æ™‡Æ∞‡Øç ‡Æ™‡ØÇ‡Æü‡Øç‡Æ∏‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ∞‡Æ™‡Øç‡Æ™‡Æ∞‡Øç ‡Æï‡Øà‡ÆØ‡ØÅ‡Æ±‡Øà‡Æï‡Æ≥‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.` :
        `I work as a ${patientProfile.occupation}. I work 8-10 hours a day. When I work in the fields, I wear rubber boots and gloves for protection.`;
    }

    // Default intelligent response
    return language === 'si' ? 
      '‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∏‡∂ß ‡∂î‡∂∂‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂≠‡∑ö‡∂ª‡∑ô‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ü‡∂ö‡∑è‡∂ª‡∂∫‡∂ö‡∑í‡∂±‡∑ä ‡∂Ö‡∑É‡∂±‡∑ä‡∂±. ‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂∫.' :
      language === 'ta' ? 
      '‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æµ‡Øá‡Æ±‡ØÅ ‡Æµ‡Æø‡Æ§‡ÆÆ‡Ææ‡Æï ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø. ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.' :
      'I\'m sorry, I don\'t understand your question clearly. Please ask in a different way. I want to help you.';
  }

  // Add emotional context to responses
  addEmotionalContext(response, simulation, language) {
    const { emotionalState, painLevel } = simulation;
    
    if (emotionalState === 'worried') {
      const worryPhrases = {
        en: ' I am worried about my condition.',
        si: ' ‡∂∏‡∂ß ‡∂∏‡∂ú‡∑ö ‡∂≠‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂ú‡∑ê‡∂± ‡∂ö‡∂±‡∑É‡∑ä‡∑É‡∂Ω‡∑ä‡∂Ω‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö.',
        ta: ' ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ©‡Øç ‡Æ®‡Æø‡Æ≤‡Øà ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æï‡Æµ‡Æ≤‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.'
      };
      return response + (worryPhrases[language] || worryPhrases.en);
    }
    
    if (painLevel > 7) {
      const painPhrases = {
        en: ' The pain is very severe and affecting my daily activities.',
        si: ' ‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä ‡∂â‡∂≠‡∑è ‡∂≠‡∂Ø ‡∂∫ ‡∑É‡∑Ñ ‡∂∏‡∂ú‡∑ö ‡∂Ø‡∑õ‡∂±‡∑í‡∂ö ‡∂ö‡∂ß‡∂∫‡∑î‡∂≠‡∑ä‡∂≠‡∂ß ‡∂∂‡∂Ω‡∂¥‡∑è‡∂∫‡∑í.',
        ta: ' ‡Æµ‡Æ≤‡Æø ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ©‡Æ§‡ØÅ ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ©‡Æ§‡ØÅ ‡Æ§‡Æø‡Æ©‡Æö‡Æ∞‡Æø ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æ™‡Ææ‡Æü‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ™‡Ææ‡Æ§‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.'
      };
      return response + (painPhrases[language] || painPhrases.en);
    }
    
    return response;
  }

  // Add realistic patient behavior
  addPatientBehavior(response, simulation, analysis, language) {
    const { patientMood, consciousness } = simulation;
    
    if (patientMood === 'anxious') {
      const anxiousPhrases = {
        en: ' I am very anxious about what is happening to me.',
        si: ' ‡∂∏‡∂ß ‡∂∏‡∂ú‡∑ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∂± ‡∂Ø‡∑ö ‡∂ú‡∑ê‡∂± ‡∂â‡∂≠‡∑è ‡∂ö‡∂±‡∑É‡∑ä‡∑É‡∂Ω‡∑ä‡∂Ω‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö.',
        ta: ' ‡Æé‡Æ©‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ©‡Øç‡Æ© ‡Æ®‡Æü‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æµ‡Æ≤‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ.'
      };
      return response + (anxiousPhrases[language] || anxiousPhrases.en);
    }
    
    if (consciousness === 'drowsy') {
      const drowsyPhrases = {
        en: ' I feel very tired and sleepy.',
        si: ' ‡∂∏‡∂ß ‡∂â‡∂≠‡∑è ‡∑Ä‡∑ô‡∑Ñ‡∑ô‡∑É‡∂ö‡∑ä ‡∑É‡∑Ñ ‡∂±‡∑í‡∂±‡∑ä‡∂Ø‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö.',
        ta: ' ‡Æ®‡Ææ‡Æ©‡Øç ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ØÇ‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ£‡Æ∞‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.'
      };
      return response + (drowsyPhrases[language] || drowsyPhrases.en);
    }
    
    return response;
  }

  // Generate follow-up responses for repeated questions
  generateFollowUpResponse(simulation, question, analysis, language) {
    const responses = {
      en: 'I already told you about that. Is there something specific you want to know more about?',
      si: '‡∂∏‡∂∏ ‡∂ë‡∂∫ ‡∂ú‡∑ê‡∂± ‡∂Ø‡∑ê‡∂±‡∂ß‡∂∏‡∂≠‡∑ä ‡∂î‡∂∂‡∂ß ‡∂¥‡∑ê‡∑Ä‡∑É‡∑î‡∑Ä‡∑ô‡∂∏‡∑í. ‡∂î‡∂∂‡∂ß ‡∑Ä‡∑ê‡∂©‡∑í‡∂Ø‡∑î‡∂ª ‡∂Ø‡∑ê‡∂± ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑í‡∂≠ ‡∂Ø‡∑ô‡∂∫‡∂ö‡∑ä ‡∂≠‡∑í‡∂∂‡∑ö‡∂Ø?',
      ta: '‡Æ®‡Ææ‡Æ©‡Øç ‡ÆÖ‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æè‡Æ±‡Øç‡Æï‡Æ©‡Æµ‡Øá ‡Æö‡Øä‡Æ©‡Øç‡Æ©‡Øá‡Æ©‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Øç‡Æü ‡Æí‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡Ææ?'
    };
    return responses[language] || responses.en;
  }

  // Update simulation state based on interaction
  updateSimulationState(simulation, analysis) {
    // Progress symptoms based on time and interactions
    const timeElapsed = (new Date() - simulation.startTime) / 1000 / 60; // minutes
    
    if (timeElapsed > 10 && simulation.currentSymptomStage < simulation.symptomProgression.length - 1) {
      simulation.currentSymptomStage++;
      simulation.painLevel = Math.min(10, simulation.painLevel + 1);
    }
    
    // Update patient mood based on interactions
    if (analysis.urgency === 'high') {
      simulation.patientMood = 'anxious';
      simulation.emotionalState = 'scared';
    }
  }

  // Get learning hints for medical students
  getLearningHints(simulation, analysis) {
    const hints = [];
    
    if (analysis.intent === 'history_taking' && analysis.topic === 'onset') {
      hints.push('Good! You\'re taking a proper history. Consider asking about occupational exposure.');
    }
    
    if (analysis.intent === 'symptom_assessment' && analysis.topic === 'pain') {
      hints.push('Excellent pain assessment. Remember to ask about pain characteristics: location, severity, duration, aggravating factors.');
    }
    
    if (analysis.intent === 'symptom_assessment' && analysis.topic === 'urinary') {
      hints.push('Good urinary assessment. Consider asking about urine color, frequency, and associated symptoms.');
    }
    
    return hints;
  }

  // Initialize user memory
  initializeUserMemory(userId, condition, language) {
    if (!this.userMemories.has(userId)) {
      this.userMemories.set(userId, {
        userId,
        totalSimulations: 0,
        completedCases: [],
        learningProgress: {},
        preferences: { language },
        lastActive: new Date(),
        strengths: [],
        areasForImprovement: []
      });
    }
    
    const memory = this.userMemories.get(userId);
    memory.totalSimulations++;
    memory.lastActive = new Date();
  }

  // Update user memory
  updateUserMemory(userId, question, response, analysis) {
    const memory = this.userMemories.get(userId);
    if (memory) {
      // Track question types and quality
      if (!memory.learningProgress.questionTypes) {
        memory.learningProgress.questionTypes = {};
      }
      
      memory.learningProgress.questionTypes[analysis.intent] = 
        (memory.learningProgress.questionTypes[analysis.intent] || 0) + 1;
      
      // Track strengths and areas for improvement
      if (analysis.specificity === 'high') {
        memory.strengths.push('Detailed questioning');
      }
      
      if (analysis.followUp) {
        memory.strengths.push('Follow-up questions');
      }
    }
  }

  // Get symptom progression for conditions
  getSymptomProgression(condition) {
    const progressions = {
      'leptospirosis': [
        'Initial fever and muscle pain',
        'Progressive jaundice and renal dysfunction',
        'Severe complications if untreated'
      ],
      'dengue fever': [
        'Initial fever and headache',
        'Critical phase with plasma leakage',
        'Recovery phase'
      ]
    };
    return progressions[condition] || ['Initial symptoms', 'Progressive symptoms', 'Complications'];
  }

  // Get cultural context
  getCulturalContext(language) {
    const contexts = {
      'si': {
        respectForElders: true,
        familyInvolvement: true,
        traditionalBeliefs: true,
        communicationStyle: 'polite'
      },
      'ta': {
        respectForElders: true,
        familyInvolvement: true,
        traditionalBeliefs: true,
        communicationStyle: 'polite'
      },
      'en': {
        respectForElders: true,
        familyInvolvement: true,
        traditionalBeliefs: false,
        communicationStyle: 'direct'
      }
    };
    return contexts[language] || contexts.en;
  }

  // Get learning objectives for conditions
  getLearningObjectives(condition) {
    const objectives = {
      'leptospirosis': [
        'Recognize occupational risk factors',
        'Identify key symptoms: fever, muscle pain, jaundice',
        'Understand renal complications',
        'Know appropriate antibiotic treatment'
      ],
      'dengue fever': [
        'Recognize warning signs',
        'Understand fluid management',
        'Know when to hospitalize',
        'Prevent complications'
      ]
    };
    return objectives[condition] || ['History taking', 'Physical examination', 'Differential diagnosis'];
  }

  // End simulation with enhanced feedback
  endSimulation(userId) {
    const simulation = this.activeSimulations.get(userId);
    if (simulation) {
      // Generate comprehensive feedback
      const feedback = this.generateSimulationFeedback(simulation);
      
      // Update user memory with simulation results
      this.updateSimulationMemory(userId, simulation, feedback);
      
      this.activeSimulations.delete(userId);
      logger.info('üé≠ Enhanced simulation ended', { userId, condition: simulation.condition });
      return { success: true, feedback };
    }
    return { success: false };
  }

  // Generate comprehensive simulation feedback
  generateSimulationFeedback(simulation) {
    const questionsAsked = simulation.conversationHistory.filter(c => c.type === 'question').length;
    const topicsCovered = new Set(simulation.conversationHistory
      .filter(c => c.type === 'question')
      .map(c => c.analysis?.topic)
      .filter(Boolean)).size;
    
    return {
      condition: simulation.condition,
      duration: Math.round((new Date() - simulation.startTime) / 1000 / 60),
      questionsAsked,
      topicsCovered,
      learningObjectives: simulation.learningObjectives,
      strengths: this.identifyStrengths(simulation),
      areasForImprovement: this.identifyAreasForImprovement(simulation)
    };
  }

  // Identify student strengths
  identifyStrengths(simulation) {
    const strengths = [];
    const questions = simulation.conversationHistory.filter(c => c.type === 'question');
    
    const questionTypes = questions.map(q => q.analysis?.intent).filter(Boolean);
    const uniqueTypes = new Set(questionTypes).size;
    
    if (uniqueTypes >= 5) strengths.push('Comprehensive history taking');
    if (questions.length >= 10) strengths.push('Thorough questioning');
    if (questionTypes.includes('symptom_assessment')) strengths.push('Good symptom assessment');
    if (questionTypes.includes('occupational_history')) strengths.push('Occupational history awareness');
    
    return strengths;
  }

  // Identify areas for improvement
  identifyAreasForImprovement(simulation) {
    const areas = [];
    const questions = simulation.conversationHistory.filter(c => c.type === 'question');
    
    const questionTypes = questions.map(q => q.analysis?.intent).filter(Boolean);
    
    if (!questionTypes.includes('medication_history')) areas.push('Medication history');
    if (!questionTypes.includes('social_history')) areas.push('Social history');
    if (!questionTypes.includes('family_history')) areas.push('Family history');
    
    return areas;
  }

  // Update simulation memory
  updateSimulationMemory(userId, simulation, feedback) {
    const memory = this.userMemories.get(userId);
    if (memory) {
      memory.completedCases.push({
        condition: simulation.condition,
        date: new Date(),
        feedback,
        duration: feedback.duration
      });
      
      // Update learning progress
      if (!memory.learningProgress.conditions) {
        memory.learningProgress.conditions = {};
      }
      
      memory.learningProgress.conditions[simulation.condition] = {
        attempts: (memory.learningProgress.conditions[simulation.condition]?.attempts || 0) + 1,
        lastAttempt: new Date(),
        strengths: feedback.strengths,
        areasForImprovement: feedback.areasForImprovement
      };
    }
  }

  // Get simulation status with enhanced information
  getSimulationStatus(userId) {
    const simulation = this.activeSimulations.get(userId);
    if (simulation) {
      return {
        ...simulation,
        memory: this.userMemories.get(userId),
        timeElapsed: Math.round((new Date() - simulation.startTime) / 1000 / 60)
      };
    }
    return null;
  }

  // Get user memory
  getUserMemory(userId) {
    return this.userMemories.get(userId);
  }

  // Get initial symptoms based on condition
  getInitialSymptoms(condition) {
    const symptoms = {
      'leptospirosis': ['fever', 'muscle pain', 'headache', 'jaundice', 'oliguria'],
      'dengue fever': ['fever', 'headache', 'muscle pain', 'rash', 'bleeding'],
      'typhoid fever': ['fever', 'headache', 'abdominal pain', 'constipation'],
      'malaria': ['fever', 'chills', 'sweating', 'headache', 'nausea']
    };
    return symptoms[condition] || ['fever', 'general malaise'];
  }

  // Get vital signs based on condition
  getVitalSigns(condition) {
    const vitals = {
      'leptospirosis': { temp: 39.2, bp: '100/60', pulse: 110, rr: 20 },
      'dengue fever': { temp: 39.5, bp: '110/70', pulse: 88, rr: 18 },
      'typhoid fever': { temp: 38.8, bp: '105/65', pulse: 95, rr: 19 },
      'malaria': { temp: 40.0, bp: '95/60', pulse: 120, rr: 22 }
    };
    return vitals[condition] || { temp: 38.5, bp: '120/80', pulse: 80, rr: 16 };
  }

  // Get lab results based on condition
  getLabResults(condition) {
    const labs = {
      'leptospirosis': { wbc: 12000, platelets: 95000, bilirubin: 3.2, creatinine: 2.1 },
      'dengue fever': { wbc: 2500, platelets: 85000, hematocrit: 45, alt: 40 },
      'typhoid fever': { wbc: 8000, platelets: 150000, esr: 45, crp: 80 },
      'malaria': { wbc: 6000, platelets: 120000, hemoglobin: 10.5, parasitemia: 2.5 }
    };
    return labs[condition] || { wbc: 8000, platelets: 200000 };
  }

  // Get physical examination findings
  getPhysicalExam(condition) {
    const exams = {
      'leptospirosis': ['jaundice', 'calf tenderness', 'conjunctival suffusion'],
      'dengue fever': ['petechiae', 'positive tourniquet test', 'mild hepatomegaly'],
      'typhoid fever': ['relative bradycardia', 'rose spots', 'hepatosplenomegaly'],
      'malaria': ['pallor', 'splenomegaly', 'jaundice']
    };
    return exams[condition] || ['normal examination'];
  }

  // Get message for no active simulation
  getNoActiveSimulationMessage(language) {
    const messages = {
      en: 'You don\'t have an active patient simulation. Use /simulate to start a new case.',
      si: '‡∂î‡∂∂‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∑ì ‡∂ª‡∑ù‡∂ú‡∑ì ‡∑É‡∑í‡∂∏‡∑í‡∂∫‡∑î‡∂Ω‡∑ö‡∑Ç‡∂±‡∂∫‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠. ‡∂±‡∑Ä ‡∂ª‡∑ù‡∂ú‡∂∫‡∂ö‡∑ä ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß /simulate ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.',
      ta: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æø ‡Æö‡Æø‡ÆÆ‡ØÅ‡Æ≤‡Øá‡Æ∑‡Æ©‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡Æµ‡Æ¥‡Æï‡Øç‡Æï‡Øà‡Æ§‡Øç ‡Æ§‡Øä‡Æü‡Æô‡Øç‡Æï /simulate ‡Æê‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç.'
    };
    return messages[language] || messages.en;
  }

  // Generate initial presentation
  getInitialPresentation(simulation) {
    const { condition, patientProfile, language } = simulation;
    
    const presentations = {
      'leptospirosis': {
        en: `Patient Case: Leptospirosis Simulation

Patient: ${patientProfile.age} year old ${patientProfile.gender}, ${patientProfile.occupation} from ${patientProfile.location}

Presenting Symptoms:
- High fever (39-40¬∞C) for 5 days
- Severe muscle pain, especially in calves
- Headache and eye pain
- Nausea and vomiting
- Yellow discoloration of eyes
- Decreased urine output

Physical Examination:
- Temperature: 39.2¬∞C
- Blood pressure: 100/60 mmHg
- Pulse: 110/min
- Jaundice present
- Tenderness in calf muscles
- Conjunctival suffusion

Laboratory Results:
- WBC: 12,000/ŒºL (elevated)
- Platelets: 95,000/ŒºL (low)
- Bilirubin: 3.2 mg/dL (elevated)
- Creatinine: 2.1 mg/dL (elevated)
- ALT: 180 U/L (elevated)

Differential Diagnosis:
1. Leptospirosis
2. Dengue fever
3. Hepatitis
4. Typhoid fever
5. Malaria

Management:
- IV fluids
- Doxycycline or Penicillin G
- Monitor renal function
- Supportive care

Questions for students:
- What is the most likely diagnosis?
- What investigations would you order?
- How would you manage this patient?
- What complications should you watch for?`,
        
        si: `Patient Case: Leptospirosis Simulation

Patient: ${patientProfile.age} year old ${patientProfile.gender}, ${patientProfile.occupation} from ${patientProfile.location}

Presenting Symptoms:
- High fever (39-40¬∞C) for 5 days
- Severe muscle pain, especially in calves
- Headache and eye pain
- Nausea and vomiting
- Yellow discoloration of eyes
- Decreased urine output

Physical Examination:
- Temperature: 39.2¬∞C
- Blood pressure: 100/60 mmHg
- Pulse: 110/min
- Jaundice present
- Tenderness in calf muscles
- Conjunctival suffusion

Laboratory Results:
- WBC: 12,000/ŒºL (elevated)
- Platelets: 95,000/ŒºL (low)
- Bilirubin: 3.2 mg/dL (elevated)
- Creatinine: 2.1 mg/dL (elevated)
- ALT: 180 U/L (elevated)

Differential Diagnosis:
1. Leptospirosis
2. Dengue fever
3. Hepatitis
4. Typhoid fever
5. Malaria

Management:
- IV fluids
- Doxycycline or Penicillin G
- Monitor renal function
- Supportive care

Questions for students:
- What is the most likely diagnosis?
- What investigations would you order?
- How would you manage this patient?
- What complications should you watch for?`,
        
        ta: `Patient Case: Leptospirosis Simulation

Patient: ${patientProfile.age} year old ${patientProfile.gender}, ${patientProfile.occupation} from ${patientProfile.location}

Presenting Symptoms:
- High fever (39-40¬∞C) for 5 days
- Severe muscle pain, especially in calves
- Headache and eye pain
- Nausea and vomiting
- Yellow discoloration of eyes
- Decreased urine output

Physical Examination:
- Temperature: 39.2¬∞C
- Blood pressure: 100/60 mmHg
- Pulse: 110/min
- Jaundice present
- Tenderness in calf muscles
- Conjunctival suffusion

Laboratory Results:
- WBC: 12,000/ŒºL (elevated)
- Platelets: 95,000/ŒºL (low)
- Bilirubin: 3.2 mg/dL (elevated)
- Creatinine: 2.1 mg/dL (elevated)
- ALT: 180 U/L (elevated)

Differential Diagnosis:
1. Leptospirosis
2. Dengue fever
3. Hepatitis
4. Typhoid fever
5. Malaria

Management:
- IV fluids
- Doxycycline or Penicillin G
- Monitor renal function
- Supportive care

Questions for students:
- What is the most likely diagnosis?
- What investigations would you order?
- How would you manage this patient?
- What complications should you watch for?`
      },
      
      'dengue fever': {
        en: `Patient Case: Dengue Fever Simulation

Patient: ${patientProfile.age} year old ${patientProfile.gender}, ${patientProfile.occupation} from ${patientProfile.location}

Presenting Symptoms:
- High fever (39-40¬∞C) for 3 days
- Severe headache
- Muscle and joint pain
- Nausea and vomiting
- Mild bleeding from gums
- Rash on arms and legs

Physical Examination:
- Temperature: 39.5¬∞C
- Blood pressure: 110/70 mmHg
- Pulse: 88/min
- Petechiae on arms and legs
- Positive tourniquet test
- Mild hepatomegaly

Laboratory Results:
- WBC: 2,500/ŒºL (low)
- Platelets: 85,000/ŒºL (low)
- Hematocrit: 45% (elevated)
- Liver enzymes: Normal

Differential Diagnosis:
1. Dengue fever
2. Chikungunya
3. Typhoid fever
4. Malaria

Management:
- IV fluids
- Paracetamol for fever
- Monitor platelet count
- Hospital admission for severe cases

Questions for students:
- What are the warning signs of severe dengue?
- How would you manage this patient?
- What complications should you watch for?`
      }
    };

    return presentations[condition]?.[language] || presentations[condition]?.en || 
           `Patient Case: ${condition} Simulation

Patient: ${patientProfile.age} year old ${patientProfile.gender}, ${patientProfile.occupation} from ${patientProfile.location}

This is a simulated patient case for educational purposes. Please ask questions to gather more information about the patient's condition and develop your diagnostic and management plan.

Key Learning Objectives:
- History taking skills
- Physical examination
- Differential diagnosis
- Treatment planning
- Patient communication`;
  }
}

module.exports = new SimulationManager(); 